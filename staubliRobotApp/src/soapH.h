/* soapH.h
   Generated by gSOAP 2.8.52 for CS8Server.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "../soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_byte(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (soap_read_byte(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SessionId_DEFINED
#define SOAP_TYPE_ns1__SessionId_DEFINED

inline void soap_default_ns1__SessionId(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__SessionId
	*a = SOAP_DEFAULT_ns1__SessionId;
#else
	*a = (int)0;
#endif
}

#define soap_ns1__SessionId2s soap_int2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SessionId(struct soap*, const char*, int, const int *, const char*);

#define soap_s2ns1__SessionId soap_s2int

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_ns1__SessionId(struct soap*, const char*, int *, const char*);

#define soap_instantiate_ns1__SessionId soap_instantiate_int


#define soap_new_ns1__SessionId soap_new_int

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SessionId(struct soap*, const int *, const char*, const char*);

inline int soap_write_ns1__SessionId(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns1__SessionId(soap, p, "ns1:SessionId", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__SessionId(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__SessionId(soap, p, "ns1:SessionId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SessionId(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__SessionId(soap, p, "ns1:SessionId", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_ns1__SessionId(struct soap*, int *, const char*, const char*);

inline int soap_read_ns1__SessionId(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns1__SessionId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SessionId(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SessionId(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SessionId(struct soap *soap, int *p)
{
	if (soap_read_ns1__SessionId(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_int(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (soap_read_int(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED

inline void soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_double(soap, p, "double", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_double(struct soap *soap, const char *URL, double *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_double(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_double(struct soap *soap, double *p)
{
	if (soap_read_double(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

inline void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_unsignedByte(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (soap_read_unsignedByte(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_unsignedInt(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (soap_read_unsignedInt(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_bool(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (soap_read_bool(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__replaceLineReturnCode_DEFINED
#define SOAP_TYPE_ns7__replaceLineReturnCode_DEFINED

inline void soap_default_ns7__replaceLineReturnCode(struct soap *soap, enum ns7__replaceLineReturnCode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns7__replaceLineReturnCode
	*a = SOAP_DEFAULT_ns7__replaceLineReturnCode;
#else
	*a = (enum ns7__replaceLineReturnCode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__replaceLineReturnCode(struct soap*, const char*, int, const enum ns7__replaceLineReturnCode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns7__replaceLineReturnCode2s(struct soap*, enum ns7__replaceLineReturnCode);
SOAP_FMAC3 enum ns7__replaceLineReturnCode * SOAP_FMAC4 soap_in_ns7__replaceLineReturnCode(struct soap*, const char*, enum ns7__replaceLineReturnCode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns7__replaceLineReturnCode(struct soap*, const char*, enum ns7__replaceLineReturnCode *);

SOAP_FMAC3 enum ns7__replaceLineReturnCode * SOAP_FMAC4 soap_new_ns7__replaceLineReturnCode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns7__replaceLineReturnCode(struct soap*, const enum ns7__replaceLineReturnCode *, const char*, const char*);

inline int soap_write_ns7__replaceLineReturnCode(struct soap *soap, enum ns7__replaceLineReturnCode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns7__replaceLineReturnCode(soap, p, "ns7:replaceLineReturnCode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns7__replaceLineReturnCode(struct soap *soap, const char *URL, enum ns7__replaceLineReturnCode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns7__replaceLineReturnCode(soap, p, "ns7:replaceLineReturnCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__replaceLineReturnCode(struct soap *soap, const char *URL, enum ns7__replaceLineReturnCode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns7__replaceLineReturnCode(soap, p, "ns7:replaceLineReturnCode", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum ns7__replaceLineReturnCode * SOAP_FMAC4 soap_get_ns7__replaceLineReturnCode(struct soap*, enum ns7__replaceLineReturnCode *, const char*, const char*);

inline int soap_read_ns7__replaceLineReturnCode(struct soap *soap, enum ns7__replaceLineReturnCode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns7__replaceLineReturnCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__replaceLineReturnCode(struct soap *soap, const char *URL, enum ns7__replaceLineReturnCode *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__replaceLineReturnCode(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__replaceLineReturnCode(struct soap *soap, enum ns7__replaceLineReturnCode *p)
{
	if (soap_read_ns7__replaceLineReturnCode(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__execVal3ReturnCode_DEFINED
#define SOAP_TYPE_ns7__execVal3ReturnCode_DEFINED

inline void soap_default_ns7__execVal3ReturnCode(struct soap *soap, enum ns7__execVal3ReturnCode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns7__execVal3ReturnCode
	*a = SOAP_DEFAULT_ns7__execVal3ReturnCode;
#else
	*a = (enum ns7__execVal3ReturnCode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__execVal3ReturnCode(struct soap*, const char*, int, const enum ns7__execVal3ReturnCode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns7__execVal3ReturnCode2s(struct soap*, enum ns7__execVal3ReturnCode);
SOAP_FMAC3 enum ns7__execVal3ReturnCode * SOAP_FMAC4 soap_in_ns7__execVal3ReturnCode(struct soap*, const char*, enum ns7__execVal3ReturnCode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns7__execVal3ReturnCode(struct soap*, const char*, enum ns7__execVal3ReturnCode *);

SOAP_FMAC3 enum ns7__execVal3ReturnCode * SOAP_FMAC4 soap_new_ns7__execVal3ReturnCode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns7__execVal3ReturnCode(struct soap*, const enum ns7__execVal3ReturnCode *, const char*, const char*);

inline int soap_write_ns7__execVal3ReturnCode(struct soap *soap, enum ns7__execVal3ReturnCode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns7__execVal3ReturnCode(soap, p, "ns7:execVal3ReturnCode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns7__execVal3ReturnCode(struct soap *soap, const char *URL, enum ns7__execVal3ReturnCode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns7__execVal3ReturnCode(soap, p, "ns7:execVal3ReturnCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__execVal3ReturnCode(struct soap *soap, const char *URL, enum ns7__execVal3ReturnCode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns7__execVal3ReturnCode(soap, p, "ns7:execVal3ReturnCode", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum ns7__execVal3ReturnCode * SOAP_FMAC4 soap_get_ns7__execVal3ReturnCode(struct soap*, enum ns7__execVal3ReturnCode *, const char*, const char*);

inline int soap_read_ns7__execVal3ReturnCode(struct soap *soap, enum ns7__execVal3ReturnCode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns7__execVal3ReturnCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__execVal3ReturnCode(struct soap *soap, const char *URL, enum ns7__execVal3ReturnCode *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__execVal3ReturnCode(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__execVal3ReturnCode(struct soap *soap, enum ns7__execVal3ReturnCode *p)
{
	if (soap_read_ns7__execVal3ReturnCode(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapPhysicalIoEnumState_DEFINED
#define SOAP_TYPE_ns7__SoapPhysicalIoEnumState_DEFINED

inline void soap_default_ns7__SoapPhysicalIoEnumState(struct soap *soap, enum ns7__SoapPhysicalIoEnumState *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns7__SoapPhysicalIoEnumState
	*a = SOAP_DEFAULT_ns7__SoapPhysicalIoEnumState;
#else
	*a = (enum ns7__SoapPhysicalIoEnumState)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapPhysicalIoEnumState(struct soap*, const char*, int, const enum ns7__SoapPhysicalIoEnumState *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns7__SoapPhysicalIoEnumState2s(struct soap*, enum ns7__SoapPhysicalIoEnumState);
SOAP_FMAC3 enum ns7__SoapPhysicalIoEnumState * SOAP_FMAC4 soap_in_ns7__SoapPhysicalIoEnumState(struct soap*, const char*, enum ns7__SoapPhysicalIoEnumState *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns7__SoapPhysicalIoEnumState(struct soap*, const char*, enum ns7__SoapPhysicalIoEnumState *);

SOAP_FMAC3 enum ns7__SoapPhysicalIoEnumState * SOAP_FMAC4 soap_new_ns7__SoapPhysicalIoEnumState(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns7__SoapPhysicalIoEnumState(struct soap*, const enum ns7__SoapPhysicalIoEnumState *, const char*, const char*);

inline int soap_write_ns7__SoapPhysicalIoEnumState(struct soap *soap, enum ns7__SoapPhysicalIoEnumState const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns7__SoapPhysicalIoEnumState(soap, p, "ns7:SoapPhysicalIoEnumState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapPhysicalIoEnumState(struct soap *soap, const char *URL, enum ns7__SoapPhysicalIoEnumState const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns7__SoapPhysicalIoEnumState(soap, p, "ns7:SoapPhysicalIoEnumState", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapPhysicalIoEnumState(struct soap *soap, const char *URL, enum ns7__SoapPhysicalIoEnumState const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns7__SoapPhysicalIoEnumState(soap, p, "ns7:SoapPhysicalIoEnumState", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum ns7__SoapPhysicalIoEnumState * SOAP_FMAC4 soap_get_ns7__SoapPhysicalIoEnumState(struct soap*, enum ns7__SoapPhysicalIoEnumState *, const char*, const char*);

inline int soap_read_ns7__SoapPhysicalIoEnumState(struct soap *soap, enum ns7__SoapPhysicalIoEnumState *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns7__SoapPhysicalIoEnumState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapPhysicalIoEnumState(struct soap *soap, const char *URL, enum ns7__SoapPhysicalIoEnumState *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapPhysicalIoEnumState(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapPhysicalIoEnumState(struct soap *soap, enum ns7__SoapPhysicalIoEnumState *p)
{
	if (soap_read_ns7__SoapPhysicalIoEnumState(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapTaskStep_DEFINED
#define SOAP_TYPE_ns7__SoapTaskStep_DEFINED

inline void soap_default_ns7__SoapTaskStep(struct soap *soap, enum ns7__SoapTaskStep *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns7__SoapTaskStep
	*a = SOAP_DEFAULT_ns7__SoapTaskStep;
#else
	*a = (enum ns7__SoapTaskStep)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapTaskStep(struct soap*, const char*, int, const enum ns7__SoapTaskStep *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns7__SoapTaskStep2s(struct soap*, enum ns7__SoapTaskStep);
SOAP_FMAC3 enum ns7__SoapTaskStep * SOAP_FMAC4 soap_in_ns7__SoapTaskStep(struct soap*, const char*, enum ns7__SoapTaskStep *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns7__SoapTaskStep(struct soap*, const char*, enum ns7__SoapTaskStep *);

SOAP_FMAC3 enum ns7__SoapTaskStep * SOAP_FMAC4 soap_new_ns7__SoapTaskStep(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns7__SoapTaskStep(struct soap*, const enum ns7__SoapTaskStep *, const char*, const char*);

inline int soap_write_ns7__SoapTaskStep(struct soap *soap, enum ns7__SoapTaskStep const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns7__SoapTaskStep(soap, p, "ns7:SoapTaskStep", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapTaskStep(struct soap *soap, const char *URL, enum ns7__SoapTaskStep const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns7__SoapTaskStep(soap, p, "ns7:SoapTaskStep", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapTaskStep(struct soap *soap, const char *URL, enum ns7__SoapTaskStep const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns7__SoapTaskStep(soap, p, "ns7:SoapTaskStep", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum ns7__SoapTaskStep * SOAP_FMAC4 soap_get_ns7__SoapTaskStep(struct soap*, enum ns7__SoapTaskStep *, const char*, const char*);

inline int soap_read_ns7__SoapTaskStep(struct soap *soap, enum ns7__SoapTaskStep *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns7__SoapTaskStep(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapTaskStep(struct soap *soap, const char *URL, enum ns7__SoapTaskStep *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapTaskStep(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapTaskStep(struct soap *soap, enum ns7__SoapTaskStep *p)
{
	if (soap_read_ns7__SoapTaskStep(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapTaskState_DEFINED
#define SOAP_TYPE_ns7__SoapTaskState_DEFINED

inline void soap_default_ns7__SoapTaskState(struct soap *soap, enum ns7__SoapTaskState *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns7__SoapTaskState
	*a = SOAP_DEFAULT_ns7__SoapTaskState;
#else
	*a = (enum ns7__SoapTaskState)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapTaskState(struct soap*, const char*, int, const enum ns7__SoapTaskState *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns7__SoapTaskState2s(struct soap*, enum ns7__SoapTaskState);
SOAP_FMAC3 enum ns7__SoapTaskState * SOAP_FMAC4 soap_in_ns7__SoapTaskState(struct soap*, const char*, enum ns7__SoapTaskState *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns7__SoapTaskState(struct soap*, const char*, enum ns7__SoapTaskState *);

SOAP_FMAC3 enum ns7__SoapTaskState * SOAP_FMAC4 soap_new_ns7__SoapTaskState(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns7__SoapTaskState(struct soap*, const enum ns7__SoapTaskState *, const char*, const char*);

inline int soap_write_ns7__SoapTaskState(struct soap *soap, enum ns7__SoapTaskState const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns7__SoapTaskState(soap, p, "ns7:SoapTaskState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapTaskState(struct soap *soap, const char *URL, enum ns7__SoapTaskState const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns7__SoapTaskState(soap, p, "ns7:SoapTaskState", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapTaskState(struct soap *soap, const char *URL, enum ns7__SoapTaskState const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns7__SoapTaskState(soap, p, "ns7:SoapTaskState", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum ns7__SoapTaskState * SOAP_FMAC4 soap_get_ns7__SoapTaskState(struct soap*, enum ns7__SoapTaskState *, const char*, const char*);

inline int soap_read_ns7__SoapTaskState(struct soap *soap, enum ns7__SoapTaskState *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns7__SoapTaskState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapTaskState(struct soap *soap, const char *URL, enum ns7__SoapTaskState *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapTaskState(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapTaskState(struct soap *soap, enum ns7__SoapTaskState *p)
{
	if (soap_read_ns7__SoapTaskState(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DiameterAxis3_DEFINED
#define SOAP_TYPE_ns1__DiameterAxis3_DEFINED

inline void soap_default_ns1__DiameterAxis3(struct soap *soap, enum ns1__DiameterAxis3 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__DiameterAxis3
	*a = SOAP_DEFAULT_ns1__DiameterAxis3;
#else
	*a = (enum ns1__DiameterAxis3)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DiameterAxis3(struct soap*, const char*, int, const enum ns1__DiameterAxis3 *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__DiameterAxis32s(struct soap*, enum ns1__DiameterAxis3);
SOAP_FMAC3 enum ns1__DiameterAxis3 * SOAP_FMAC4 soap_in_ns1__DiameterAxis3(struct soap*, const char*, enum ns1__DiameterAxis3 *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__DiameterAxis3(struct soap*, const char*, enum ns1__DiameterAxis3 *);

SOAP_FMAC3 enum ns1__DiameterAxis3 * SOAP_FMAC4 soap_new_ns1__DiameterAxis3(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DiameterAxis3(struct soap*, const enum ns1__DiameterAxis3 *, const char*, const char*);

inline int soap_write_ns1__DiameterAxis3(struct soap *soap, enum ns1__DiameterAxis3 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns1__DiameterAxis3(soap, p, "ns1:DiameterAxis3", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__DiameterAxis3(struct soap *soap, const char *URL, enum ns1__DiameterAxis3 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__DiameterAxis3(soap, p, "ns1:DiameterAxis3", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DiameterAxis3(struct soap *soap, const char *URL, enum ns1__DiameterAxis3 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__DiameterAxis3(soap, p, "ns1:DiameterAxis3", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__DiameterAxis3 * SOAP_FMAC4 soap_get_ns1__DiameterAxis3(struct soap*, enum ns1__DiameterAxis3 *, const char*, const char*);

inline int soap_read_ns1__DiameterAxis3(struct soap *soap, enum ns1__DiameterAxis3 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns1__DiameterAxis3(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DiameterAxis3(struct soap *soap, const char *URL, enum ns1__DiameterAxis3 *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DiameterAxis3(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DiameterAxis3(struct soap *soap, enum ns1__DiameterAxis3 *p)
{
	if (soap_read_ns1__DiameterAxis3(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__LengthAxis3_DEFINED
#define SOAP_TYPE_ns1__LengthAxis3_DEFINED

inline void soap_default_ns1__LengthAxis3(struct soap *soap, enum ns1__LengthAxis3 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__LengthAxis3
	*a = SOAP_DEFAULT_ns1__LengthAxis3;
#else
	*a = (enum ns1__LengthAxis3)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LengthAxis3(struct soap*, const char*, int, const enum ns1__LengthAxis3 *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__LengthAxis32s(struct soap*, enum ns1__LengthAxis3);
SOAP_FMAC3 enum ns1__LengthAxis3 * SOAP_FMAC4 soap_in_ns1__LengthAxis3(struct soap*, const char*, enum ns1__LengthAxis3 *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__LengthAxis3(struct soap*, const char*, enum ns1__LengthAxis3 *);

SOAP_FMAC3 enum ns1__LengthAxis3 * SOAP_FMAC4 soap_new_ns1__LengthAxis3(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__LengthAxis3(struct soap*, const enum ns1__LengthAxis3 *, const char*, const char*);

inline int soap_write_ns1__LengthAxis3(struct soap *soap, enum ns1__LengthAxis3 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns1__LengthAxis3(soap, p, "ns1:LengthAxis3", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__LengthAxis3(struct soap *soap, const char *URL, enum ns1__LengthAxis3 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__LengthAxis3(soap, p, "ns1:LengthAxis3", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__LengthAxis3(struct soap *soap, const char *URL, enum ns1__LengthAxis3 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__LengthAxis3(soap, p, "ns1:LengthAxis3", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__LengthAxis3 * SOAP_FMAC4 soap_get_ns1__LengthAxis3(struct soap*, enum ns1__LengthAxis3 *, const char*, const char*);

inline int soap_read_ns1__LengthAxis3(struct soap *soap, enum ns1__LengthAxis3 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns1__LengthAxis3(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__LengthAxis3(struct soap *soap, const char *URL, enum ns1__LengthAxis3 *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__LengthAxis3(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__LengthAxis3(struct soap *soap, enum ns1__LengthAxis3 *p)
{
	if (soap_read_ns1__LengthAxis3(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MountType_DEFINED
#define SOAP_TYPE_ns1__MountType_DEFINED

inline void soap_default_ns1__MountType(struct soap *soap, enum ns1__MountType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__MountType
	*a = SOAP_DEFAULT_ns1__MountType;
#else
	*a = (enum ns1__MountType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MountType(struct soap*, const char*, int, const enum ns1__MountType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__MountType2s(struct soap*, enum ns1__MountType);
SOAP_FMAC3 enum ns1__MountType * SOAP_FMAC4 soap_in_ns1__MountType(struct soap*, const char*, enum ns1__MountType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__MountType(struct soap*, const char*, enum ns1__MountType *);

SOAP_FMAC3 enum ns1__MountType * SOAP_FMAC4 soap_new_ns1__MountType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__MountType(struct soap*, const enum ns1__MountType *, const char*, const char*);

inline int soap_write_ns1__MountType(struct soap *soap, enum ns1__MountType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns1__MountType(soap, p, "ns1:MountType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__MountType(struct soap *soap, const char *URL, enum ns1__MountType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__MountType(soap, p, "ns1:MountType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MountType(struct soap *soap, const char *URL, enum ns1__MountType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__MountType(soap, p, "ns1:MountType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__MountType * SOAP_FMAC4 soap_get_ns1__MountType(struct soap*, enum ns1__MountType *, const char*, const char*);

inline int soap_read_ns1__MountType(struct soap *soap, enum ns1__MountType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns1__MountType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MountType(struct soap *soap, const char *URL, enum ns1__MountType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MountType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MountType(struct soap *soap, enum ns1__MountType *p)
{
	if (soap_read_ns1__MountType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__Kinematic_DEFINED
#define SOAP_TYPE_ns1__Kinematic_DEFINED

inline void soap_default_ns1__Kinematic(struct soap *soap, enum ns1__Kinematic *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__Kinematic
	*a = SOAP_DEFAULT_ns1__Kinematic;
#else
	*a = (enum ns1__Kinematic)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Kinematic(struct soap*, const char*, int, const enum ns1__Kinematic *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__Kinematic2s(struct soap*, enum ns1__Kinematic);
SOAP_FMAC3 enum ns1__Kinematic * SOAP_FMAC4 soap_in_ns1__Kinematic(struct soap*, const char*, enum ns1__Kinematic *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__Kinematic(struct soap*, const char*, enum ns1__Kinematic *);

SOAP_FMAC3 enum ns1__Kinematic * SOAP_FMAC4 soap_new_ns1__Kinematic(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Kinematic(struct soap*, const enum ns1__Kinematic *, const char*, const char*);

inline int soap_write_ns1__Kinematic(struct soap *soap, enum ns1__Kinematic const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns1__Kinematic(soap, p, "ns1:Kinematic", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__Kinematic(struct soap *soap, const char *URL, enum ns1__Kinematic const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__Kinematic(soap, p, "ns1:Kinematic", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Kinematic(struct soap *soap, const char *URL, enum ns1__Kinematic const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__Kinematic(soap, p, "ns1:Kinematic", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__Kinematic * SOAP_FMAC4 soap_get_ns1__Kinematic(struct soap*, enum ns1__Kinematic *, const char*, const char*);

inline int soap_read_ns1__Kinematic(struct soap *soap, enum ns1__Kinematic *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns1__Kinematic(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Kinematic(struct soap *soap, const char *URL, enum ns1__Kinematic *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__Kinematic(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__Kinematic(struct soap *soap, enum ns1__Kinematic *p)
{
	if (soap_read_ns1__Kinematic(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ServerExceptionCode_DEFINED
#define SOAP_TYPE_ns1__ServerExceptionCode_DEFINED

inline void soap_default_ns1__ServerExceptionCode(struct soap *soap, enum ns1__ServerExceptionCode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__ServerExceptionCode
	*a = SOAP_DEFAULT_ns1__ServerExceptionCode;
#else
	*a = (enum ns1__ServerExceptionCode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ServerExceptionCode(struct soap*, const char*, int, const enum ns1__ServerExceptionCode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__ServerExceptionCode2s(struct soap*, enum ns1__ServerExceptionCode);
SOAP_FMAC3 enum ns1__ServerExceptionCode * SOAP_FMAC4 soap_in_ns1__ServerExceptionCode(struct soap*, const char*, enum ns1__ServerExceptionCode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__ServerExceptionCode(struct soap*, const char*, enum ns1__ServerExceptionCode *);

SOAP_FMAC3 enum ns1__ServerExceptionCode * SOAP_FMAC4 soap_new_ns1__ServerExceptionCode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ServerExceptionCode(struct soap*, const enum ns1__ServerExceptionCode *, const char*, const char*);

inline int soap_write_ns1__ServerExceptionCode(struct soap *soap, enum ns1__ServerExceptionCode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns1__ServerExceptionCode(soap, p, "ns1:ServerExceptionCode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ServerExceptionCode(struct soap *soap, const char *URL, enum ns1__ServerExceptionCode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__ServerExceptionCode(soap, p, "ns1:ServerExceptionCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ServerExceptionCode(struct soap *soap, const char *URL, enum ns1__ServerExceptionCode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__ServerExceptionCode(soap, p, "ns1:ServerExceptionCode", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__ServerExceptionCode * SOAP_FMAC4 soap_get_ns1__ServerExceptionCode(struct soap*, enum ns1__ServerExceptionCode *, const char*, const char*);

inline int soap_read_ns1__ServerExceptionCode(struct soap *soap, enum ns1__ServerExceptionCode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns1__ServerExceptionCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ServerExceptionCode(struct soap *soap, const char *URL, enum ns1__ServerExceptionCode *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ServerExceptionCode(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ServerExceptionCode(struct soap *soap, enum ns1__ServerExceptionCode *p)
{
	if (soap_read_ns1__ServerExceptionCode(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__hexBinary_DEFINED
#define SOAP_TYPE_ns4__hexBinary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__hexBinary(struct soap*, const char*, int, const ns4__hexBinary *, const char*);
SOAP_FMAC3 ns4__hexBinary * SOAP_FMAC4 soap_in_ns4__hexBinary(struct soap*, const char*, ns4__hexBinary *, const char*);
SOAP_FMAC1 ns4__hexBinary * SOAP_FMAC2 soap_instantiate_ns4__hexBinary(struct soap*, int, const char*, const char*, size_t*);

inline ns4__hexBinary * soap_new_ns4__hexBinary(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__hexBinary(soap, n, NULL, NULL, NULL);
}

inline ns4__hexBinary * soap_new_req_ns4__hexBinary(
	struct soap *soap,
	const xsd__hexBinary& __item)
{
	ns4__hexBinary *_p = soap_new_ns4__hexBinary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__hexBinary::__item = __item;
	}
	return _p;
}

inline ns4__hexBinary * soap_new_set_ns4__hexBinary(
	struct soap *soap,
	const xsd__hexBinary& __item,
	std::string *contentType)
{
	ns4__hexBinary *_p = soap_new_ns4__hexBinary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__hexBinary::__item = __item;
		_p->ns4__hexBinary::contentType = contentType;
	}
	return _p;
}

inline int soap_write_ns4__hexBinary(struct soap *soap, ns4__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:hexBinary", p->soap_type() == SOAP_TYPE_ns4__hexBinary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__hexBinary(struct soap *soap, const char *URL, ns4__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:hexBinary", p->soap_type() == SOAP_TYPE_ns4__hexBinary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns4__hexBinary(struct soap *soap, const char *URL, ns4__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:hexBinary", p->soap_type() == SOAP_TYPE_ns4__hexBinary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns4__hexBinary * SOAP_FMAC4 soap_get_ns4__hexBinary(struct soap*, ns4__hexBinary *, const char*, const char*);

inline int soap_read_ns4__hexBinary(struct soap *soap, ns4__hexBinary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns4__hexBinary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__hexBinary(struct soap *soap, const char *URL, ns4__hexBinary *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__hexBinary(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__hexBinary(struct soap *soap, ns4__hexBinary *p)
{
	if (soap_read_ns4__hexBinary(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__base64Binary_DEFINED
#define SOAP_TYPE_ns4__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__base64Binary(struct soap*, const char*, int, const ns4__base64Binary *, const char*);
SOAP_FMAC3 ns4__base64Binary * SOAP_FMAC4 soap_in_ns4__base64Binary(struct soap*, const char*, ns4__base64Binary *, const char*);
SOAP_FMAC1 ns4__base64Binary * SOAP_FMAC2 soap_instantiate_ns4__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline ns4__base64Binary * soap_new_ns4__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__base64Binary(soap, n, NULL, NULL, NULL);
}

inline ns4__base64Binary * soap_new_req_ns4__base64Binary(
	struct soap *soap,
	const xsd__base64Binary& __item)
{
	ns4__base64Binary *_p = soap_new_ns4__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__base64Binary::__item = __item;
	}
	return _p;
}

inline ns4__base64Binary * soap_new_set_ns4__base64Binary(
	struct soap *soap,
	const xsd__base64Binary& __item,
	std::string *contentType)
{
	ns4__base64Binary *_p = soap_new_ns4__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__base64Binary::__item = __item;
		_p->ns4__base64Binary::contentType = contentType;
	}
	return _p;
}

inline int soap_write_ns4__base64Binary(struct soap *soap, ns4__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:base64Binary", p->soap_type() == SOAP_TYPE_ns4__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__base64Binary(struct soap *soap, const char *URL, ns4__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:base64Binary", p->soap_type() == SOAP_TYPE_ns4__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns4__base64Binary(struct soap *soap, const char *URL, ns4__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:base64Binary", p->soap_type() == SOAP_TYPE_ns4__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns4__base64Binary * SOAP_FMAC4 soap_get_ns4__base64Binary(struct soap*, ns4__base64Binary *, const char*, const char*);

inline int soap_read_ns4__base64Binary(struct soap *soap, ns4__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns4__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__base64Binary(struct soap *soap, const char *URL, ns4__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__base64Binary(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__base64Binary(struct soap *soap, ns4__base64Binary *p)
{
	if (soap_read_ns4__base64Binary(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns2__getJointRangeResponse_DEFINED
#define SOAP_TYPE__ns2__getJointRangeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__getJointRangeResponse(struct soap*, const char*, int, const _ns2__getJointRangeResponse *, const char*);
SOAP_FMAC3 _ns2__getJointRangeResponse * SOAP_FMAC4 soap_in__ns2__getJointRangeResponse(struct soap*, const char*, _ns2__getJointRangeResponse *, const char*);
SOAP_FMAC1 _ns2__getJointRangeResponse * SOAP_FMAC2 soap_instantiate__ns2__getJointRangeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__getJointRangeResponse * soap_new__ns2__getJointRangeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__getJointRangeResponse(soap, n, NULL, NULL, NULL);
}

inline _ns2__getJointRangeResponse * soap_new_req__ns2__getJointRangeResponse(
	struct soap *soap,
	ns2__JointRange *range)
{
	_ns2__getJointRangeResponse *_p = soap_new__ns2__getJointRangeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__getJointRangeResponse::range = range;
	}
	return _p;
}

inline _ns2__getJointRangeResponse * soap_new_set__ns2__getJointRangeResponse(
	struct soap *soap,
	ns2__JointRange *range)
{
	_ns2__getJointRangeResponse *_p = soap_new__ns2__getJointRangeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__getJointRangeResponse::range = range;
	}
	return _p;
}

inline int soap_write__ns2__getJointRangeResponse(struct soap *soap, _ns2__getJointRangeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getJointRangeResponse", p->soap_type() == SOAP_TYPE__ns2__getJointRangeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__getJointRangeResponse(struct soap *soap, const char *URL, _ns2__getJointRangeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getJointRangeResponse", p->soap_type() == SOAP_TYPE__ns2__getJointRangeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns2__getJointRangeResponse(struct soap *soap, const char *URL, _ns2__getJointRangeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getJointRangeResponse", p->soap_type() == SOAP_TYPE__ns2__getJointRangeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__getJointRangeResponse * SOAP_FMAC4 soap_get__ns2__getJointRangeResponse(struct soap*, _ns2__getJointRangeResponse *, const char*, const char*);

inline int soap_read__ns2__getJointRangeResponse(struct soap *soap, _ns2__getJointRangeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns2__getJointRangeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__getJointRangeResponse(struct soap *soap, const char *URL, _ns2__getJointRangeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns2__getJointRangeResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns2__getJointRangeResponse(struct soap *soap, _ns2__getJointRangeResponse *p)
{
	if (soap_read__ns2__getJointRangeResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns2__getJointRange_DEFINED
#define SOAP_TYPE__ns2__getJointRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__getJointRange(struct soap*, const char*, int, const _ns2__getJointRange *, const char*);
SOAP_FMAC3 _ns2__getJointRange * SOAP_FMAC4 soap_in__ns2__getJointRange(struct soap*, const char*, _ns2__getJointRange *, const char*);
SOAP_FMAC1 _ns2__getJointRange * SOAP_FMAC2 soap_instantiate__ns2__getJointRange(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__getJointRange * soap_new__ns2__getJointRange(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__getJointRange(soap, n, NULL, NULL, NULL);
}

inline _ns2__getJointRange * soap_new_req__ns2__getJointRange(
	struct soap *soap,
	int robot)
{
	_ns2__getJointRange *_p = soap_new__ns2__getJointRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__getJointRange::robot = robot;
	}
	return _p;
}

inline _ns2__getJointRange * soap_new_set__ns2__getJointRange(
	struct soap *soap,
	int robot)
{
	_ns2__getJointRange *_p = soap_new__ns2__getJointRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__getJointRange::robot = robot;
	}
	return _p;
}

inline int soap_write__ns2__getJointRange(struct soap *soap, _ns2__getJointRange const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getJointRange", p->soap_type() == SOAP_TYPE__ns2__getJointRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__getJointRange(struct soap *soap, const char *URL, _ns2__getJointRange const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getJointRange", p->soap_type() == SOAP_TYPE__ns2__getJointRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns2__getJointRange(struct soap *soap, const char *URL, _ns2__getJointRange const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getJointRange", p->soap_type() == SOAP_TYPE__ns2__getJointRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__getJointRange * SOAP_FMAC4 soap_get__ns2__getJointRange(struct soap*, _ns2__getJointRange *, const char*, const char*);

inline int soap_read__ns2__getJointRange(struct soap *soap, _ns2__getJointRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns2__getJointRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__getJointRange(struct soap *soap, const char *URL, _ns2__getJointRange *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns2__getJointRange(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns2__getJointRange(struct soap *soap, _ns2__getJointRange *p)
{
	if (soap_read__ns2__getJointRange(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns2__getRecordResponse_DEFINED
#define SOAP_TYPE__ns2__getRecordResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__getRecordResponse(struct soap*, const char*, int, const _ns2__getRecordResponse *, const char*);
SOAP_FMAC3 _ns2__getRecordResponse * SOAP_FMAC4 soap_in__ns2__getRecordResponse(struct soap*, const char*, _ns2__getRecordResponse *, const char*);
SOAP_FMAC1 _ns2__getRecordResponse * SOAP_FMAC2 soap_instantiate__ns2__getRecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__getRecordResponse * soap_new__ns2__getRecordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__getRecordResponse(soap, n, NULL, NULL, NULL);
}

inline _ns2__getRecordResponse * soap_new_req__ns2__getRecordResponse(
	struct soap *soap,
	ns2__Data *data)
{
	_ns2__getRecordResponse *_p = soap_new__ns2__getRecordResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__getRecordResponse::data = data;
	}
	return _p;
}

inline _ns2__getRecordResponse * soap_new_set__ns2__getRecordResponse(
	struct soap *soap,
	ns2__Data *data)
{
	_ns2__getRecordResponse *_p = soap_new__ns2__getRecordResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__getRecordResponse::data = data;
	}
	return _p;
}

inline int soap_write__ns2__getRecordResponse(struct soap *soap, _ns2__getRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getRecordResponse", p->soap_type() == SOAP_TYPE__ns2__getRecordResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__getRecordResponse(struct soap *soap, const char *URL, _ns2__getRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getRecordResponse", p->soap_type() == SOAP_TYPE__ns2__getRecordResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns2__getRecordResponse(struct soap *soap, const char *URL, _ns2__getRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getRecordResponse", p->soap_type() == SOAP_TYPE__ns2__getRecordResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__getRecordResponse * SOAP_FMAC4 soap_get__ns2__getRecordResponse(struct soap*, _ns2__getRecordResponse *, const char*, const char*);

inline int soap_read__ns2__getRecordResponse(struct soap *soap, _ns2__getRecordResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns2__getRecordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__getRecordResponse(struct soap *soap, const char *URL, _ns2__getRecordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns2__getRecordResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns2__getRecordResponse(struct soap *soap, _ns2__getRecordResponse *p)
{
	if (soap_read__ns2__getRecordResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns2__getRecord_DEFINED
#define SOAP_TYPE__ns2__getRecord_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__getRecord(struct soap*, const char*, int, const _ns2__getRecord *, const char*);
SOAP_FMAC3 _ns2__getRecord * SOAP_FMAC4 soap_in__ns2__getRecord(struct soap*, const char*, _ns2__getRecord *, const char*);
SOAP_FMAC1 _ns2__getRecord * SOAP_FMAC2 soap_instantiate__ns2__getRecord(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__getRecord * soap_new__ns2__getRecord(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__getRecord(soap, n, NULL, NULL, NULL);
}

inline _ns2__getRecord * soap_new_req__ns2__getRecord(
	struct soap *soap)
{
	_ns2__getRecord *_p = soap_new__ns2__getRecord(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__getRecord * soap_new_set__ns2__getRecord(
	struct soap *soap,
	std::string *name)
{
	_ns2__getRecord *_p = soap_new__ns2__getRecord(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__getRecord::name = name;
	}
	return _p;
}

inline int soap_write__ns2__getRecord(struct soap *soap, _ns2__getRecord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getRecord", p->soap_type() == SOAP_TYPE__ns2__getRecord ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__getRecord(struct soap *soap, const char *URL, _ns2__getRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getRecord", p->soap_type() == SOAP_TYPE__ns2__getRecord ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns2__getRecord(struct soap *soap, const char *URL, _ns2__getRecord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getRecord", p->soap_type() == SOAP_TYPE__ns2__getRecord ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__getRecord * SOAP_FMAC4 soap_get__ns2__getRecord(struct soap*, _ns2__getRecord *, const char*, const char*);

inline int soap_read__ns2__getRecord(struct soap *soap, _ns2__getRecord *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns2__getRecord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__getRecord(struct soap *soap, const char *URL, _ns2__getRecord *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns2__getRecord(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns2__getRecord(struct soap *soap, _ns2__getRecord *p)
{
	if (soap_read__ns2__getRecord(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns2__getRecordsResponse_DEFINED
#define SOAP_TYPE__ns2__getRecordsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__getRecordsResponse(struct soap*, const char*, int, const _ns2__getRecordsResponse *, const char*);
SOAP_FMAC3 _ns2__getRecordsResponse * SOAP_FMAC4 soap_in__ns2__getRecordsResponse(struct soap*, const char*, _ns2__getRecordsResponse *, const char*);
SOAP_FMAC1 _ns2__getRecordsResponse * SOAP_FMAC2 soap_instantiate__ns2__getRecordsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__getRecordsResponse * soap_new__ns2__getRecordsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__getRecordsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns2__getRecordsResponse * soap_new_req__ns2__getRecordsResponse(
	struct soap *soap,
	ns2__Records *records)
{
	_ns2__getRecordsResponse *_p = soap_new__ns2__getRecordsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__getRecordsResponse::records = records;
	}
	return _p;
}

inline _ns2__getRecordsResponse * soap_new_set__ns2__getRecordsResponse(
	struct soap *soap,
	ns2__Records *records)
{
	_ns2__getRecordsResponse *_p = soap_new__ns2__getRecordsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__getRecordsResponse::records = records;
	}
	return _p;
}

inline int soap_write__ns2__getRecordsResponse(struct soap *soap, _ns2__getRecordsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getRecordsResponse", p->soap_type() == SOAP_TYPE__ns2__getRecordsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__getRecordsResponse(struct soap *soap, const char *URL, _ns2__getRecordsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getRecordsResponse", p->soap_type() == SOAP_TYPE__ns2__getRecordsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns2__getRecordsResponse(struct soap *soap, const char *URL, _ns2__getRecordsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getRecordsResponse", p->soap_type() == SOAP_TYPE__ns2__getRecordsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__getRecordsResponse * SOAP_FMAC4 soap_get__ns2__getRecordsResponse(struct soap*, _ns2__getRecordsResponse *, const char*, const char*);

inline int soap_read__ns2__getRecordsResponse(struct soap *soap, _ns2__getRecordsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns2__getRecordsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__getRecordsResponse(struct soap *soap, const char *URL, _ns2__getRecordsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns2__getRecordsResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns2__getRecordsResponse(struct soap *soap, _ns2__getRecordsResponse *p)
{
	if (soap_read__ns2__getRecordsResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns2__getRecords_DEFINED
#define SOAP_TYPE__ns2__getRecords_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__getRecords(struct soap*, const char*, int, const _ns2__getRecords *, const char*);
SOAP_FMAC3 _ns2__getRecords * SOAP_FMAC4 soap_in__ns2__getRecords(struct soap*, const char*, _ns2__getRecords *, const char*);
SOAP_FMAC1 _ns2__getRecords * SOAP_FMAC2 soap_instantiate__ns2__getRecords(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__getRecords * soap_new__ns2__getRecords(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__getRecords(soap, n, NULL, NULL, NULL);
}

inline _ns2__getRecords * soap_new_req__ns2__getRecords(
	struct soap *soap)
{
	_ns2__getRecords *_p = soap_new__ns2__getRecords(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__getRecords * soap_new_set__ns2__getRecords(
	struct soap *soap)
{
	_ns2__getRecords *_p = soap_new__ns2__getRecords(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns2__getRecords(struct soap *soap, _ns2__getRecords const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getRecords", p->soap_type() == SOAP_TYPE__ns2__getRecords ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__getRecords(struct soap *soap, const char *URL, _ns2__getRecords const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getRecords", p->soap_type() == SOAP_TYPE__ns2__getRecords ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns2__getRecords(struct soap *soap, const char *URL, _ns2__getRecords const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getRecords", p->soap_type() == SOAP_TYPE__ns2__getRecords ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__getRecords * SOAP_FMAC4 soap_get__ns2__getRecords(struct soap*, _ns2__getRecords *, const char*, const char*);

inline int soap_read__ns2__getRecords(struct soap *soap, _ns2__getRecords *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns2__getRecords(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__getRecords(struct soap *soap, const char *URL, _ns2__getRecords *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns2__getRecords(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns2__getRecords(struct soap *soap, _ns2__getRecords *p)
{
	if (soap_read__ns2__getRecords(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns2__getApplicationDatasResponse_DEFINED
#define SOAP_TYPE__ns2__getApplicationDatasResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__getApplicationDatasResponse(struct soap*, const char*, int, const _ns2__getApplicationDatasResponse *, const char*);
SOAP_FMAC3 _ns2__getApplicationDatasResponse * SOAP_FMAC4 soap_in__ns2__getApplicationDatasResponse(struct soap*, const char*, _ns2__getApplicationDatasResponse *, const char*);
SOAP_FMAC1 _ns2__getApplicationDatasResponse * SOAP_FMAC2 soap_instantiate__ns2__getApplicationDatasResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__getApplicationDatasResponse * soap_new__ns2__getApplicationDatasResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__getApplicationDatasResponse(soap, n, NULL, NULL, NULL);
}

inline _ns2__getApplicationDatasResponse * soap_new_req__ns2__getApplicationDatasResponse(
	struct soap *soap,
	ns2__Data *data)
{
	_ns2__getApplicationDatasResponse *_p = soap_new__ns2__getApplicationDatasResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__getApplicationDatasResponse::data = data;
	}
	return _p;
}

inline _ns2__getApplicationDatasResponse * soap_new_set__ns2__getApplicationDatasResponse(
	struct soap *soap,
	ns2__Data *data)
{
	_ns2__getApplicationDatasResponse *_p = soap_new__ns2__getApplicationDatasResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__getApplicationDatasResponse::data = data;
	}
	return _p;
}

inline int soap_write__ns2__getApplicationDatasResponse(struct soap *soap, _ns2__getApplicationDatasResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getApplicationDatasResponse", p->soap_type() == SOAP_TYPE__ns2__getApplicationDatasResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__getApplicationDatasResponse(struct soap *soap, const char *URL, _ns2__getApplicationDatasResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getApplicationDatasResponse", p->soap_type() == SOAP_TYPE__ns2__getApplicationDatasResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns2__getApplicationDatasResponse(struct soap *soap, const char *URL, _ns2__getApplicationDatasResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getApplicationDatasResponse", p->soap_type() == SOAP_TYPE__ns2__getApplicationDatasResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__getApplicationDatasResponse * SOAP_FMAC4 soap_get__ns2__getApplicationDatasResponse(struct soap*, _ns2__getApplicationDatasResponse *, const char*, const char*);

inline int soap_read__ns2__getApplicationDatasResponse(struct soap *soap, _ns2__getApplicationDatasResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns2__getApplicationDatasResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__getApplicationDatasResponse(struct soap *soap, const char *URL, _ns2__getApplicationDatasResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns2__getApplicationDatasResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns2__getApplicationDatasResponse(struct soap *soap, _ns2__getApplicationDatasResponse *p)
{
	if (soap_read__ns2__getApplicationDatasResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns2__getApplicationDatas_DEFINED
#define SOAP_TYPE__ns2__getApplicationDatas_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__getApplicationDatas(struct soap*, const char*, int, const _ns2__getApplicationDatas *, const char*);
SOAP_FMAC3 _ns2__getApplicationDatas * SOAP_FMAC4 soap_in__ns2__getApplicationDatas(struct soap*, const char*, _ns2__getApplicationDatas *, const char*);
SOAP_FMAC1 _ns2__getApplicationDatas * SOAP_FMAC2 soap_instantiate__ns2__getApplicationDatas(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__getApplicationDatas * soap_new__ns2__getApplicationDatas(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__getApplicationDatas(soap, n, NULL, NULL, NULL);
}

inline _ns2__getApplicationDatas * soap_new_req__ns2__getApplicationDatas(
	struct soap *soap)
{
	_ns2__getApplicationDatas *_p = soap_new__ns2__getApplicationDatas(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__getApplicationDatas * soap_new_set__ns2__getApplicationDatas(
	struct soap *soap,
	std::string *name)
{
	_ns2__getApplicationDatas *_p = soap_new__ns2__getApplicationDatas(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__getApplicationDatas::name = name;
	}
	return _p;
}

inline int soap_write__ns2__getApplicationDatas(struct soap *soap, _ns2__getApplicationDatas const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getApplicationDatas", p->soap_type() == SOAP_TYPE__ns2__getApplicationDatas ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__getApplicationDatas(struct soap *soap, const char *URL, _ns2__getApplicationDatas const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getApplicationDatas", p->soap_type() == SOAP_TYPE__ns2__getApplicationDatas ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns2__getApplicationDatas(struct soap *soap, const char *URL, _ns2__getApplicationDatas const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getApplicationDatas", p->soap_type() == SOAP_TYPE__ns2__getApplicationDatas ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__getApplicationDatas * SOAP_FMAC4 soap_get__ns2__getApplicationDatas(struct soap*, _ns2__getApplicationDatas *, const char*, const char*);

inline int soap_read__ns2__getApplicationDatas(struct soap *soap, _ns2__getApplicationDatas *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns2__getApplicationDatas(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__getApplicationDatas(struct soap *soap, const char *URL, _ns2__getApplicationDatas *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns2__getApplicationDatas(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns2__getApplicationDatas(struct soap *soap, _ns2__getApplicationDatas *p)
{
	if (soap_read__ns2__getApplicationDatas(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns2__getApplicationsResponse_DEFINED
#define SOAP_TYPE__ns2__getApplicationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__getApplicationsResponse(struct soap*, const char*, int, const _ns2__getApplicationsResponse *, const char*);
SOAP_FMAC3 _ns2__getApplicationsResponse * SOAP_FMAC4 soap_in__ns2__getApplicationsResponse(struct soap*, const char*, _ns2__getApplicationsResponse *, const char*);
SOAP_FMAC1 _ns2__getApplicationsResponse * SOAP_FMAC2 soap_instantiate__ns2__getApplicationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__getApplicationsResponse * soap_new__ns2__getApplicationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__getApplicationsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns2__getApplicationsResponse * soap_new_req__ns2__getApplicationsResponse(
	struct soap *soap,
	ns2__VALApplications *applications)
{
	_ns2__getApplicationsResponse *_p = soap_new__ns2__getApplicationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__getApplicationsResponse::applications = applications;
	}
	return _p;
}

inline _ns2__getApplicationsResponse * soap_new_set__ns2__getApplicationsResponse(
	struct soap *soap,
	ns2__VALApplications *applications)
{
	_ns2__getApplicationsResponse *_p = soap_new__ns2__getApplicationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__getApplicationsResponse::applications = applications;
	}
	return _p;
}

inline int soap_write__ns2__getApplicationsResponse(struct soap *soap, _ns2__getApplicationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getApplicationsResponse", p->soap_type() == SOAP_TYPE__ns2__getApplicationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__getApplicationsResponse(struct soap *soap, const char *URL, _ns2__getApplicationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getApplicationsResponse", p->soap_type() == SOAP_TYPE__ns2__getApplicationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns2__getApplicationsResponse(struct soap *soap, const char *URL, _ns2__getApplicationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getApplicationsResponse", p->soap_type() == SOAP_TYPE__ns2__getApplicationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__getApplicationsResponse * SOAP_FMAC4 soap_get__ns2__getApplicationsResponse(struct soap*, _ns2__getApplicationsResponse *, const char*, const char*);

inline int soap_read__ns2__getApplicationsResponse(struct soap *soap, _ns2__getApplicationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns2__getApplicationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__getApplicationsResponse(struct soap *soap, const char *URL, _ns2__getApplicationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns2__getApplicationsResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns2__getApplicationsResponse(struct soap *soap, _ns2__getApplicationsResponse *p)
{
	if (soap_read__ns2__getApplicationsResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns2__getApplications_DEFINED
#define SOAP_TYPE__ns2__getApplications_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__getApplications(struct soap*, const char*, int, const _ns2__getApplications *, const char*);
SOAP_FMAC3 _ns2__getApplications * SOAP_FMAC4 soap_in__ns2__getApplications(struct soap*, const char*, _ns2__getApplications *, const char*);
SOAP_FMAC1 _ns2__getApplications * SOAP_FMAC2 soap_instantiate__ns2__getApplications(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__getApplications * soap_new__ns2__getApplications(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__getApplications(soap, n, NULL, NULL, NULL);
}

inline _ns2__getApplications * soap_new_req__ns2__getApplications(
	struct soap *soap)
{
	_ns2__getApplications *_p = soap_new__ns2__getApplications(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__getApplications * soap_new_set__ns2__getApplications(
	struct soap *soap)
{
	_ns2__getApplications *_p = soap_new__ns2__getApplications(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns2__getApplications(struct soap *soap, _ns2__getApplications const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getApplications", p->soap_type() == SOAP_TYPE__ns2__getApplications ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__getApplications(struct soap *soap, const char *URL, _ns2__getApplications const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getApplications", p->soap_type() == SOAP_TYPE__ns2__getApplications ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns2__getApplications(struct soap *soap, const char *URL, _ns2__getApplications const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:getApplications", p->soap_type() == SOAP_TYPE__ns2__getApplications ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__getApplications * SOAP_FMAC4 soap_get__ns2__getApplications(struct soap*, _ns2__getApplications *, const char*, const char*);

inline int soap_read__ns2__getApplications(struct soap *soap, _ns2__getApplications *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns2__getApplications(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__getApplications(struct soap *soap, const char *URL, _ns2__getApplications *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns2__getApplications(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns2__getApplications(struct soap *soap, _ns2__getApplications *p)
{
	if (soap_read__ns2__getApplications(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__JointRange_DEFINED
#define SOAP_TYPE_ns2__JointRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__JointRange(struct soap*, const char*, int, const ns2__JointRange *, const char*);
SOAP_FMAC3 ns2__JointRange * SOAP_FMAC4 soap_in_ns2__JointRange(struct soap*, const char*, ns2__JointRange *, const char*);
SOAP_FMAC1 ns2__JointRange * SOAP_FMAC2 soap_instantiate_ns2__JointRange(struct soap*, int, const char*, const char*, size_t*);

inline ns2__JointRange * soap_new_ns2__JointRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__JointRange(soap, n, NULL, NULL, NULL);
}

inline ns2__JointRange * soap_new_req_ns2__JointRange(
	struct soap *soap)
{
	ns2__JointRange *_p = soap_new_ns2__JointRange(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__JointRange * soap_new_set_ns2__JointRange(
	struct soap *soap,
	const std::vector<double> & min_,
	const std::vector<double> & max_)
{
	ns2__JointRange *_p = soap_new_ns2__JointRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__JointRange::min_ = min_;
		_p->ns2__JointRange::max_ = max_;
	}
	return _p;
}

inline int soap_write_ns2__JointRange(struct soap *soap, ns2__JointRange const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:JointRange", p->soap_type() == SOAP_TYPE_ns2__JointRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__JointRange(struct soap *soap, const char *URL, ns2__JointRange const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:JointRange", p->soap_type() == SOAP_TYPE_ns2__JointRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__JointRange(struct soap *soap, const char *URL, ns2__JointRange const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:JointRange", p->soap_type() == SOAP_TYPE_ns2__JointRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__JointRange * SOAP_FMAC4 soap_get_ns2__JointRange(struct soap*, ns2__JointRange *, const char*, const char*);

inline int soap_read_ns2__JointRange(struct soap *soap, ns2__JointRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__JointRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__JointRange(struct soap *soap, const char *URL, ns2__JointRange *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__JointRange(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__JointRange(struct soap *soap, ns2__JointRange *p)
{
	if (soap_read_ns2__JointRange(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__Records_DEFINED
#define SOAP_TYPE_ns2__Records_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Records(struct soap*, const char*, int, const ns2__Records *, const char*);
SOAP_FMAC3 ns2__Records * SOAP_FMAC4 soap_in_ns2__Records(struct soap*, const char*, ns2__Records *, const char*);
SOAP_FMAC1 ns2__Records * SOAP_FMAC2 soap_instantiate_ns2__Records(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Records * soap_new_ns2__Records(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Records(soap, n, NULL, NULL, NULL);
}

inline ns2__Records * soap_new_req_ns2__Records(
	struct soap *soap)
{
	ns2__Records *_p = soap_new_ns2__Records(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__Records * soap_new_set_ns2__Records(
	struct soap *soap,
	const std::vector<std::string> & record)
{
	ns2__Records *_p = soap_new_ns2__Records(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Records::record = record;
	}
	return _p;
}

inline int soap_write_ns2__Records(struct soap *soap, ns2__Records const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Records", p->soap_type() == SOAP_TYPE_ns2__Records ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Records(struct soap *soap, const char *URL, ns2__Records const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Records", p->soap_type() == SOAP_TYPE_ns2__Records ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Records(struct soap *soap, const char *URL, ns2__Records const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Records", p->soap_type() == SOAP_TYPE_ns2__Records ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Records * SOAP_FMAC4 soap_get_ns2__Records(struct soap*, ns2__Records *, const char*, const char*);

inline int soap_read_ns2__Records(struct soap *soap, ns2__Records *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__Records(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Records(struct soap *soap, const char *URL, ns2__Records *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__Records(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__Records(struct soap *soap, ns2__Records *p)
{
	if (soap_read_ns2__Records(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__Data_DEFINED
#define SOAP_TYPE_ns2__Data_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Data(struct soap*, const char*, int, const ns2__Data *, const char*);
SOAP_FMAC3 ns2__Data * SOAP_FMAC4 soap_in_ns2__Data(struct soap*, const char*, ns2__Data *, const char*);
SOAP_FMAC1 ns2__Data * SOAP_FMAC2 soap_instantiate_ns2__Data(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Data * soap_new_ns2__Data(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Data(soap, n, NULL, NULL, NULL);
}

inline ns2__Data * soap_new_req_ns2__Data(
	struct soap *soap,
	ns3__Include *ns3__Include_)
{
	ns2__Data *_p = soap_new_ns2__Data(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Data::ns3__Include_ = ns3__Include_;
	}
	return _p;
}

inline ns2__Data * soap_new_set_ns2__Data(
	struct soap *soap,
	ns3__Include *ns3__Include_,
	std::string *ns4__contentType)
{
	ns2__Data *_p = soap_new_ns2__Data(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Data::ns3__Include_ = ns3__Include_;
		_p->ns2__Data::ns4__contentType = ns4__contentType;
	}
	return _p;
}

inline int soap_write_ns2__Data(struct soap *soap, ns2__Data const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Data", p->soap_type() == SOAP_TYPE_ns2__Data ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Data(struct soap *soap, const char *URL, ns2__Data const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Data", p->soap_type() == SOAP_TYPE_ns2__Data ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Data(struct soap *soap, const char *URL, ns2__Data const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Data", p->soap_type() == SOAP_TYPE_ns2__Data ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Data * SOAP_FMAC4 soap_get_ns2__Data(struct soap*, ns2__Data *, const char*, const char*);

inline int soap_read_ns2__Data(struct soap *soap, ns2__Data *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__Data(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Data(struct soap *soap, const char *URL, ns2__Data *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__Data(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__Data(struct soap *soap, ns2__Data *p)
{
	if (soap_read_ns2__Data(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__VALApplications_DEFINED
#define SOAP_TYPE_ns2__VALApplications_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VALApplications(struct soap*, const char*, int, const ns2__VALApplications *, const char*);
SOAP_FMAC3 ns2__VALApplications * SOAP_FMAC4 soap_in_ns2__VALApplications(struct soap*, const char*, ns2__VALApplications *, const char*);
SOAP_FMAC1 ns2__VALApplications * SOAP_FMAC2 soap_instantiate_ns2__VALApplications(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VALApplications * soap_new_ns2__VALApplications(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__VALApplications(soap, n, NULL, NULL, NULL);
}

inline ns2__VALApplications * soap_new_req_ns2__VALApplications(
	struct soap *soap)
{
	ns2__VALApplications *_p = soap_new_ns2__VALApplications(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__VALApplications * soap_new_set_ns2__VALApplications(
	struct soap *soap,
	const std::vector<ns2__VALApplication *> & application)
{
	ns2__VALApplications *_p = soap_new_ns2__VALApplications(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__VALApplications::application = application;
	}
	return _p;
}

inline int soap_write_ns2__VALApplications(struct soap *soap, ns2__VALApplications const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VALApplications", p->soap_type() == SOAP_TYPE_ns2__VALApplications ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__VALApplications(struct soap *soap, const char *URL, ns2__VALApplications const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VALApplications", p->soap_type() == SOAP_TYPE_ns2__VALApplications ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__VALApplications(struct soap *soap, const char *URL, ns2__VALApplications const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VALApplications", p->soap_type() == SOAP_TYPE_ns2__VALApplications ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__VALApplications * SOAP_FMAC4 soap_get_ns2__VALApplications(struct soap*, ns2__VALApplications *, const char*, const char*);

inline int soap_read_ns2__VALApplications(struct soap *soap, ns2__VALApplications *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__VALApplications(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__VALApplications(struct soap *soap, const char *URL, ns2__VALApplications *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__VALApplications(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__VALApplications(struct soap *soap, ns2__VALApplications *p)
{
	if (soap_read_ns2__VALApplications(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__VALApplication_DEFINED
#define SOAP_TYPE_ns2__VALApplication_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__VALApplication(struct soap*, const char*, int, const ns2__VALApplication *, const char*);
SOAP_FMAC3 ns2__VALApplication * SOAP_FMAC4 soap_in_ns2__VALApplication(struct soap*, const char*, ns2__VALApplication *, const char*);
SOAP_FMAC1 ns2__VALApplication * SOAP_FMAC2 soap_instantiate_ns2__VALApplication(struct soap*, int, const char*, const char*, size_t*);

inline ns2__VALApplication * soap_new_ns2__VALApplication(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__VALApplication(soap, n, NULL, NULL, NULL);
}

inline ns2__VALApplication * soap_new_req_ns2__VALApplication(
	struct soap *soap,
	bool loaded)
{
	ns2__VALApplication *_p = soap_new_ns2__VALApplication(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__VALApplication::loaded = loaded;
	}
	return _p;
}

inline ns2__VALApplication * soap_new_set_ns2__VALApplication(
	struct soap *soap,
	std::string *name,
	bool loaded)
{
	ns2__VALApplication *_p = soap_new_ns2__VALApplication(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__VALApplication::name = name;
		_p->ns2__VALApplication::loaded = loaded;
	}
	return _p;
}

inline int soap_write_ns2__VALApplication(struct soap *soap, ns2__VALApplication const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VALApplication", p->soap_type() == SOAP_TYPE_ns2__VALApplication ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__VALApplication(struct soap *soap, const char *URL, ns2__VALApplication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VALApplication", p->soap_type() == SOAP_TYPE_ns2__VALApplication ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__VALApplication(struct soap *soap, const char *URL, ns2__VALApplication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:VALApplication", p->soap_type() == SOAP_TYPE_ns2__VALApplication ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__VALApplication * SOAP_FMAC4 soap_get_ns2__VALApplication(struct soap*, ns2__VALApplication *, const char*, const char*);

inline int soap_read_ns2__VALApplication(struct soap *soap, ns2__VALApplication *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__VALApplication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__VALApplication(struct soap *soap, const char *URL, ns2__VALApplication *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__VALApplication(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__VALApplication(struct soap *soap, ns2__VALApplication *p)
{
	if (soap_read_ns2__VALApplication(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__Include_DEFINED
#define SOAP_TYPE_ns3__Include_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__Include(struct soap*, const char*, int, const ns3__Include *, const char*);
SOAP_FMAC3 ns3__Include * SOAP_FMAC4 soap_in_ns3__Include(struct soap*, const char*, ns3__Include *, const char*);
SOAP_FMAC1 ns3__Include * SOAP_FMAC2 soap_instantiate_ns3__Include(struct soap*, int, const char*, const char*, size_t*);

inline ns3__Include * soap_new_ns3__Include(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__Include(soap, n, NULL, NULL, NULL);
}

inline ns3__Include * soap_new_req_ns3__Include(
	struct soap *soap,
	const std::string& href)
{
	ns3__Include *_p = soap_new_ns3__Include(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__Include::href = href;
	}
	return _p;
}

inline ns3__Include * soap_new_set_ns3__Include(
	struct soap *soap,
	const std::vector<char *> & __any,
	const std::string& href,
	char *__anyAttribute)
{
	ns3__Include *_p = soap_new_ns3__Include(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__Include::__any = __any;
		_p->ns3__Include::href = href;
		_p->ns3__Include::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write_ns3__Include(struct soap *soap, ns3__Include const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Include", p->soap_type() == SOAP_TYPE_ns3__Include ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__Include(struct soap *soap, const char *URL, ns3__Include const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Include", p->soap_type() == SOAP_TYPE_ns3__Include ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns3__Include(struct soap *soap, const char *URL, ns3__Include const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Include", p->soap_type() == SOAP_TYPE_ns3__Include ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns3__Include * SOAP_FMAC4 soap_get_ns3__Include(struct soap*, ns3__Include *, const char*, const char*);

inline int soap_read_ns3__Include(struct soap *soap, ns3__Include *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__Include(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__Include(struct soap *soap, const char *URL, ns3__Include *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__Include(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__Include(struct soap *soap, ns3__Include *p)
{
	if (soap_read_ns3__Include(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__getProjectResponse_DEFINED
#define SOAP_TYPE__ns7__getProjectResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__getProjectResponse(struct soap*, const char*, int, const _ns7__getProjectResponse *, const char*);
SOAP_FMAC3 _ns7__getProjectResponse * SOAP_FMAC4 soap_in__ns7__getProjectResponse(struct soap*, const char*, _ns7__getProjectResponse *, const char*);
SOAP_FMAC1 _ns7__getProjectResponse * SOAP_FMAC2 soap_instantiate__ns7__getProjectResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__getProjectResponse * soap_new__ns7__getProjectResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__getProjectResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__getProjectResponse * soap_new_req__ns7__getProjectResponse(
	struct soap *soap,
	const xsd__base64Binary& data)
{
	_ns7__getProjectResponse *_p = soap_new__ns7__getProjectResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__getProjectResponse::data = data;
	}
	return _p;
}

inline _ns7__getProjectResponse * soap_new_set__ns7__getProjectResponse(
	struct soap *soap,
	const xsd__base64Binary& data)
{
	_ns7__getProjectResponse *_p = soap_new__ns7__getProjectResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__getProjectResponse::data = data;
	}
	return _p;
}

inline int soap_write__ns7__getProjectResponse(struct soap *soap, _ns7__getProjectResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getProjectResponse", p->soap_type() == SOAP_TYPE__ns7__getProjectResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__getProjectResponse(struct soap *soap, const char *URL, _ns7__getProjectResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getProjectResponse", p->soap_type() == SOAP_TYPE__ns7__getProjectResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__getProjectResponse(struct soap *soap, const char *URL, _ns7__getProjectResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getProjectResponse", p->soap_type() == SOAP_TYPE__ns7__getProjectResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__getProjectResponse * SOAP_FMAC4 soap_get__ns7__getProjectResponse(struct soap*, _ns7__getProjectResponse *, const char*, const char*);

inline int soap_read__ns7__getProjectResponse(struct soap *soap, _ns7__getProjectResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__getProjectResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__getProjectResponse(struct soap *soap, const char *URL, _ns7__getProjectResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__getProjectResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__getProjectResponse(struct soap *soap, _ns7__getProjectResponse *p)
{
	if (soap_read__ns7__getProjectResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__getProject_DEFINED
#define SOAP_TYPE__ns7__getProject_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__getProject(struct soap*, const char*, int, const _ns7__getProject *, const char*);
SOAP_FMAC3 _ns7__getProject * SOAP_FMAC4 soap_in__ns7__getProject(struct soap*, const char*, _ns7__getProject *, const char*);
SOAP_FMAC1 _ns7__getProject * SOAP_FMAC2 soap_instantiate__ns7__getProject(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__getProject * soap_new__ns7__getProject(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__getProject(soap, n, NULL, NULL, NULL);
}

inline _ns7__getProject * soap_new_req__ns7__getProject(
	struct soap *soap)
{
	_ns7__getProject *_p = soap_new__ns7__getProject(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns7__getProject * soap_new_set__ns7__getProject(
	struct soap *soap,
	std::string *name)
{
	_ns7__getProject *_p = soap_new__ns7__getProject(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__getProject::name = name;
	}
	return _p;
}

inline int soap_write__ns7__getProject(struct soap *soap, _ns7__getProject const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getProject", p->soap_type() == SOAP_TYPE__ns7__getProject ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__getProject(struct soap *soap, const char *URL, _ns7__getProject const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getProject", p->soap_type() == SOAP_TYPE__ns7__getProject ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__getProject(struct soap *soap, const char *URL, _ns7__getProject const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getProject", p->soap_type() == SOAP_TYPE__ns7__getProject ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__getProject * SOAP_FMAC4 soap_get__ns7__getProject(struct soap*, _ns7__getProject *, const char*, const char*);

inline int soap_read__ns7__getProject(struct soap *soap, _ns7__getProject *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__getProject(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__getProject(struct soap *soap, const char *URL, _ns7__getProject *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__getProject(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__getProject(struct soap *soap, _ns7__getProject *p)
{
	if (soap_read__ns7__getProject(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__SoapRobotDhParameters_DEFINED
#define SOAP_TYPE__ns7__SoapRobotDhParameters_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__SoapRobotDhParameters(struct soap*, const char*, int, const _ns7__SoapRobotDhParameters *, const char*);
SOAP_FMAC3 _ns7__SoapRobotDhParameters * SOAP_FMAC4 soap_in__ns7__SoapRobotDhParameters(struct soap*, const char*, _ns7__SoapRobotDhParameters *, const char*);
SOAP_FMAC1 _ns7__SoapRobotDhParameters * SOAP_FMAC2 soap_instantiate__ns7__SoapRobotDhParameters(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__SoapRobotDhParameters * soap_new__ns7__SoapRobotDhParameters(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__SoapRobotDhParameters(soap, n, NULL, NULL, NULL);
}

inline _ns7__SoapRobotDhParameters * soap_new_req__ns7__SoapRobotDhParameters(
	struct soap *soap,
	ns7__SoapDhParametersArray *dhParametersArray,
	double lastDParam)
{
	_ns7__SoapRobotDhParameters *_p = soap_new__ns7__SoapRobotDhParameters(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__SoapRobotDhParameters::dhParametersArray = dhParametersArray;
		_p->_ns7__SoapRobotDhParameters::lastDParam = lastDParam;
	}
	return _p;
}

inline _ns7__SoapRobotDhParameters * soap_new_set__ns7__SoapRobotDhParameters(
	struct soap *soap,
	ns7__SoapDhParametersArray *dhParametersArray,
	double lastDParam)
{
	_ns7__SoapRobotDhParameters *_p = soap_new__ns7__SoapRobotDhParameters(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__SoapRobotDhParameters::dhParametersArray = dhParametersArray;
		_p->_ns7__SoapRobotDhParameters::lastDParam = lastDParam;
	}
	return _p;
}

inline int soap_write__ns7__SoapRobotDhParameters(struct soap *soap, _ns7__SoapRobotDhParameters const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapRobotDhParameters", p->soap_type() == SOAP_TYPE__ns7__SoapRobotDhParameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__SoapRobotDhParameters(struct soap *soap, const char *URL, _ns7__SoapRobotDhParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapRobotDhParameters", p->soap_type() == SOAP_TYPE__ns7__SoapRobotDhParameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__SoapRobotDhParameters(struct soap *soap, const char *URL, _ns7__SoapRobotDhParameters const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapRobotDhParameters", p->soap_type() == SOAP_TYPE__ns7__SoapRobotDhParameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__SoapRobotDhParameters * SOAP_FMAC4 soap_get__ns7__SoapRobotDhParameters(struct soap*, _ns7__SoapRobotDhParameters *, const char*, const char*);

inline int soap_read__ns7__SoapRobotDhParameters(struct soap *soap, _ns7__SoapRobotDhParameters *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__SoapRobotDhParameters(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__SoapRobotDhParameters(struct soap *soap, const char *URL, _ns7__SoapRobotDhParameters *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__SoapRobotDhParameters(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__SoapRobotDhParameters(struct soap *soap, _ns7__SoapRobotDhParameters *p)
{
	if (soap_read__ns7__SoapRobotDhParameters(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__getRobotDhParameters_DEFINED
#define SOAP_TYPE__ns7__getRobotDhParameters_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__getRobotDhParameters(struct soap*, const char*, int, const _ns7__getRobotDhParameters *, const char*);
SOAP_FMAC3 _ns7__getRobotDhParameters * SOAP_FMAC4 soap_in__ns7__getRobotDhParameters(struct soap*, const char*, _ns7__getRobotDhParameters *, const char*);
SOAP_FMAC1 _ns7__getRobotDhParameters * SOAP_FMAC2 soap_instantiate__ns7__getRobotDhParameters(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__getRobotDhParameters * soap_new__ns7__getRobotDhParameters(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__getRobotDhParameters(soap, n, NULL, NULL, NULL);
}

inline _ns7__getRobotDhParameters * soap_new_req__ns7__getRobotDhParameters(
	struct soap *soap,
	int robot)
{
	_ns7__getRobotDhParameters *_p = soap_new__ns7__getRobotDhParameters(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__getRobotDhParameters::robot = robot;
	}
	return _p;
}

inline _ns7__getRobotDhParameters * soap_new_set__ns7__getRobotDhParameters(
	struct soap *soap,
	int robot)
{
	_ns7__getRobotDhParameters *_p = soap_new__ns7__getRobotDhParameters(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__getRobotDhParameters::robot = robot;
	}
	return _p;
}

inline int soap_write__ns7__getRobotDhParameters(struct soap *soap, _ns7__getRobotDhParameters const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getRobotDhParameters", p->soap_type() == SOAP_TYPE__ns7__getRobotDhParameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__getRobotDhParameters(struct soap *soap, const char *URL, _ns7__getRobotDhParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getRobotDhParameters", p->soap_type() == SOAP_TYPE__ns7__getRobotDhParameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__getRobotDhParameters(struct soap *soap, const char *URL, _ns7__getRobotDhParameters const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getRobotDhParameters", p->soap_type() == SOAP_TYPE__ns7__getRobotDhParameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__getRobotDhParameters * SOAP_FMAC4 soap_get__ns7__getRobotDhParameters(struct soap*, _ns7__getRobotDhParameters *, const char*, const char*);

inline int soap_read__ns7__getRobotDhParameters(struct soap *soap, _ns7__getRobotDhParameters *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__getRobotDhParameters(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__getRobotDhParameters(struct soap *soap, const char *URL, _ns7__getRobotDhParameters *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__getRobotDhParameters(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__getRobotDhParameters(struct soap *soap, _ns7__getRobotDhParameters *p)
{
	if (soap_read__ns7__getRobotDhParameters(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__getAllPhysicalIosResponse_DEFINED
#define SOAP_TYPE__ns7__getAllPhysicalIosResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__getAllPhysicalIosResponse(struct soap*, const char*, int, const _ns7__getAllPhysicalIosResponse *, const char*);
SOAP_FMAC3 _ns7__getAllPhysicalIosResponse * SOAP_FMAC4 soap_in__ns7__getAllPhysicalIosResponse(struct soap*, const char*, _ns7__getAllPhysicalIosResponse *, const char*);
SOAP_FMAC1 _ns7__getAllPhysicalIosResponse * SOAP_FMAC2 soap_instantiate__ns7__getAllPhysicalIosResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__getAllPhysicalIosResponse * soap_new__ns7__getAllPhysicalIosResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__getAllPhysicalIosResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__getAllPhysicalIosResponse * soap_new_req__ns7__getAllPhysicalIosResponse(
	struct soap *soap,
	ns7__MimeData *data)
{
	_ns7__getAllPhysicalIosResponse *_p = soap_new__ns7__getAllPhysicalIosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__getAllPhysicalIosResponse::data = data;
	}
	return _p;
}

inline _ns7__getAllPhysicalIosResponse * soap_new_set__ns7__getAllPhysicalIosResponse(
	struct soap *soap,
	ns7__MimeData *data)
{
	_ns7__getAllPhysicalIosResponse *_p = soap_new__ns7__getAllPhysicalIosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__getAllPhysicalIosResponse::data = data;
	}
	return _p;
}

inline int soap_write__ns7__getAllPhysicalIosResponse(struct soap *soap, _ns7__getAllPhysicalIosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getAllPhysicalIosResponse", p->soap_type() == SOAP_TYPE__ns7__getAllPhysicalIosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__getAllPhysicalIosResponse(struct soap *soap, const char *URL, _ns7__getAllPhysicalIosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getAllPhysicalIosResponse", p->soap_type() == SOAP_TYPE__ns7__getAllPhysicalIosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__getAllPhysicalIosResponse(struct soap *soap, const char *URL, _ns7__getAllPhysicalIosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getAllPhysicalIosResponse", p->soap_type() == SOAP_TYPE__ns7__getAllPhysicalIosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__getAllPhysicalIosResponse * SOAP_FMAC4 soap_get__ns7__getAllPhysicalIosResponse(struct soap*, _ns7__getAllPhysicalIosResponse *, const char*, const char*);

inline int soap_read__ns7__getAllPhysicalIosResponse(struct soap *soap, _ns7__getAllPhysicalIosResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__getAllPhysicalIosResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__getAllPhysicalIosResponse(struct soap *soap, const char *URL, _ns7__getAllPhysicalIosResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__getAllPhysicalIosResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__getAllPhysicalIosResponse(struct soap *soap, _ns7__getAllPhysicalIosResponse *p)
{
	if (soap_read__ns7__getAllPhysicalIosResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__getAllPhysicalIos_DEFINED
#define SOAP_TYPE__ns7__getAllPhysicalIos_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__getAllPhysicalIos(struct soap*, const char*, int, const _ns7__getAllPhysicalIos *, const char*);
SOAP_FMAC3 _ns7__getAllPhysicalIos * SOAP_FMAC4 soap_in__ns7__getAllPhysicalIos(struct soap*, const char*, _ns7__getAllPhysicalIos *, const char*);
SOAP_FMAC1 _ns7__getAllPhysicalIos * SOAP_FMAC2 soap_instantiate__ns7__getAllPhysicalIos(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__getAllPhysicalIos * soap_new__ns7__getAllPhysicalIos(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__getAllPhysicalIos(soap, n, NULL, NULL, NULL);
}

inline _ns7__getAllPhysicalIos * soap_new_req__ns7__getAllPhysicalIos(
	struct soap *soap)
{
	_ns7__getAllPhysicalIos *_p = soap_new__ns7__getAllPhysicalIos(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns7__getAllPhysicalIos * soap_new_set__ns7__getAllPhysicalIos(
	struct soap *soap)
{
	_ns7__getAllPhysicalIos *_p = soap_new__ns7__getAllPhysicalIos(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns7__getAllPhysicalIos(struct soap *soap, _ns7__getAllPhysicalIos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getAllPhysicalIos", p->soap_type() == SOAP_TYPE__ns7__getAllPhysicalIos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__getAllPhysicalIos(struct soap *soap, const char *URL, _ns7__getAllPhysicalIos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getAllPhysicalIos", p->soap_type() == SOAP_TYPE__ns7__getAllPhysicalIos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__getAllPhysicalIos(struct soap *soap, const char *URL, _ns7__getAllPhysicalIos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getAllPhysicalIos", p->soap_type() == SOAP_TYPE__ns7__getAllPhysicalIos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__getAllPhysicalIos * SOAP_FMAC4 soap_get__ns7__getAllPhysicalIos(struct soap*, _ns7__getAllPhysicalIos *, const char*, const char*);

inline int soap_read__ns7__getAllPhysicalIos(struct soap *soap, _ns7__getAllPhysicalIos *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__getAllPhysicalIos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__getAllPhysicalIos(struct soap *soap, const char *URL, _ns7__getAllPhysicalIos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__getAllPhysicalIos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__getAllPhysicalIos(struct soap *soap, _ns7__getAllPhysicalIos *p)
{
	if (soap_read__ns7__getAllPhysicalIos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__unlockAllIos_DEFINED
#define SOAP_TYPE__ns7__unlockAllIos_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__unlockAllIos(struct soap*, const char*, int, const _ns7__unlockAllIos *, const char*);
SOAP_FMAC3 _ns7__unlockAllIos * SOAP_FMAC4 soap_in__ns7__unlockAllIos(struct soap*, const char*, _ns7__unlockAllIos *, const char*);
SOAP_FMAC1 _ns7__unlockAllIos * SOAP_FMAC2 soap_instantiate__ns7__unlockAllIos(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__unlockAllIos * soap_new__ns7__unlockAllIos(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__unlockAllIos(soap, n, NULL, NULL, NULL);
}

inline _ns7__unlockAllIos * soap_new_req__ns7__unlockAllIos(
	struct soap *soap)
{
	_ns7__unlockAllIos *_p = soap_new__ns7__unlockAllIos(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns7__unlockAllIos * soap_new_set__ns7__unlockAllIos(
	struct soap *soap)
{
	_ns7__unlockAllIos *_p = soap_new__ns7__unlockAllIos(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns7__unlockAllIos(struct soap *soap, _ns7__unlockAllIos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:unlockAllIos", p->soap_type() == SOAP_TYPE__ns7__unlockAllIos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__unlockAllIos(struct soap *soap, const char *URL, _ns7__unlockAllIos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:unlockAllIos", p->soap_type() == SOAP_TYPE__ns7__unlockAllIos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__unlockAllIos(struct soap *soap, const char *URL, _ns7__unlockAllIos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:unlockAllIos", p->soap_type() == SOAP_TYPE__ns7__unlockAllIos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__unlockAllIos * SOAP_FMAC4 soap_get__ns7__unlockAllIos(struct soap*, _ns7__unlockAllIos *, const char*, const char*);

inline int soap_read__ns7__unlockAllIos(struct soap *soap, _ns7__unlockAllIos *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__unlockAllIos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__unlockAllIos(struct soap *soap, const char *URL, _ns7__unlockAllIos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__unlockAllIos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__unlockAllIos(struct soap *soap, _ns7__unlockAllIos *p)
{
	if (soap_read__ns7__unlockAllIos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__SoapAllPhysicalIoResponse_DEFINED
#define SOAP_TYPE__ns7__SoapAllPhysicalIoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__SoapAllPhysicalIoResponse(struct soap*, const char*, int, const _ns7__SoapAllPhysicalIoResponse *, const char*);
SOAP_FMAC3 _ns7__SoapAllPhysicalIoResponse * SOAP_FMAC4 soap_in__ns7__SoapAllPhysicalIoResponse(struct soap*, const char*, _ns7__SoapAllPhysicalIoResponse *, const char*);
SOAP_FMAC1 _ns7__SoapAllPhysicalIoResponse * SOAP_FMAC2 soap_instantiate__ns7__SoapAllPhysicalIoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__SoapAllPhysicalIoResponse * soap_new__ns7__SoapAllPhysicalIoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__SoapAllPhysicalIoResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__SoapAllPhysicalIoResponse * soap_new_req__ns7__SoapAllPhysicalIoResponse(
	struct soap *soap,
	int nbSuccess)
{
	_ns7__SoapAllPhysicalIoResponse *_p = soap_new__ns7__SoapAllPhysicalIoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__SoapAllPhysicalIoResponse::nbSuccess = nbSuccess;
	}
	return _p;
}

inline _ns7__SoapAllPhysicalIoResponse * soap_new_set__ns7__SoapAllPhysicalIoResponse(
	struct soap *soap,
	int nbSuccess)
{
	_ns7__SoapAllPhysicalIoResponse *_p = soap_new__ns7__SoapAllPhysicalIoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__SoapAllPhysicalIoResponse::nbSuccess = nbSuccess;
	}
	return _p;
}

inline int soap_write__ns7__SoapAllPhysicalIoResponse(struct soap *soap, _ns7__SoapAllPhysicalIoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapAllPhysicalIoResponse", p->soap_type() == SOAP_TYPE__ns7__SoapAllPhysicalIoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__SoapAllPhysicalIoResponse(struct soap *soap, const char *URL, _ns7__SoapAllPhysicalIoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapAllPhysicalIoResponse", p->soap_type() == SOAP_TYPE__ns7__SoapAllPhysicalIoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__SoapAllPhysicalIoResponse(struct soap *soap, const char *URL, _ns7__SoapAllPhysicalIoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapAllPhysicalIoResponse", p->soap_type() == SOAP_TYPE__ns7__SoapAllPhysicalIoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__SoapAllPhysicalIoResponse * SOAP_FMAC4 soap_get__ns7__SoapAllPhysicalIoResponse(struct soap*, _ns7__SoapAllPhysicalIoResponse *, const char*, const char*);

inline int soap_read__ns7__SoapAllPhysicalIoResponse(struct soap *soap, _ns7__SoapAllPhysicalIoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__SoapAllPhysicalIoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__SoapAllPhysicalIoResponse(struct soap *soap, const char *URL, _ns7__SoapAllPhysicalIoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__SoapAllPhysicalIoResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__SoapAllPhysicalIoResponse(struct soap *soap, _ns7__SoapAllPhysicalIoResponse *p)
{
	if (soap_read__ns7__SoapAllPhysicalIoResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__lockAllIos_DEFINED
#define SOAP_TYPE__ns7__lockAllIos_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__lockAllIos(struct soap*, const char*, int, const _ns7__lockAllIos *, const char*);
SOAP_FMAC3 _ns7__lockAllIos * SOAP_FMAC4 soap_in__ns7__lockAllIos(struct soap*, const char*, _ns7__lockAllIos *, const char*);
SOAP_FMAC1 _ns7__lockAllIos * SOAP_FMAC2 soap_instantiate__ns7__lockAllIos(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__lockAllIos * soap_new__ns7__lockAllIos(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__lockAllIos(soap, n, NULL, NULL, NULL);
}

inline _ns7__lockAllIos * soap_new_req__ns7__lockAllIos(
	struct soap *soap)
{
	_ns7__lockAllIos *_p = soap_new__ns7__lockAllIos(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns7__lockAllIos * soap_new_set__ns7__lockAllIos(
	struct soap *soap)
{
	_ns7__lockAllIos *_p = soap_new__ns7__lockAllIos(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns7__lockAllIos(struct soap *soap, _ns7__lockAllIos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:lockAllIos", p->soap_type() == SOAP_TYPE__ns7__lockAllIos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__lockAllIos(struct soap *soap, const char *URL, _ns7__lockAllIos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:lockAllIos", p->soap_type() == SOAP_TYPE__ns7__lockAllIos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__lockAllIos(struct soap *soap, const char *URL, _ns7__lockAllIos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:lockAllIos", p->soap_type() == SOAP_TYPE__ns7__lockAllIos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__lockAllIos * SOAP_FMAC4 soap_get__ns7__lockAllIos(struct soap*, _ns7__lockAllIos *, const char*, const char*);

inline int soap_read__ns7__lockAllIos(struct soap *soap, _ns7__lockAllIos *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__lockAllIos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__lockAllIos(struct soap *soap, const char *URL, _ns7__lockAllIos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__lockAllIos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__lockAllIos(struct soap *soap, _ns7__lockAllIos *p)
{
	if (soap_read__ns7__lockAllIos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__unlockIosResponse_DEFINED
#define SOAP_TYPE__ns7__unlockIosResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__unlockIosResponse(struct soap*, const char*, int, const _ns7__unlockIosResponse *, const char*);
SOAP_FMAC3 _ns7__unlockIosResponse * SOAP_FMAC4 soap_in__ns7__unlockIosResponse(struct soap*, const char*, _ns7__unlockIosResponse *, const char*);
SOAP_FMAC1 _ns7__unlockIosResponse * SOAP_FMAC2 soap_instantiate__ns7__unlockIosResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__unlockIosResponse * soap_new__ns7__unlockIosResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__unlockIosResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__unlockIosResponse * soap_new_req__ns7__unlockIosResponse(
	struct soap *soap,
	ns7__SoapPhysicalIoUnlockResponses *out)
{
	_ns7__unlockIosResponse *_p = soap_new__ns7__unlockIosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__unlockIosResponse::out = out;
	}
	return _p;
}

inline _ns7__unlockIosResponse * soap_new_set__ns7__unlockIosResponse(
	struct soap *soap,
	ns7__SoapPhysicalIoUnlockResponses *out)
{
	_ns7__unlockIosResponse *_p = soap_new__ns7__unlockIosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__unlockIosResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns7__unlockIosResponse(struct soap *soap, _ns7__unlockIosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:unlockIosResponse", p->soap_type() == SOAP_TYPE__ns7__unlockIosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__unlockIosResponse(struct soap *soap, const char *URL, _ns7__unlockIosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:unlockIosResponse", p->soap_type() == SOAP_TYPE__ns7__unlockIosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__unlockIosResponse(struct soap *soap, const char *URL, _ns7__unlockIosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:unlockIosResponse", p->soap_type() == SOAP_TYPE__ns7__unlockIosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__unlockIosResponse * SOAP_FMAC4 soap_get__ns7__unlockIosResponse(struct soap*, _ns7__unlockIosResponse *, const char*, const char*);

inline int soap_read__ns7__unlockIosResponse(struct soap *soap, _ns7__unlockIosResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__unlockIosResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__unlockIosResponse(struct soap *soap, const char *URL, _ns7__unlockIosResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__unlockIosResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__unlockIosResponse(struct soap *soap, _ns7__unlockIosResponse *p)
{
	if (soap_read__ns7__unlockIosResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__unlockIos_DEFINED
#define SOAP_TYPE__ns7__unlockIos_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__unlockIos(struct soap*, const char*, int, const _ns7__unlockIos *, const char*);
SOAP_FMAC3 _ns7__unlockIos * SOAP_FMAC4 soap_in__ns7__unlockIos(struct soap*, const char*, _ns7__unlockIos *, const char*);
SOAP_FMAC1 _ns7__unlockIos * SOAP_FMAC2 soap_instantiate__ns7__unlockIos(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__unlockIos * soap_new__ns7__unlockIos(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__unlockIos(soap, n, NULL, NULL, NULL);
}

inline _ns7__unlockIos * soap_new_req__ns7__unlockIos(
	struct soap *soap,
	ns7__SoapPhysicalIoLinks *ios,
	bool x_getDescription)
{
	_ns7__unlockIos *_p = soap_new__ns7__unlockIos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__unlockIos::ios = ios;
		_p->_ns7__unlockIos::x_getDescription = x_getDescription;
	}
	return _p;
}

inline _ns7__unlockIos * soap_new_set__ns7__unlockIos(
	struct soap *soap,
	ns7__SoapPhysicalIoLinks *ios,
	bool x_getDescription)
{
	_ns7__unlockIos *_p = soap_new__ns7__unlockIos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__unlockIos::ios = ios;
		_p->_ns7__unlockIos::x_getDescription = x_getDescription;
	}
	return _p;
}

inline int soap_write__ns7__unlockIos(struct soap *soap, _ns7__unlockIos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:unlockIos", p->soap_type() == SOAP_TYPE__ns7__unlockIos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__unlockIos(struct soap *soap, const char *URL, _ns7__unlockIos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:unlockIos", p->soap_type() == SOAP_TYPE__ns7__unlockIos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__unlockIos(struct soap *soap, const char *URL, _ns7__unlockIos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:unlockIos", p->soap_type() == SOAP_TYPE__ns7__unlockIos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__unlockIos * SOAP_FMAC4 soap_get__ns7__unlockIos(struct soap*, _ns7__unlockIos *, const char*, const char*);

inline int soap_read__ns7__unlockIos(struct soap *soap, _ns7__unlockIos *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__unlockIos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__unlockIos(struct soap *soap, const char *URL, _ns7__unlockIos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__unlockIos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__unlockIos(struct soap *soap, _ns7__unlockIos *p)
{
	if (soap_read__ns7__unlockIos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__lockIosResponse_DEFINED
#define SOAP_TYPE__ns7__lockIosResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__lockIosResponse(struct soap*, const char*, int, const _ns7__lockIosResponse *, const char*);
SOAP_FMAC3 _ns7__lockIosResponse * SOAP_FMAC4 soap_in__ns7__lockIosResponse(struct soap*, const char*, _ns7__lockIosResponse *, const char*);
SOAP_FMAC1 _ns7__lockIosResponse * SOAP_FMAC2 soap_instantiate__ns7__lockIosResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__lockIosResponse * soap_new__ns7__lockIosResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__lockIosResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__lockIosResponse * soap_new_req__ns7__lockIosResponse(
	struct soap *soap,
	ns7__SoapPhysicalIoResponses *out)
{
	_ns7__lockIosResponse *_p = soap_new__ns7__lockIosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__lockIosResponse::out = out;
	}
	return _p;
}

inline _ns7__lockIosResponse * soap_new_set__ns7__lockIosResponse(
	struct soap *soap,
	ns7__SoapPhysicalIoResponses *out)
{
	_ns7__lockIosResponse *_p = soap_new__ns7__lockIosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__lockIosResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns7__lockIosResponse(struct soap *soap, _ns7__lockIosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:lockIosResponse", p->soap_type() == SOAP_TYPE__ns7__lockIosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__lockIosResponse(struct soap *soap, const char *URL, _ns7__lockIosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:lockIosResponse", p->soap_type() == SOAP_TYPE__ns7__lockIosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__lockIosResponse(struct soap *soap, const char *URL, _ns7__lockIosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:lockIosResponse", p->soap_type() == SOAP_TYPE__ns7__lockIosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__lockIosResponse * SOAP_FMAC4 soap_get__ns7__lockIosResponse(struct soap*, _ns7__lockIosResponse *, const char*, const char*);

inline int soap_read__ns7__lockIosResponse(struct soap *soap, _ns7__lockIosResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__lockIosResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__lockIosResponse(struct soap *soap, const char *URL, _ns7__lockIosResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__lockIosResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__lockIosResponse(struct soap *soap, _ns7__lockIosResponse *p)
{
	if (soap_read__ns7__lockIosResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__lockIos_DEFINED
#define SOAP_TYPE__ns7__lockIos_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__lockIos(struct soap*, const char*, int, const _ns7__lockIos *, const char*);
SOAP_FMAC3 _ns7__lockIos * SOAP_FMAC4 soap_in__ns7__lockIos(struct soap*, const char*, _ns7__lockIos *, const char*);
SOAP_FMAC1 _ns7__lockIos * SOAP_FMAC2 soap_instantiate__ns7__lockIos(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__lockIos * soap_new__ns7__lockIos(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__lockIos(soap, n, NULL, NULL, NULL);
}

inline _ns7__lockIos * soap_new_req__ns7__lockIos(
	struct soap *soap,
	ns7__SoapPhysicalIoLinks *ios,
	ns7__SoapPhysicalIoValues *values)
{
	_ns7__lockIos *_p = soap_new__ns7__lockIos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__lockIos::ios = ios;
		_p->_ns7__lockIos::values = values;
	}
	return _p;
}

inline _ns7__lockIos * soap_new_set__ns7__lockIos(
	struct soap *soap,
	ns7__SoapPhysicalIoLinks *ios,
	ns7__SoapPhysicalIoValues *values)
{
	_ns7__lockIos *_p = soap_new__ns7__lockIos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__lockIos::ios = ios;
		_p->_ns7__lockIos::values = values;
	}
	return _p;
}

inline int soap_write__ns7__lockIos(struct soap *soap, _ns7__lockIos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:lockIos", p->soap_type() == SOAP_TYPE__ns7__lockIos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__lockIos(struct soap *soap, const char *URL, _ns7__lockIos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:lockIos", p->soap_type() == SOAP_TYPE__ns7__lockIos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__lockIos(struct soap *soap, const char *URL, _ns7__lockIos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:lockIos", p->soap_type() == SOAP_TYPE__ns7__lockIos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__lockIos * SOAP_FMAC4 soap_get__ns7__lockIos(struct soap*, _ns7__lockIos *, const char*, const char*);

inline int soap_read__ns7__lockIos(struct soap *soap, _ns7__lockIos *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__lockIos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__lockIos(struct soap *soap, const char *URL, _ns7__lockIos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__lockIos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__lockIos(struct soap *soap, _ns7__lockIos *p)
{
	if (soap_read__ns7__lockIos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__writeIosResponse_DEFINED
#define SOAP_TYPE__ns7__writeIosResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__writeIosResponse(struct soap*, const char*, int, const _ns7__writeIosResponse *, const char*);
SOAP_FMAC3 _ns7__writeIosResponse * SOAP_FMAC4 soap_in__ns7__writeIosResponse(struct soap*, const char*, _ns7__writeIosResponse *, const char*);
SOAP_FMAC1 _ns7__writeIosResponse * SOAP_FMAC2 soap_instantiate__ns7__writeIosResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__writeIosResponse * soap_new__ns7__writeIosResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__writeIosResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__writeIosResponse * soap_new_req__ns7__writeIosResponse(
	struct soap *soap,
	ns7__SoapPhysicalIoResponses *out)
{
	_ns7__writeIosResponse *_p = soap_new__ns7__writeIosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__writeIosResponse::out = out;
	}
	return _p;
}

inline _ns7__writeIosResponse * soap_new_set__ns7__writeIosResponse(
	struct soap *soap,
	ns7__SoapPhysicalIoResponses *out)
{
	_ns7__writeIosResponse *_p = soap_new__ns7__writeIosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__writeIosResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns7__writeIosResponse(struct soap *soap, _ns7__writeIosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:writeIosResponse", p->soap_type() == SOAP_TYPE__ns7__writeIosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__writeIosResponse(struct soap *soap, const char *URL, _ns7__writeIosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:writeIosResponse", p->soap_type() == SOAP_TYPE__ns7__writeIosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__writeIosResponse(struct soap *soap, const char *URL, _ns7__writeIosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:writeIosResponse", p->soap_type() == SOAP_TYPE__ns7__writeIosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__writeIosResponse * SOAP_FMAC4 soap_get__ns7__writeIosResponse(struct soap*, _ns7__writeIosResponse *, const char*, const char*);

inline int soap_read__ns7__writeIosResponse(struct soap *soap, _ns7__writeIosResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__writeIosResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__writeIosResponse(struct soap *soap, const char *URL, _ns7__writeIosResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__writeIosResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__writeIosResponse(struct soap *soap, _ns7__writeIosResponse *p)
{
	if (soap_read__ns7__writeIosResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__writeIos_DEFINED
#define SOAP_TYPE__ns7__writeIos_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__writeIos(struct soap*, const char*, int, const _ns7__writeIos *, const char*);
SOAP_FMAC3 _ns7__writeIos * SOAP_FMAC4 soap_in__ns7__writeIos(struct soap*, const char*, _ns7__writeIos *, const char*);
SOAP_FMAC1 _ns7__writeIos * SOAP_FMAC2 soap_instantiate__ns7__writeIos(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__writeIos * soap_new__ns7__writeIos(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__writeIos(soap, n, NULL, NULL, NULL);
}

inline _ns7__writeIos * soap_new_req__ns7__writeIos(
	struct soap *soap,
	ns7__SoapPhysicalIoLinks *ios,
	ns7__SoapPhysicalIoValues *values)
{
	_ns7__writeIos *_p = soap_new__ns7__writeIos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__writeIos::ios = ios;
		_p->_ns7__writeIos::values = values;
	}
	return _p;
}

inline _ns7__writeIos * soap_new_set__ns7__writeIos(
	struct soap *soap,
	ns7__SoapPhysicalIoLinks *ios,
	ns7__SoapPhysicalIoValues *values)
{
	_ns7__writeIos *_p = soap_new__ns7__writeIos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__writeIos::ios = ios;
		_p->_ns7__writeIos::values = values;
	}
	return _p;
}

inline int soap_write__ns7__writeIos(struct soap *soap, _ns7__writeIos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:writeIos", p->soap_type() == SOAP_TYPE__ns7__writeIos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__writeIos(struct soap *soap, const char *URL, _ns7__writeIos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:writeIos", p->soap_type() == SOAP_TYPE__ns7__writeIos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__writeIos(struct soap *soap, const char *URL, _ns7__writeIos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:writeIos", p->soap_type() == SOAP_TYPE__ns7__writeIos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__writeIos * SOAP_FMAC4 soap_get__ns7__writeIos(struct soap*, _ns7__writeIos *, const char*, const char*);

inline int soap_read__ns7__writeIos(struct soap *soap, _ns7__writeIos *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__writeIos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__writeIos(struct soap *soap, const char *URL, _ns7__writeIos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__writeIos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__writeIos(struct soap *soap, _ns7__writeIos *p)
{
	if (soap_read__ns7__writeIos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__readIosResponse_DEFINED
#define SOAP_TYPE__ns7__readIosResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__readIosResponse(struct soap*, const char*, int, const _ns7__readIosResponse *, const char*);
SOAP_FMAC3 _ns7__readIosResponse * SOAP_FMAC4 soap_in__ns7__readIosResponse(struct soap*, const char*, _ns7__readIosResponse *, const char*);
SOAP_FMAC1 _ns7__readIosResponse * SOAP_FMAC2 soap_instantiate__ns7__readIosResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__readIosResponse * soap_new__ns7__readIosResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__readIosResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__readIosResponse * soap_new_req__ns7__readIosResponse(
	struct soap *soap,
	ns7__SoapPhysicalIosStates *state)
{
	_ns7__readIosResponse *_p = soap_new__ns7__readIosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__readIosResponse::state = state;
	}
	return _p;
}

inline _ns7__readIosResponse * soap_new_set__ns7__readIosResponse(
	struct soap *soap,
	ns7__SoapPhysicalIosStates *state)
{
	_ns7__readIosResponse *_p = soap_new__ns7__readIosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__readIosResponse::state = state;
	}
	return _p;
}

inline int soap_write__ns7__readIosResponse(struct soap *soap, _ns7__readIosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:readIosResponse", p->soap_type() == SOAP_TYPE__ns7__readIosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__readIosResponse(struct soap *soap, const char *URL, _ns7__readIosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:readIosResponse", p->soap_type() == SOAP_TYPE__ns7__readIosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__readIosResponse(struct soap *soap, const char *URL, _ns7__readIosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:readIosResponse", p->soap_type() == SOAP_TYPE__ns7__readIosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__readIosResponse * SOAP_FMAC4 soap_get__ns7__readIosResponse(struct soap*, _ns7__readIosResponse *, const char*, const char*);

inline int soap_read__ns7__readIosResponse(struct soap *soap, _ns7__readIosResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__readIosResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__readIosResponse(struct soap *soap, const char *URL, _ns7__readIosResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__readIosResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__readIosResponse(struct soap *soap, _ns7__readIosResponse *p)
{
	if (soap_read__ns7__readIosResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__readIos_DEFINED
#define SOAP_TYPE__ns7__readIos_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__readIos(struct soap*, const char*, int, const _ns7__readIos *, const char*);
SOAP_FMAC3 _ns7__readIos * SOAP_FMAC4 soap_in__ns7__readIos(struct soap*, const char*, _ns7__readIos *, const char*);
SOAP_FMAC1 _ns7__readIos * SOAP_FMAC2 soap_instantiate__ns7__readIos(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__readIos * soap_new__ns7__readIos(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__readIos(soap, n, NULL, NULL, NULL);
}

inline _ns7__readIos * soap_new_req__ns7__readIos(
	struct soap *soap,
	ns7__SoapPhysicalIoLinks *ios,
	bool x_getDescription)
{
	_ns7__readIos *_p = soap_new__ns7__readIos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__readIos::ios = ios;
		_p->_ns7__readIos::x_getDescription = x_getDescription;
	}
	return _p;
}

inline _ns7__readIos * soap_new_set__ns7__readIos(
	struct soap *soap,
	ns7__SoapPhysicalIoLinks *ios,
	bool x_getDescription)
{
	_ns7__readIos *_p = soap_new__ns7__readIos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__readIos::ios = ios;
		_p->_ns7__readIos::x_getDescription = x_getDescription;
	}
	return _p;
}

inline int soap_write__ns7__readIos(struct soap *soap, _ns7__readIos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:readIos", p->soap_type() == SOAP_TYPE__ns7__readIos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__readIos(struct soap *soap, const char *URL, _ns7__readIos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:readIos", p->soap_type() == SOAP_TYPE__ns7__readIos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__readIos(struct soap *soap, const char *URL, _ns7__readIos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:readIos", p->soap_type() == SOAP_TYPE__ns7__readIos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__readIos * SOAP_FMAC4 soap_get__ns7__readIos(struct soap*, _ns7__readIos *, const char*, const char*);

inline int soap_read__ns7__readIos(struct soap *soap, _ns7__readIos *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__readIos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__readIos(struct soap *soap, const char *URL, _ns7__readIos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__readIos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__readIos(struct soap *soap, _ns7__readIos *p)
{
	if (soap_read__ns7__readIos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__replaceLineResponse_DEFINED
#define SOAP_TYPE__ns7__replaceLineResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__replaceLineResponse(struct soap*, const char*, int, const _ns7__replaceLineResponse *, const char*);
SOAP_FMAC3 _ns7__replaceLineResponse * SOAP_FMAC4 soap_in__ns7__replaceLineResponse(struct soap*, const char*, _ns7__replaceLineResponse *, const char*);
SOAP_FMAC1 _ns7__replaceLineResponse * SOAP_FMAC2 soap_instantiate__ns7__replaceLineResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__replaceLineResponse * soap_new__ns7__replaceLineResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__replaceLineResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__replaceLineResponse * soap_new_req__ns7__replaceLineResponse(
	struct soap *soap,
	enum ns7__replaceLineReturnCode retCode)
{
	_ns7__replaceLineResponse *_p = soap_new__ns7__replaceLineResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__replaceLineResponse::retCode = retCode;
	}
	return _p;
}

inline _ns7__replaceLineResponse * soap_new_set__ns7__replaceLineResponse(
	struct soap *soap,
	enum ns7__replaceLineReturnCode retCode,
	std::string *strOut)
{
	_ns7__replaceLineResponse *_p = soap_new__ns7__replaceLineResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__replaceLineResponse::retCode = retCode;
		_p->_ns7__replaceLineResponse::strOut = strOut;
	}
	return _p;
}

inline int soap_write__ns7__replaceLineResponse(struct soap *soap, _ns7__replaceLineResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:replaceLineResponse", p->soap_type() == SOAP_TYPE__ns7__replaceLineResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__replaceLineResponse(struct soap *soap, const char *URL, _ns7__replaceLineResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:replaceLineResponse", p->soap_type() == SOAP_TYPE__ns7__replaceLineResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__replaceLineResponse(struct soap *soap, const char *URL, _ns7__replaceLineResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:replaceLineResponse", p->soap_type() == SOAP_TYPE__ns7__replaceLineResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__replaceLineResponse * SOAP_FMAC4 soap_get__ns7__replaceLineResponse(struct soap*, _ns7__replaceLineResponse *, const char*, const char*);

inline int soap_read__ns7__replaceLineResponse(struct soap *soap, _ns7__replaceLineResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__replaceLineResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__replaceLineResponse(struct soap *soap, const char *URL, _ns7__replaceLineResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__replaceLineResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__replaceLineResponse(struct soap *soap, _ns7__replaceLineResponse *p)
{
	if (soap_read__ns7__replaceLineResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__replaceLine_DEFINED
#define SOAP_TYPE__ns7__replaceLine_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__replaceLine(struct soap*, const char*, int, const _ns7__replaceLine *, const char*);
SOAP_FMAC3 _ns7__replaceLine * SOAP_FMAC4 soap_in__ns7__replaceLine(struct soap*, const char*, _ns7__replaceLine *, const char*);
SOAP_FMAC1 _ns7__replaceLine * SOAP_FMAC2 soap_instantiate__ns7__replaceLine(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__replaceLine * soap_new__ns7__replaceLine(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__replaceLine(soap, n, NULL, NULL, NULL);
}

inline _ns7__replaceLine * soap_new_req__ns7__replaceLine(
	struct soap *soap,
	ns7__SoapProgramLine *line)
{
	_ns7__replaceLine *_p = soap_new__ns7__replaceLine(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__replaceLine::line = line;
	}
	return _p;
}

inline _ns7__replaceLine * soap_new_set__ns7__replaceLine(
	struct soap *soap,
	ns7__SoapProgramLine *line,
	std::string *newLine)
{
	_ns7__replaceLine *_p = soap_new__ns7__replaceLine(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__replaceLine::line = line;
		_p->_ns7__replaceLine::newLine = newLine;
	}
	return _p;
}

inline int soap_write__ns7__replaceLine(struct soap *soap, _ns7__replaceLine const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:replaceLine", p->soap_type() == SOAP_TYPE__ns7__replaceLine ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__replaceLine(struct soap *soap, const char *URL, _ns7__replaceLine const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:replaceLine", p->soap_type() == SOAP_TYPE__ns7__replaceLine ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__replaceLine(struct soap *soap, const char *URL, _ns7__replaceLine const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:replaceLine", p->soap_type() == SOAP_TYPE__ns7__replaceLine ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__replaceLine * SOAP_FMAC4 soap_get__ns7__replaceLine(struct soap*, _ns7__replaceLine *, const char*, const char*);

inline int soap_read__ns7__replaceLine(struct soap *soap, _ns7__replaceLine *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__replaceLine(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__replaceLine(struct soap *soap, const char *URL, _ns7__replaceLine *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__replaceLine(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__replaceLine(struct soap *soap, _ns7__replaceLine *p)
{
	if (soap_read__ns7__replaceLine(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__setCurrentInstructionResponse_DEFINED
#define SOAP_TYPE__ns7__setCurrentInstructionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__setCurrentInstructionResponse(struct soap*, const char*, int, const _ns7__setCurrentInstructionResponse *, const char*);
SOAP_FMAC3 _ns7__setCurrentInstructionResponse * SOAP_FMAC4 soap_in__ns7__setCurrentInstructionResponse(struct soap*, const char*, _ns7__setCurrentInstructionResponse *, const char*);
SOAP_FMAC1 _ns7__setCurrentInstructionResponse * SOAP_FMAC2 soap_instantiate__ns7__setCurrentInstructionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__setCurrentInstructionResponse * soap_new__ns7__setCurrentInstructionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__setCurrentInstructionResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__setCurrentInstructionResponse * soap_new_req__ns7__setCurrentInstructionResponse(
	struct soap *soap)
{
	_ns7__setCurrentInstructionResponse *_p = soap_new__ns7__setCurrentInstructionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns7__setCurrentInstructionResponse * soap_new_set__ns7__setCurrentInstructionResponse(
	struct soap *soap)
{
	_ns7__setCurrentInstructionResponse *_p = soap_new__ns7__setCurrentInstructionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns7__setCurrentInstructionResponse(struct soap *soap, _ns7__setCurrentInstructionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:setCurrentInstructionResponse", p->soap_type() == SOAP_TYPE__ns7__setCurrentInstructionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__setCurrentInstructionResponse(struct soap *soap, const char *URL, _ns7__setCurrentInstructionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:setCurrentInstructionResponse", p->soap_type() == SOAP_TYPE__ns7__setCurrentInstructionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__setCurrentInstructionResponse(struct soap *soap, const char *URL, _ns7__setCurrentInstructionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:setCurrentInstructionResponse", p->soap_type() == SOAP_TYPE__ns7__setCurrentInstructionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__setCurrentInstructionResponse * SOAP_FMAC4 soap_get__ns7__setCurrentInstructionResponse(struct soap*, _ns7__setCurrentInstructionResponse *, const char*, const char*);

inline int soap_read__ns7__setCurrentInstructionResponse(struct soap *soap, _ns7__setCurrentInstructionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__setCurrentInstructionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__setCurrentInstructionResponse(struct soap *soap, const char *URL, _ns7__setCurrentInstructionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__setCurrentInstructionResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__setCurrentInstructionResponse(struct soap *soap, _ns7__setCurrentInstructionResponse *p)
{
	if (soap_read__ns7__setCurrentInstructionResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__setCurrentInstruction_DEFINED
#define SOAP_TYPE__ns7__setCurrentInstruction_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__setCurrentInstruction(struct soap*, const char*, int, const _ns7__setCurrentInstruction *, const char*);
SOAP_FMAC3 _ns7__setCurrentInstruction * SOAP_FMAC4 soap_in__ns7__setCurrentInstruction(struct soap*, const char*, _ns7__setCurrentInstruction *, const char*);
SOAP_FMAC1 _ns7__setCurrentInstruction * SOAP_FMAC2 soap_instantiate__ns7__setCurrentInstruction(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__setCurrentInstruction * soap_new__ns7__setCurrentInstruction(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__setCurrentInstruction(soap, n, NULL, NULL, NULL);
}

inline _ns7__setCurrentInstruction * soap_new_req__ns7__setCurrentInstruction(
	struct soap *soap,
	bool resetMotion,
	ns7__SoapProgramLine *line)
{
	_ns7__setCurrentInstruction *_p = soap_new__ns7__setCurrentInstruction(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__setCurrentInstruction::resetMotion = resetMotion;
		_p->_ns7__setCurrentInstruction::line = line;
	}
	return _p;
}

inline _ns7__setCurrentInstruction * soap_new_set__ns7__setCurrentInstruction(
	struct soap *soap,
	std::string *taskName,
	std::string *createdBy,
	bool resetMotion,
	ns7__SoapProgramLine *line)
{
	_ns7__setCurrentInstruction *_p = soap_new__ns7__setCurrentInstruction(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__setCurrentInstruction::taskName = taskName;
		_p->_ns7__setCurrentInstruction::createdBy = createdBy;
		_p->_ns7__setCurrentInstruction::resetMotion = resetMotion;
		_p->_ns7__setCurrentInstruction::line = line;
	}
	return _p;
}

inline int soap_write__ns7__setCurrentInstruction(struct soap *soap, _ns7__setCurrentInstruction const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:setCurrentInstruction", p->soap_type() == SOAP_TYPE__ns7__setCurrentInstruction ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__setCurrentInstruction(struct soap *soap, const char *URL, _ns7__setCurrentInstruction const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:setCurrentInstruction", p->soap_type() == SOAP_TYPE__ns7__setCurrentInstruction ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__setCurrentInstruction(struct soap *soap, const char *URL, _ns7__setCurrentInstruction const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:setCurrentInstruction", p->soap_type() == SOAP_TYPE__ns7__setCurrentInstruction ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__setCurrentInstruction * SOAP_FMAC4 soap_get__ns7__setCurrentInstruction(struct soap*, _ns7__setCurrentInstruction *, const char*, const char*);

inline int soap_read__ns7__setCurrentInstruction(struct soap *soap, _ns7__setCurrentInstruction *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__setCurrentInstruction(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__setCurrentInstruction(struct soap *soap, const char *URL, _ns7__setCurrentInstruction *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__setCurrentInstruction(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__setCurrentInstruction(struct soap *soap, _ns7__setCurrentInstruction *p)
{
	if (soap_read__ns7__setCurrentInstruction(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__setProjectAsModifiedResponse_DEFINED
#define SOAP_TYPE__ns7__setProjectAsModifiedResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__setProjectAsModifiedResponse(struct soap*, const char*, int, const _ns7__setProjectAsModifiedResponse *, const char*);
SOAP_FMAC3 _ns7__setProjectAsModifiedResponse * SOAP_FMAC4 soap_in__ns7__setProjectAsModifiedResponse(struct soap*, const char*, _ns7__setProjectAsModifiedResponse *, const char*);
SOAP_FMAC1 _ns7__setProjectAsModifiedResponse * SOAP_FMAC2 soap_instantiate__ns7__setProjectAsModifiedResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__setProjectAsModifiedResponse * soap_new__ns7__setProjectAsModifiedResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__setProjectAsModifiedResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__setProjectAsModifiedResponse * soap_new_req__ns7__setProjectAsModifiedResponse(
	struct soap *soap)
{
	_ns7__setProjectAsModifiedResponse *_p = soap_new__ns7__setProjectAsModifiedResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns7__setProjectAsModifiedResponse * soap_new_set__ns7__setProjectAsModifiedResponse(
	struct soap *soap)
{
	_ns7__setProjectAsModifiedResponse *_p = soap_new__ns7__setProjectAsModifiedResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns7__setProjectAsModifiedResponse(struct soap *soap, _ns7__setProjectAsModifiedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:setProjectAsModifiedResponse", p->soap_type() == SOAP_TYPE__ns7__setProjectAsModifiedResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__setProjectAsModifiedResponse(struct soap *soap, const char *URL, _ns7__setProjectAsModifiedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:setProjectAsModifiedResponse", p->soap_type() == SOAP_TYPE__ns7__setProjectAsModifiedResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__setProjectAsModifiedResponse(struct soap *soap, const char *URL, _ns7__setProjectAsModifiedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:setProjectAsModifiedResponse", p->soap_type() == SOAP_TYPE__ns7__setProjectAsModifiedResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__setProjectAsModifiedResponse * SOAP_FMAC4 soap_get__ns7__setProjectAsModifiedResponse(struct soap*, _ns7__setProjectAsModifiedResponse *, const char*, const char*);

inline int soap_read__ns7__setProjectAsModifiedResponse(struct soap *soap, _ns7__setProjectAsModifiedResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__setProjectAsModifiedResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__setProjectAsModifiedResponse(struct soap *soap, const char *URL, _ns7__setProjectAsModifiedResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__setProjectAsModifiedResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__setProjectAsModifiedResponse(struct soap *soap, _ns7__setProjectAsModifiedResponse *p)
{
	if (soap_read__ns7__setProjectAsModifiedResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__setProjectAsModified_DEFINED
#define SOAP_TYPE__ns7__setProjectAsModified_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__setProjectAsModified(struct soap*, const char*, int, const _ns7__setProjectAsModified *, const char*);
SOAP_FMAC3 _ns7__setProjectAsModified * SOAP_FMAC4 soap_in__ns7__setProjectAsModified(struct soap*, const char*, _ns7__setProjectAsModified *, const char*);
SOAP_FMAC1 _ns7__setProjectAsModified * SOAP_FMAC2 soap_instantiate__ns7__setProjectAsModified(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__setProjectAsModified * soap_new__ns7__setProjectAsModified(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__setProjectAsModified(soap, n, NULL, NULL, NULL);
}

inline _ns7__setProjectAsModified * soap_new_req__ns7__setProjectAsModified(
	struct soap *soap)
{
	_ns7__setProjectAsModified *_p = soap_new__ns7__setProjectAsModified(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns7__setProjectAsModified * soap_new_set__ns7__setProjectAsModified(
	struct soap *soap,
	std::string *prjName)
{
	_ns7__setProjectAsModified *_p = soap_new__ns7__setProjectAsModified(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__setProjectAsModified::prjName = prjName;
	}
	return _p;
}

inline int soap_write__ns7__setProjectAsModified(struct soap *soap, _ns7__setProjectAsModified const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:setProjectAsModified", p->soap_type() == SOAP_TYPE__ns7__setProjectAsModified ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__setProjectAsModified(struct soap *soap, const char *URL, _ns7__setProjectAsModified const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:setProjectAsModified", p->soap_type() == SOAP_TYPE__ns7__setProjectAsModified ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__setProjectAsModified(struct soap *soap, const char *URL, _ns7__setProjectAsModified const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:setProjectAsModified", p->soap_type() == SOAP_TYPE__ns7__setProjectAsModified ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__setProjectAsModified * SOAP_FMAC4 soap_get__ns7__setProjectAsModified(struct soap*, _ns7__setProjectAsModified *, const char*, const char*);

inline int soap_read__ns7__setProjectAsModified(struct soap *soap, _ns7__setProjectAsModified *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__setProjectAsModified(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__setProjectAsModified(struct soap *soap, const char *URL, _ns7__setProjectAsModified *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__setProjectAsModified(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__setProjectAsModified(struct soap *soap, _ns7__setProjectAsModified *p)
{
	if (soap_read__ns7__setProjectAsModified(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__execVal3Response_DEFINED
#define SOAP_TYPE__ns7__execVal3Response_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__execVal3Response(struct soap*, const char*, int, const _ns7__execVal3Response *, const char*);
SOAP_FMAC3 _ns7__execVal3Response * SOAP_FMAC4 soap_in__ns7__execVal3Response(struct soap*, const char*, _ns7__execVal3Response *, const char*);
SOAP_FMAC1 _ns7__execVal3Response * SOAP_FMAC2 soap_instantiate__ns7__execVal3Response(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__execVal3Response * soap_new__ns7__execVal3Response(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__execVal3Response(soap, n, NULL, NULL, NULL);
}

inline _ns7__execVal3Response * soap_new_req__ns7__execVal3Response(
	struct soap *soap,
	enum ns7__execVal3ReturnCode retCode)
{
	_ns7__execVal3Response *_p = soap_new__ns7__execVal3Response(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__execVal3Response::retCode = retCode;
	}
	return _p;
}

inline _ns7__execVal3Response * soap_new_set__ns7__execVal3Response(
	struct soap *soap,
	enum ns7__execVal3ReturnCode retCode,
	std::string *strOut)
{
	_ns7__execVal3Response *_p = soap_new__ns7__execVal3Response(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__execVal3Response::retCode = retCode;
		_p->_ns7__execVal3Response::strOut = strOut;
	}
	return _p;
}

inline int soap_write__ns7__execVal3Response(struct soap *soap, _ns7__execVal3Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:execVal3Response", p->soap_type() == SOAP_TYPE__ns7__execVal3Response ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__execVal3Response(struct soap *soap, const char *URL, _ns7__execVal3Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:execVal3Response", p->soap_type() == SOAP_TYPE__ns7__execVal3Response ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__execVal3Response(struct soap *soap, const char *URL, _ns7__execVal3Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:execVal3Response", p->soap_type() == SOAP_TYPE__ns7__execVal3Response ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__execVal3Response * SOAP_FMAC4 soap_get__ns7__execVal3Response(struct soap*, _ns7__execVal3Response *, const char*, const char*);

inline int soap_read__ns7__execVal3Response(struct soap *soap, _ns7__execVal3Response *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__execVal3Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__execVal3Response(struct soap *soap, const char *URL, _ns7__execVal3Response *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__execVal3Response(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__execVal3Response(struct soap *soap, _ns7__execVal3Response *p)
{
	if (soap_read__ns7__execVal3Response(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__execVal3_DEFINED
#define SOAP_TYPE__ns7__execVal3_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__execVal3(struct soap*, const char*, int, const _ns7__execVal3 *, const char*);
SOAP_FMAC3 _ns7__execVal3 * SOAP_FMAC4 soap_in__ns7__execVal3(struct soap*, const char*, _ns7__execVal3 *, const char*);
SOAP_FMAC1 _ns7__execVal3 * SOAP_FMAC2 soap_instantiate__ns7__execVal3(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__execVal3 * soap_new__ns7__execVal3(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__execVal3(soap, n, NULL, NULL, NULL);
}

inline _ns7__execVal3 * soap_new_req__ns7__execVal3(
	struct soap *soap,
	int stackFrameIndex)
{
	_ns7__execVal3 *_p = soap_new__ns7__execVal3(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__execVal3::stackFrameIndex = stackFrameIndex;
	}
	return _p;
}

inline _ns7__execVal3 * soap_new_set__ns7__execVal3(
	struct soap *soap,
	std::string *prjName,
	std::string *taskName,
	std::string *createdBy,
	int stackFrameIndex,
	std::string *cmd)
{
	_ns7__execVal3 *_p = soap_new__ns7__execVal3(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__execVal3::prjName = prjName;
		_p->_ns7__execVal3::taskName = taskName;
		_p->_ns7__execVal3::createdBy = createdBy;
		_p->_ns7__execVal3::stackFrameIndex = stackFrameIndex;
		_p->_ns7__execVal3::cmd = cmd;
	}
	return _p;
}

inline int soap_write__ns7__execVal3(struct soap *soap, _ns7__execVal3 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:execVal3", p->soap_type() == SOAP_TYPE__ns7__execVal3 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__execVal3(struct soap *soap, const char *URL, _ns7__execVal3 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:execVal3", p->soap_type() == SOAP_TYPE__ns7__execVal3 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__execVal3(struct soap *soap, const char *URL, _ns7__execVal3 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:execVal3", p->soap_type() == SOAP_TYPE__ns7__execVal3 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__execVal3 * SOAP_FMAC4 soap_get__ns7__execVal3(struct soap*, _ns7__execVal3 *, const char*, const char*);

inline int soap_read__ns7__execVal3(struct soap *soap, _ns7__execVal3 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__execVal3(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__execVal3(struct soap *soap, const char *URL, _ns7__execVal3 *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__execVal3(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__execVal3(struct soap *soap, _ns7__execVal3 *p)
{
	if (soap_read__ns7__execVal3(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__getWatchResponse_DEFINED
#define SOAP_TYPE__ns7__getWatchResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__getWatchResponse(struct soap*, const char*, int, const _ns7__getWatchResponse *, const char*);
SOAP_FMAC3 _ns7__getWatchResponse * SOAP_FMAC4 soap_in__ns7__getWatchResponse(struct soap*, const char*, _ns7__getWatchResponse *, const char*);
SOAP_FMAC1 _ns7__getWatchResponse * SOAP_FMAC2 soap_instantiate__ns7__getWatchResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__getWatchResponse * soap_new__ns7__getWatchResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__getWatchResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__getWatchResponse * soap_new_req__ns7__getWatchResponse(
	struct soap *soap,
	ns7__MimeData *data)
{
	_ns7__getWatchResponse *_p = soap_new__ns7__getWatchResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__getWatchResponse::data = data;
	}
	return _p;
}

inline _ns7__getWatchResponse * soap_new_set__ns7__getWatchResponse(
	struct soap *soap,
	ns7__MimeData *data)
{
	_ns7__getWatchResponse *_p = soap_new__ns7__getWatchResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__getWatchResponse::data = data;
	}
	return _p;
}

inline int soap_write__ns7__getWatchResponse(struct soap *soap, _ns7__getWatchResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getWatchResponse", p->soap_type() == SOAP_TYPE__ns7__getWatchResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__getWatchResponse(struct soap *soap, const char *URL, _ns7__getWatchResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getWatchResponse", p->soap_type() == SOAP_TYPE__ns7__getWatchResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__getWatchResponse(struct soap *soap, const char *URL, _ns7__getWatchResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getWatchResponse", p->soap_type() == SOAP_TYPE__ns7__getWatchResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__getWatchResponse * SOAP_FMAC4 soap_get__ns7__getWatchResponse(struct soap*, _ns7__getWatchResponse *, const char*, const char*);

inline int soap_read__ns7__getWatchResponse(struct soap *soap, _ns7__getWatchResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__getWatchResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__getWatchResponse(struct soap *soap, const char *URL, _ns7__getWatchResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__getWatchResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__getWatchResponse(struct soap *soap, _ns7__getWatchResponse *p)
{
	if (soap_read__ns7__getWatchResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__getWatches_DEFINED
#define SOAP_TYPE__ns7__getWatches_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__getWatches(struct soap*, const char*, int, const _ns7__getWatches *, const char*);
SOAP_FMAC3 _ns7__getWatches * SOAP_FMAC4 soap_in__ns7__getWatches(struct soap*, const char*, _ns7__getWatches *, const char*);
SOAP_FMAC1 _ns7__getWatches * SOAP_FMAC2 soap_instantiate__ns7__getWatches(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__getWatches * soap_new__ns7__getWatches(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__getWatches(soap, n, NULL, NULL, NULL);
}

inline _ns7__getWatches * soap_new_req__ns7__getWatches(
	struct soap *soap,
	ns7__SoapWatches *watch)
{
	_ns7__getWatches *_p = soap_new__ns7__getWatches(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__getWatches::watch = watch;
	}
	return _p;
}

inline _ns7__getWatches * soap_new_set__ns7__getWatches(
	struct soap *soap,
	ns7__SoapWatches *watch)
{
	_ns7__getWatches *_p = soap_new__ns7__getWatches(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__getWatches::watch = watch;
	}
	return _p;
}

inline int soap_write__ns7__getWatches(struct soap *soap, _ns7__getWatches const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getWatches", p->soap_type() == SOAP_TYPE__ns7__getWatches ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__getWatches(struct soap *soap, const char *URL, _ns7__getWatches const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getWatches", p->soap_type() == SOAP_TYPE__ns7__getWatches ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__getWatches(struct soap *soap, const char *URL, _ns7__getWatches const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getWatches", p->soap_type() == SOAP_TYPE__ns7__getWatches ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__getWatches * SOAP_FMAC4 soap_get__ns7__getWatches(struct soap*, _ns7__getWatches *, const char*, const char*);

inline int soap_read__ns7__getWatches(struct soap *soap, _ns7__getWatches *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__getWatches(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__getWatches(struct soap *soap, const char *URL, _ns7__getWatches *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__getWatches(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__getWatches(struct soap *soap, _ns7__getWatches *p)
{
	if (soap_read__ns7__getWatches(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__getStackFrameResponse_DEFINED
#define SOAP_TYPE__ns7__getStackFrameResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__getStackFrameResponse(struct soap*, const char*, int, const _ns7__getStackFrameResponse *, const char*);
SOAP_FMAC3 _ns7__getStackFrameResponse * SOAP_FMAC4 soap_in__ns7__getStackFrameResponse(struct soap*, const char*, _ns7__getStackFrameResponse *, const char*);
SOAP_FMAC1 _ns7__getStackFrameResponse * SOAP_FMAC2 soap_instantiate__ns7__getStackFrameResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__getStackFrameResponse * soap_new__ns7__getStackFrameResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__getStackFrameResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__getStackFrameResponse * soap_new_req__ns7__getStackFrameResponse(
	struct soap *soap,
	ns7__MimeData *data)
{
	_ns7__getStackFrameResponse *_p = soap_new__ns7__getStackFrameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__getStackFrameResponse::data = data;
	}
	return _p;
}

inline _ns7__getStackFrameResponse * soap_new_set__ns7__getStackFrameResponse(
	struct soap *soap,
	ns7__MimeData *data)
{
	_ns7__getStackFrameResponse *_p = soap_new__ns7__getStackFrameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__getStackFrameResponse::data = data;
	}
	return _p;
}

inline int soap_write__ns7__getStackFrameResponse(struct soap *soap, _ns7__getStackFrameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getStackFrameResponse", p->soap_type() == SOAP_TYPE__ns7__getStackFrameResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__getStackFrameResponse(struct soap *soap, const char *URL, _ns7__getStackFrameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getStackFrameResponse", p->soap_type() == SOAP_TYPE__ns7__getStackFrameResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__getStackFrameResponse(struct soap *soap, const char *URL, _ns7__getStackFrameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getStackFrameResponse", p->soap_type() == SOAP_TYPE__ns7__getStackFrameResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__getStackFrameResponse * SOAP_FMAC4 soap_get__ns7__getStackFrameResponse(struct soap*, _ns7__getStackFrameResponse *, const char*, const char*);

inline int soap_read__ns7__getStackFrameResponse(struct soap *soap, _ns7__getStackFrameResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__getStackFrameResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__getStackFrameResponse(struct soap *soap, const char *URL, _ns7__getStackFrameResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__getStackFrameResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__getStackFrameResponse(struct soap *soap, _ns7__getStackFrameResponse *p)
{
	if (soap_read__ns7__getStackFrameResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__getStackFrame_DEFINED
#define SOAP_TYPE__ns7__getStackFrame_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__getStackFrame(struct soap*, const char*, int, const _ns7__getStackFrame *, const char*);
SOAP_FMAC3 _ns7__getStackFrame * SOAP_FMAC4 soap_in__ns7__getStackFrame(struct soap*, const char*, _ns7__getStackFrame *, const char*);
SOAP_FMAC1 _ns7__getStackFrame * SOAP_FMAC2 soap_instantiate__ns7__getStackFrame(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__getStackFrame * soap_new__ns7__getStackFrame(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__getStackFrame(soap, n, NULL, NULL, NULL);
}

inline _ns7__getStackFrame * soap_new_req__ns7__getStackFrame(
	struct soap *soap,
	int stackFrameIndex)
{
	_ns7__getStackFrame *_p = soap_new__ns7__getStackFrame(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__getStackFrame::stackFrameIndex = stackFrameIndex;
	}
	return _p;
}

inline _ns7__getStackFrame * soap_new_set__ns7__getStackFrame(
	struct soap *soap,
	std::string *taskName,
	std::string *createdBy,
	int stackFrameIndex)
{
	_ns7__getStackFrame *_p = soap_new__ns7__getStackFrame(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__getStackFrame::taskName = taskName;
		_p->_ns7__getStackFrame::createdBy = createdBy;
		_p->_ns7__getStackFrame::stackFrameIndex = stackFrameIndex;
	}
	return _p;
}

inline int soap_write__ns7__getStackFrame(struct soap *soap, _ns7__getStackFrame const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getStackFrame", p->soap_type() == SOAP_TYPE__ns7__getStackFrame ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__getStackFrame(struct soap *soap, const char *URL, _ns7__getStackFrame const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getStackFrame", p->soap_type() == SOAP_TYPE__ns7__getStackFrame ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__getStackFrame(struct soap *soap, const char *URL, _ns7__getStackFrame const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getStackFrame", p->soap_type() == SOAP_TYPE__ns7__getStackFrame ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__getStackFrame * SOAP_FMAC4 soap_get__ns7__getStackFrame(struct soap*, _ns7__getStackFrame *, const char*, const char*);

inline int soap_read__ns7__getStackFrame(struct soap *soap, _ns7__getStackFrame *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__getStackFrame(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__getStackFrame(struct soap *soap, const char *URL, _ns7__getStackFrame *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__getStackFrame(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__getStackFrame(struct soap *soap, _ns7__getStackFrame *p)
{
	if (soap_read__ns7__getStackFrame(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__getCallStackResponse_DEFINED
#define SOAP_TYPE__ns7__getCallStackResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__getCallStackResponse(struct soap*, const char*, int, const _ns7__getCallStackResponse *, const char*);
SOAP_FMAC3 _ns7__getCallStackResponse * SOAP_FMAC4 soap_in__ns7__getCallStackResponse(struct soap*, const char*, _ns7__getCallStackResponse *, const char*);
SOAP_FMAC1 _ns7__getCallStackResponse * SOAP_FMAC2 soap_instantiate__ns7__getCallStackResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__getCallStackResponse * soap_new__ns7__getCallStackResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__getCallStackResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__getCallStackResponse * soap_new_req__ns7__getCallStackResponse(
	struct soap *soap,
	ns7__SoapCallStack *callStack)
{
	_ns7__getCallStackResponse *_p = soap_new__ns7__getCallStackResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__getCallStackResponse::callStack = callStack;
	}
	return _p;
}

inline _ns7__getCallStackResponse * soap_new_set__ns7__getCallStackResponse(
	struct soap *soap,
	ns7__SoapCallStack *callStack)
{
	_ns7__getCallStackResponse *_p = soap_new__ns7__getCallStackResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__getCallStackResponse::callStack = callStack;
	}
	return _p;
}

inline int soap_write__ns7__getCallStackResponse(struct soap *soap, _ns7__getCallStackResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getCallStackResponse", p->soap_type() == SOAP_TYPE__ns7__getCallStackResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__getCallStackResponse(struct soap *soap, const char *URL, _ns7__getCallStackResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getCallStackResponse", p->soap_type() == SOAP_TYPE__ns7__getCallStackResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__getCallStackResponse(struct soap *soap, const char *URL, _ns7__getCallStackResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getCallStackResponse", p->soap_type() == SOAP_TYPE__ns7__getCallStackResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__getCallStackResponse * SOAP_FMAC4 soap_get__ns7__getCallStackResponse(struct soap*, _ns7__getCallStackResponse *, const char*, const char*);

inline int soap_read__ns7__getCallStackResponse(struct soap *soap, _ns7__getCallStackResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__getCallStackResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__getCallStackResponse(struct soap *soap, const char *URL, _ns7__getCallStackResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__getCallStackResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__getCallStackResponse(struct soap *soap, _ns7__getCallStackResponse *p)
{
	if (soap_read__ns7__getCallStackResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__getCallStack_DEFINED
#define SOAP_TYPE__ns7__getCallStack_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__getCallStack(struct soap*, const char*, int, const _ns7__getCallStack *, const char*);
SOAP_FMAC3 _ns7__getCallStack * SOAP_FMAC4 soap_in__ns7__getCallStack(struct soap*, const char*, _ns7__getCallStack *, const char*);
SOAP_FMAC1 _ns7__getCallStack * SOAP_FMAC2 soap_instantiate__ns7__getCallStack(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__getCallStack * soap_new__ns7__getCallStack(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__getCallStack(soap, n, NULL, NULL, NULL);
}

inline _ns7__getCallStack * soap_new_req__ns7__getCallStack(
	struct soap *soap)
{
	_ns7__getCallStack *_p = soap_new__ns7__getCallStack(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns7__getCallStack * soap_new_set__ns7__getCallStack(
	struct soap *soap,
	std::string *taskName,
	std::string *createdBy)
{
	_ns7__getCallStack *_p = soap_new__ns7__getCallStack(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__getCallStack::taskName = taskName;
		_p->_ns7__getCallStack::createdBy = createdBy;
	}
	return _p;
}

inline int soap_write__ns7__getCallStack(struct soap *soap, _ns7__getCallStack const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getCallStack", p->soap_type() == SOAP_TYPE__ns7__getCallStack ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__getCallStack(struct soap *soap, const char *URL, _ns7__getCallStack const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getCallStack", p->soap_type() == SOAP_TYPE__ns7__getCallStack ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__getCallStack(struct soap *soap, const char *URL, _ns7__getCallStack const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getCallStack", p->soap_type() == SOAP_TYPE__ns7__getCallStack ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__getCallStack * SOAP_FMAC4 soap_get__ns7__getCallStack(struct soap*, _ns7__getCallStack *, const char*, const char*);

inline int soap_read__ns7__getCallStack(struct soap *soap, _ns7__getCallStack *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__getCallStack(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__getCallStack(struct soap *soap, const char *URL, _ns7__getCallStack *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__getCallStack(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__getCallStack(struct soap *soap, _ns7__getCallStack *p)
{
	if (soap_read__ns7__getCallStack(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__unsubscribeResponse_DEFINED
#define SOAP_TYPE__ns7__unsubscribeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__unsubscribeResponse(struct soap*, const char*, int, const _ns7__unsubscribeResponse *, const char*);
SOAP_FMAC3 _ns7__unsubscribeResponse * SOAP_FMAC4 soap_in__ns7__unsubscribeResponse(struct soap*, const char*, _ns7__unsubscribeResponse *, const char*);
SOAP_FMAC1 _ns7__unsubscribeResponse * SOAP_FMAC2 soap_instantiate__ns7__unsubscribeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__unsubscribeResponse * soap_new__ns7__unsubscribeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__unsubscribeResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__unsubscribeResponse * soap_new_req__ns7__unsubscribeResponse(
	struct soap *soap)
{
	_ns7__unsubscribeResponse *_p = soap_new__ns7__unsubscribeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns7__unsubscribeResponse * soap_new_set__ns7__unsubscribeResponse(
	struct soap *soap)
{
	_ns7__unsubscribeResponse *_p = soap_new__ns7__unsubscribeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns7__unsubscribeResponse(struct soap *soap, _ns7__unsubscribeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:unsubscribeResponse", p->soap_type() == SOAP_TYPE__ns7__unsubscribeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__unsubscribeResponse(struct soap *soap, const char *URL, _ns7__unsubscribeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:unsubscribeResponse", p->soap_type() == SOAP_TYPE__ns7__unsubscribeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__unsubscribeResponse(struct soap *soap, const char *URL, _ns7__unsubscribeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:unsubscribeResponse", p->soap_type() == SOAP_TYPE__ns7__unsubscribeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__unsubscribeResponse * SOAP_FMAC4 soap_get__ns7__unsubscribeResponse(struct soap*, _ns7__unsubscribeResponse *, const char*, const char*);

inline int soap_read__ns7__unsubscribeResponse(struct soap *soap, _ns7__unsubscribeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__unsubscribeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__unsubscribeResponse(struct soap *soap, const char *URL, _ns7__unsubscribeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__unsubscribeResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__unsubscribeResponse(struct soap *soap, _ns7__unsubscribeResponse *p)
{
	if (soap_read__ns7__unsubscribeResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__unsubscribeToControllerEvents_DEFINED
#define SOAP_TYPE__ns7__unsubscribeToControllerEvents_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__unsubscribeToControllerEvents(struct soap*, const char*, int, const _ns7__unsubscribeToControllerEvents *, const char*);
SOAP_FMAC3 _ns7__unsubscribeToControllerEvents * SOAP_FMAC4 soap_in__ns7__unsubscribeToControllerEvents(struct soap*, const char*, _ns7__unsubscribeToControllerEvents *, const char*);
SOAP_FMAC1 _ns7__unsubscribeToControllerEvents * SOAP_FMAC2 soap_instantiate__ns7__unsubscribeToControllerEvents(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__unsubscribeToControllerEvents * soap_new__ns7__unsubscribeToControllerEvents(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__unsubscribeToControllerEvents(soap, n, NULL, NULL, NULL);
}

inline _ns7__unsubscribeToControllerEvents * soap_new_req__ns7__unsubscribeToControllerEvents(
	struct soap *soap)
{
	_ns7__unsubscribeToControllerEvents *_p = soap_new__ns7__unsubscribeToControllerEvents(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns7__unsubscribeToControllerEvents * soap_new_set__ns7__unsubscribeToControllerEvents(
	struct soap *soap)
{
	_ns7__unsubscribeToControllerEvents *_p = soap_new__ns7__unsubscribeToControllerEvents(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns7__unsubscribeToControllerEvents(struct soap *soap, _ns7__unsubscribeToControllerEvents const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:unsubscribeToControllerEvents", p->soap_type() == SOAP_TYPE__ns7__unsubscribeToControllerEvents ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__unsubscribeToControllerEvents(struct soap *soap, const char *URL, _ns7__unsubscribeToControllerEvents const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:unsubscribeToControllerEvents", p->soap_type() == SOAP_TYPE__ns7__unsubscribeToControllerEvents ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__unsubscribeToControllerEvents(struct soap *soap, const char *URL, _ns7__unsubscribeToControllerEvents const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:unsubscribeToControllerEvents", p->soap_type() == SOAP_TYPE__ns7__unsubscribeToControllerEvents ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__unsubscribeToControllerEvents * SOAP_FMAC4 soap_get__ns7__unsubscribeToControllerEvents(struct soap*, _ns7__unsubscribeToControllerEvents *, const char*, const char*);

inline int soap_read__ns7__unsubscribeToControllerEvents(struct soap *soap, _ns7__unsubscribeToControllerEvents *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__unsubscribeToControllerEvents(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__unsubscribeToControllerEvents(struct soap *soap, const char *URL, _ns7__unsubscribeToControllerEvents *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__unsubscribeToControllerEvents(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__unsubscribeToControllerEvents(struct soap *soap, _ns7__unsubscribeToControllerEvents *p)
{
	if (soap_read__ns7__unsubscribeToControllerEvents(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__subscribeResponse_DEFINED
#define SOAP_TYPE__ns7__subscribeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__subscribeResponse(struct soap*, const char*, int, const _ns7__subscribeResponse *, const char*);
SOAP_FMAC3 _ns7__subscribeResponse * SOAP_FMAC4 soap_in__ns7__subscribeResponse(struct soap*, const char*, _ns7__subscribeResponse *, const char*);
SOAP_FMAC1 _ns7__subscribeResponse * SOAP_FMAC2 soap_instantiate__ns7__subscribeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__subscribeResponse * soap_new__ns7__subscribeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__subscribeResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__subscribeResponse * soap_new_req__ns7__subscribeResponse(
	struct soap *soap)
{
	_ns7__subscribeResponse *_p = soap_new__ns7__subscribeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns7__subscribeResponse * soap_new_set__ns7__subscribeResponse(
	struct soap *soap)
{
	_ns7__subscribeResponse *_p = soap_new__ns7__subscribeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns7__subscribeResponse(struct soap *soap, _ns7__subscribeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:subscribeResponse", p->soap_type() == SOAP_TYPE__ns7__subscribeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__subscribeResponse(struct soap *soap, const char *URL, _ns7__subscribeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:subscribeResponse", p->soap_type() == SOAP_TYPE__ns7__subscribeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__subscribeResponse(struct soap *soap, const char *URL, _ns7__subscribeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:subscribeResponse", p->soap_type() == SOAP_TYPE__ns7__subscribeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__subscribeResponse * SOAP_FMAC4 soap_get__ns7__subscribeResponse(struct soap*, _ns7__subscribeResponse *, const char*, const char*);

inline int soap_read__ns7__subscribeResponse(struct soap *soap, _ns7__subscribeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__subscribeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__subscribeResponse(struct soap *soap, const char *URL, _ns7__subscribeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__subscribeResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__subscribeResponse(struct soap *soap, _ns7__subscribeResponse *p)
{
	if (soap_read__ns7__subscribeResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__subscribeToControllerEvents_DEFINED
#define SOAP_TYPE__ns7__subscribeToControllerEvents_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__subscribeToControllerEvents(struct soap*, const char*, int, const _ns7__subscribeToControllerEvents *, const char*);
SOAP_FMAC3 _ns7__subscribeToControllerEvents * SOAP_FMAC4 soap_in__ns7__subscribeToControllerEvents(struct soap*, const char*, _ns7__subscribeToControllerEvents *, const char*);
SOAP_FMAC1 _ns7__subscribeToControllerEvents * SOAP_FMAC2 soap_instantiate__ns7__subscribeToControllerEvents(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__subscribeToControllerEvents * soap_new__ns7__subscribeToControllerEvents(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__subscribeToControllerEvents(soap, n, NULL, NULL, NULL);
}

inline _ns7__subscribeToControllerEvents * soap_new_req__ns7__subscribeToControllerEvents(
	struct soap *soap,
	int sendInterval)
{
	_ns7__subscribeToControllerEvents *_p = soap_new__ns7__subscribeToControllerEvents(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__subscribeToControllerEvents::sendInterval = sendInterval;
	}
	return _p;
}

inline _ns7__subscribeToControllerEvents * soap_new_set__ns7__subscribeToControllerEvents(
	struct soap *soap,
	std::string *serviceUrl,
	int sendInterval)
{
	_ns7__subscribeToControllerEvents *_p = soap_new__ns7__subscribeToControllerEvents(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__subscribeToControllerEvents::serviceUrl = serviceUrl;
		_p->_ns7__subscribeToControllerEvents::sendInterval = sendInterval;
	}
	return _p;
}

inline int soap_write__ns7__subscribeToControllerEvents(struct soap *soap, _ns7__subscribeToControllerEvents const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:subscribeToControllerEvents", p->soap_type() == SOAP_TYPE__ns7__subscribeToControllerEvents ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__subscribeToControllerEvents(struct soap *soap, const char *URL, _ns7__subscribeToControllerEvents const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:subscribeToControllerEvents", p->soap_type() == SOAP_TYPE__ns7__subscribeToControllerEvents ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__subscribeToControllerEvents(struct soap *soap, const char *URL, _ns7__subscribeToControllerEvents const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:subscribeToControllerEvents", p->soap_type() == SOAP_TYPE__ns7__subscribeToControllerEvents ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__subscribeToControllerEvents * SOAP_FMAC4 soap_get__ns7__subscribeToControllerEvents(struct soap*, _ns7__subscribeToControllerEvents *, const char*, const char*);

inline int soap_read__ns7__subscribeToControllerEvents(struct soap *soap, _ns7__subscribeToControllerEvents *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__subscribeToControllerEvents(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__subscribeToControllerEvents(struct soap *soap, const char *URL, _ns7__subscribeToControllerEvents *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__subscribeToControllerEvents(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__subscribeToControllerEvents(struct soap *soap, _ns7__subscribeToControllerEvents *p)
{
	if (soap_read__ns7__subscribeToControllerEvents(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__taskStepResponse_DEFINED
#define SOAP_TYPE__ns7__taskStepResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__taskStepResponse(struct soap*, const char*, int, const _ns7__taskStepResponse *, const char*);
SOAP_FMAC3 _ns7__taskStepResponse * SOAP_FMAC4 soap_in__ns7__taskStepResponse(struct soap*, const char*, _ns7__taskStepResponse *, const char*);
SOAP_FMAC1 _ns7__taskStepResponse * SOAP_FMAC2 soap_instantiate__ns7__taskStepResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__taskStepResponse * soap_new__ns7__taskStepResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__taskStepResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__taskStepResponse * soap_new_req__ns7__taskStepResponse(
	struct soap *soap)
{
	_ns7__taskStepResponse *_p = soap_new__ns7__taskStepResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns7__taskStepResponse * soap_new_set__ns7__taskStepResponse(
	struct soap *soap)
{
	_ns7__taskStepResponse *_p = soap_new__ns7__taskStepResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns7__taskStepResponse(struct soap *soap, _ns7__taskStepResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskStepResponse", p->soap_type() == SOAP_TYPE__ns7__taskStepResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__taskStepResponse(struct soap *soap, const char *URL, _ns7__taskStepResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskStepResponse", p->soap_type() == SOAP_TYPE__ns7__taskStepResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__taskStepResponse(struct soap *soap, const char *URL, _ns7__taskStepResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskStepResponse", p->soap_type() == SOAP_TYPE__ns7__taskStepResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__taskStepResponse * SOAP_FMAC4 soap_get__ns7__taskStepResponse(struct soap*, _ns7__taskStepResponse *, const char*, const char*);

inline int soap_read__ns7__taskStepResponse(struct soap *soap, _ns7__taskStepResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__taskStepResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__taskStepResponse(struct soap *soap, const char *URL, _ns7__taskStepResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__taskStepResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__taskStepResponse(struct soap *soap, _ns7__taskStepResponse *p)
{
	if (soap_read__ns7__taskStepResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__taskStep_DEFINED
#define SOAP_TYPE__ns7__taskStep_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__taskStep(struct soap*, const char*, int, const _ns7__taskStep *, const char*);
SOAP_FMAC3 _ns7__taskStep * SOAP_FMAC4 soap_in__ns7__taskStep(struct soap*, const char*, _ns7__taskStep *, const char*);
SOAP_FMAC1 _ns7__taskStep * SOAP_FMAC2 soap_instantiate__ns7__taskStep(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__taskStep * soap_new__ns7__taskStep(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__taskStep(soap, n, NULL, NULL, NULL);
}

inline _ns7__taskStep * soap_new_req__ns7__taskStep(
	struct soap *soap,
	enum ns7__SoapTaskStep stepType)
{
	_ns7__taskStep *_p = soap_new__ns7__taskStep(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__taskStep::stepType = stepType;
	}
	return _p;
}

inline _ns7__taskStep * soap_new_set__ns7__taskStep(
	struct soap *soap,
	std::string *taskName,
	std::string *createdBy,
	enum ns7__SoapTaskStep stepType)
{
	_ns7__taskStep *_p = soap_new__ns7__taskStep(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__taskStep::taskName = taskName;
		_p->_ns7__taskStep::createdBy = createdBy;
		_p->_ns7__taskStep::stepType = stepType;
	}
	return _p;
}

inline int soap_write__ns7__taskStep(struct soap *soap, _ns7__taskStep const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskStep", p->soap_type() == SOAP_TYPE__ns7__taskStep ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__taskStep(struct soap *soap, const char *URL, _ns7__taskStep const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskStep", p->soap_type() == SOAP_TYPE__ns7__taskStep ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__taskStep(struct soap *soap, const char *URL, _ns7__taskStep const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskStep", p->soap_type() == SOAP_TYPE__ns7__taskStep ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__taskStep * SOAP_FMAC4 soap_get__ns7__taskStep(struct soap*, _ns7__taskStep *, const char*, const char*);

inline int soap_read__ns7__taskStep(struct soap *soap, _ns7__taskStep *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__taskStep(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__taskStep(struct soap *soap, const char *URL, _ns7__taskStep *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__taskStep(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__taskStep(struct soap *soap, _ns7__taskStep *p)
{
	if (soap_read__ns7__taskStep(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__taskKillResponse_DEFINED
#define SOAP_TYPE__ns7__taskKillResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__taskKillResponse(struct soap*, const char*, int, const _ns7__taskKillResponse *, const char*);
SOAP_FMAC3 _ns7__taskKillResponse * SOAP_FMAC4 soap_in__ns7__taskKillResponse(struct soap*, const char*, _ns7__taskKillResponse *, const char*);
SOAP_FMAC1 _ns7__taskKillResponse * SOAP_FMAC2 soap_instantiate__ns7__taskKillResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__taskKillResponse * soap_new__ns7__taskKillResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__taskKillResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__taskKillResponse * soap_new_req__ns7__taskKillResponse(
	struct soap *soap)
{
	_ns7__taskKillResponse *_p = soap_new__ns7__taskKillResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns7__taskKillResponse * soap_new_set__ns7__taskKillResponse(
	struct soap *soap)
{
	_ns7__taskKillResponse *_p = soap_new__ns7__taskKillResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns7__taskKillResponse(struct soap *soap, _ns7__taskKillResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskKillResponse", p->soap_type() == SOAP_TYPE__ns7__taskKillResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__taskKillResponse(struct soap *soap, const char *URL, _ns7__taskKillResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskKillResponse", p->soap_type() == SOAP_TYPE__ns7__taskKillResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__taskKillResponse(struct soap *soap, const char *URL, _ns7__taskKillResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskKillResponse", p->soap_type() == SOAP_TYPE__ns7__taskKillResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__taskKillResponse * SOAP_FMAC4 soap_get__ns7__taskKillResponse(struct soap*, _ns7__taskKillResponse *, const char*, const char*);

inline int soap_read__ns7__taskKillResponse(struct soap *soap, _ns7__taskKillResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__taskKillResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__taskKillResponse(struct soap *soap, const char *URL, _ns7__taskKillResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__taskKillResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__taskKillResponse(struct soap *soap, _ns7__taskKillResponse *p)
{
	if (soap_read__ns7__taskKillResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__taskKill_DEFINED
#define SOAP_TYPE__ns7__taskKill_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__taskKill(struct soap*, const char*, int, const _ns7__taskKill *, const char*);
SOAP_FMAC3 _ns7__taskKill * SOAP_FMAC4 soap_in__ns7__taskKill(struct soap*, const char*, _ns7__taskKill *, const char*);
SOAP_FMAC1 _ns7__taskKill * SOAP_FMAC2 soap_instantiate__ns7__taskKill(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__taskKill * soap_new__ns7__taskKill(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__taskKill(soap, n, NULL, NULL, NULL);
}

inline _ns7__taskKill * soap_new_req__ns7__taskKill(
	struct soap *soap)
{
	_ns7__taskKill *_p = soap_new__ns7__taskKill(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns7__taskKill * soap_new_set__ns7__taskKill(
	struct soap *soap,
	std::string *taskName,
	std::string *createdBy)
{
	_ns7__taskKill *_p = soap_new__ns7__taskKill(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__taskKill::taskName = taskName;
		_p->_ns7__taskKill::createdBy = createdBy;
	}
	return _p;
}

inline int soap_write__ns7__taskKill(struct soap *soap, _ns7__taskKill const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskKill", p->soap_type() == SOAP_TYPE__ns7__taskKill ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__taskKill(struct soap *soap, const char *URL, _ns7__taskKill const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskKill", p->soap_type() == SOAP_TYPE__ns7__taskKill ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__taskKill(struct soap *soap, const char *URL, _ns7__taskKill const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskKill", p->soap_type() == SOAP_TYPE__ns7__taskKill ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__taskKill * SOAP_FMAC4 soap_get__ns7__taskKill(struct soap*, _ns7__taskKill *, const char*, const char*);

inline int soap_read__ns7__taskKill(struct soap *soap, _ns7__taskKill *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__taskKill(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__taskKill(struct soap *soap, const char *URL, _ns7__taskKill *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__taskKill(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__taskKill(struct soap *soap, _ns7__taskKill *p)
{
	if (soap_read__ns7__taskKill(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__taskResumeResponse_DEFINED
#define SOAP_TYPE__ns7__taskResumeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__taskResumeResponse(struct soap*, const char*, int, const _ns7__taskResumeResponse *, const char*);
SOAP_FMAC3 _ns7__taskResumeResponse * SOAP_FMAC4 soap_in__ns7__taskResumeResponse(struct soap*, const char*, _ns7__taskResumeResponse *, const char*);
SOAP_FMAC1 _ns7__taskResumeResponse * SOAP_FMAC2 soap_instantiate__ns7__taskResumeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__taskResumeResponse * soap_new__ns7__taskResumeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__taskResumeResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__taskResumeResponse * soap_new_req__ns7__taskResumeResponse(
	struct soap *soap)
{
	_ns7__taskResumeResponse *_p = soap_new__ns7__taskResumeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns7__taskResumeResponse * soap_new_set__ns7__taskResumeResponse(
	struct soap *soap)
{
	_ns7__taskResumeResponse *_p = soap_new__ns7__taskResumeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns7__taskResumeResponse(struct soap *soap, _ns7__taskResumeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskResumeResponse", p->soap_type() == SOAP_TYPE__ns7__taskResumeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__taskResumeResponse(struct soap *soap, const char *URL, _ns7__taskResumeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskResumeResponse", p->soap_type() == SOAP_TYPE__ns7__taskResumeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__taskResumeResponse(struct soap *soap, const char *URL, _ns7__taskResumeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskResumeResponse", p->soap_type() == SOAP_TYPE__ns7__taskResumeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__taskResumeResponse * SOAP_FMAC4 soap_get__ns7__taskResumeResponse(struct soap*, _ns7__taskResumeResponse *, const char*, const char*);

inline int soap_read__ns7__taskResumeResponse(struct soap *soap, _ns7__taskResumeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__taskResumeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__taskResumeResponse(struct soap *soap, const char *URL, _ns7__taskResumeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__taskResumeResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__taskResumeResponse(struct soap *soap, _ns7__taskResumeResponse *p)
{
	if (soap_read__ns7__taskResumeResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__taskResume_DEFINED
#define SOAP_TYPE__ns7__taskResume_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__taskResume(struct soap*, const char*, int, const _ns7__taskResume *, const char*);
SOAP_FMAC3 _ns7__taskResume * SOAP_FMAC4 soap_in__ns7__taskResume(struct soap*, const char*, _ns7__taskResume *, const char*);
SOAP_FMAC1 _ns7__taskResume * SOAP_FMAC2 soap_instantiate__ns7__taskResume(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__taskResume * soap_new__ns7__taskResume(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__taskResume(soap, n, NULL, NULL, NULL);
}

inline _ns7__taskResume * soap_new_req__ns7__taskResume(
	struct soap *soap)
{
	_ns7__taskResume *_p = soap_new__ns7__taskResume(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns7__taskResume * soap_new_set__ns7__taskResume(
	struct soap *soap,
	std::string *taskName,
	std::string *createdBy)
{
	_ns7__taskResume *_p = soap_new__ns7__taskResume(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__taskResume::taskName = taskName;
		_p->_ns7__taskResume::createdBy = createdBy;
	}
	return _p;
}

inline int soap_write__ns7__taskResume(struct soap *soap, _ns7__taskResume const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskResume", p->soap_type() == SOAP_TYPE__ns7__taskResume ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__taskResume(struct soap *soap, const char *URL, _ns7__taskResume const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskResume", p->soap_type() == SOAP_TYPE__ns7__taskResume ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__taskResume(struct soap *soap, const char *URL, _ns7__taskResume const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskResume", p->soap_type() == SOAP_TYPE__ns7__taskResume ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__taskResume * SOAP_FMAC4 soap_get__ns7__taskResume(struct soap*, _ns7__taskResume *, const char*, const char*);

inline int soap_read__ns7__taskResume(struct soap *soap, _ns7__taskResume *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__taskResume(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__taskResume(struct soap *soap, const char *URL, _ns7__taskResume *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__taskResume(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__taskResume(struct soap *soap, _ns7__taskResume *p)
{
	if (soap_read__ns7__taskResume(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__taskSuspendResponse_DEFINED
#define SOAP_TYPE__ns7__taskSuspendResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__taskSuspendResponse(struct soap*, const char*, int, const _ns7__taskSuspendResponse *, const char*);
SOAP_FMAC3 _ns7__taskSuspendResponse * SOAP_FMAC4 soap_in__ns7__taskSuspendResponse(struct soap*, const char*, _ns7__taskSuspendResponse *, const char*);
SOAP_FMAC1 _ns7__taskSuspendResponse * SOAP_FMAC2 soap_instantiate__ns7__taskSuspendResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__taskSuspendResponse * soap_new__ns7__taskSuspendResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__taskSuspendResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__taskSuspendResponse * soap_new_req__ns7__taskSuspendResponse(
	struct soap *soap)
{
	_ns7__taskSuspendResponse *_p = soap_new__ns7__taskSuspendResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns7__taskSuspendResponse * soap_new_set__ns7__taskSuspendResponse(
	struct soap *soap)
{
	_ns7__taskSuspendResponse *_p = soap_new__ns7__taskSuspendResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns7__taskSuspendResponse(struct soap *soap, _ns7__taskSuspendResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskSuspendResponse", p->soap_type() == SOAP_TYPE__ns7__taskSuspendResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__taskSuspendResponse(struct soap *soap, const char *URL, _ns7__taskSuspendResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskSuspendResponse", p->soap_type() == SOAP_TYPE__ns7__taskSuspendResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__taskSuspendResponse(struct soap *soap, const char *URL, _ns7__taskSuspendResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskSuspendResponse", p->soap_type() == SOAP_TYPE__ns7__taskSuspendResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__taskSuspendResponse * SOAP_FMAC4 soap_get__ns7__taskSuspendResponse(struct soap*, _ns7__taskSuspendResponse *, const char*, const char*);

inline int soap_read__ns7__taskSuspendResponse(struct soap *soap, _ns7__taskSuspendResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__taskSuspendResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__taskSuspendResponse(struct soap *soap, const char *URL, _ns7__taskSuspendResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__taskSuspendResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__taskSuspendResponse(struct soap *soap, _ns7__taskSuspendResponse *p)
{
	if (soap_read__ns7__taskSuspendResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__taskSuspend_DEFINED
#define SOAP_TYPE__ns7__taskSuspend_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__taskSuspend(struct soap*, const char*, int, const _ns7__taskSuspend *, const char*);
SOAP_FMAC3 _ns7__taskSuspend * SOAP_FMAC4 soap_in__ns7__taskSuspend(struct soap*, const char*, _ns7__taskSuspend *, const char*);
SOAP_FMAC1 _ns7__taskSuspend * SOAP_FMAC2 soap_instantiate__ns7__taskSuspend(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__taskSuspend * soap_new__ns7__taskSuspend(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__taskSuspend(soap, n, NULL, NULL, NULL);
}

inline _ns7__taskSuspend * soap_new_req__ns7__taskSuspend(
	struct soap *soap)
{
	_ns7__taskSuspend *_p = soap_new__ns7__taskSuspend(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns7__taskSuspend * soap_new_set__ns7__taskSuspend(
	struct soap *soap,
	std::string *taskName,
	std::string *createdBy)
{
	_ns7__taskSuspend *_p = soap_new__ns7__taskSuspend(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__taskSuspend::taskName = taskName;
		_p->_ns7__taskSuspend::createdBy = createdBy;
	}
	return _p;
}

inline int soap_write__ns7__taskSuspend(struct soap *soap, _ns7__taskSuspend const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskSuspend", p->soap_type() == SOAP_TYPE__ns7__taskSuspend ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__taskSuspend(struct soap *soap, const char *URL, _ns7__taskSuspend const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskSuspend", p->soap_type() == SOAP_TYPE__ns7__taskSuspend ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__taskSuspend(struct soap *soap, const char *URL, _ns7__taskSuspend const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:taskSuspend", p->soap_type() == SOAP_TYPE__ns7__taskSuspend ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__taskSuspend * SOAP_FMAC4 soap_get__ns7__taskSuspend(struct soap*, _ns7__taskSuspend *, const char*, const char*);

inline int soap_read__ns7__taskSuspend(struct soap *soap, _ns7__taskSuspend *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__taskSuspend(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__taskSuspend(struct soap *soap, const char *URL, _ns7__taskSuspend *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__taskSuspend(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__taskSuspend(struct soap *soap, _ns7__taskSuspend *p)
{
	if (soap_read__ns7__taskSuspend(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__getTasksResponse_DEFINED
#define SOAP_TYPE__ns7__getTasksResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__getTasksResponse(struct soap*, const char*, int, const _ns7__getTasksResponse *, const char*);
SOAP_FMAC3 _ns7__getTasksResponse * SOAP_FMAC4 soap_in__ns7__getTasksResponse(struct soap*, const char*, _ns7__getTasksResponse *, const char*);
SOAP_FMAC1 _ns7__getTasksResponse * SOAP_FMAC2 soap_instantiate__ns7__getTasksResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__getTasksResponse * soap_new__ns7__getTasksResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__getTasksResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__getTasksResponse * soap_new_req__ns7__getTasksResponse(
	struct soap *soap,
	ns7__SoapTasks *tasks)
{
	_ns7__getTasksResponse *_p = soap_new__ns7__getTasksResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__getTasksResponse::tasks = tasks;
	}
	return _p;
}

inline _ns7__getTasksResponse * soap_new_set__ns7__getTasksResponse(
	struct soap *soap,
	ns7__SoapTasks *tasks)
{
	_ns7__getTasksResponse *_p = soap_new__ns7__getTasksResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__getTasksResponse::tasks = tasks;
	}
	return _p;
}

inline int soap_write__ns7__getTasksResponse(struct soap *soap, _ns7__getTasksResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getTasksResponse", p->soap_type() == SOAP_TYPE__ns7__getTasksResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__getTasksResponse(struct soap *soap, const char *URL, _ns7__getTasksResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getTasksResponse", p->soap_type() == SOAP_TYPE__ns7__getTasksResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__getTasksResponse(struct soap *soap, const char *URL, _ns7__getTasksResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getTasksResponse", p->soap_type() == SOAP_TYPE__ns7__getTasksResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__getTasksResponse * SOAP_FMAC4 soap_get__ns7__getTasksResponse(struct soap*, _ns7__getTasksResponse *, const char*, const char*);

inline int soap_read__ns7__getTasksResponse(struct soap *soap, _ns7__getTasksResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__getTasksResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__getTasksResponse(struct soap *soap, const char *URL, _ns7__getTasksResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__getTasksResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__getTasksResponse(struct soap *soap, _ns7__getTasksResponse *p)
{
	if (soap_read__ns7__getTasksResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__getTasks_DEFINED
#define SOAP_TYPE__ns7__getTasks_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__getTasks(struct soap*, const char*, int, const _ns7__getTasks *, const char*);
SOAP_FMAC3 _ns7__getTasks * SOAP_FMAC4 soap_in__ns7__getTasks(struct soap*, const char*, _ns7__getTasks *, const char*);
SOAP_FMAC1 _ns7__getTasks * SOAP_FMAC2 soap_instantiate__ns7__getTasks(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__getTasks * soap_new__ns7__getTasks(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__getTasks(soap, n, NULL, NULL, NULL);
}

inline _ns7__getTasks * soap_new_req__ns7__getTasks(
	struct soap *soap)
{
	_ns7__getTasks *_p = soap_new__ns7__getTasks(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns7__getTasks * soap_new_set__ns7__getTasks(
	struct soap *soap)
{
	_ns7__getTasks *_p = soap_new__ns7__getTasks(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns7__getTasks(struct soap *soap, _ns7__getTasks const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getTasks", p->soap_type() == SOAP_TYPE__ns7__getTasks ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__getTasks(struct soap *soap, const char *URL, _ns7__getTasks const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getTasks", p->soap_type() == SOAP_TYPE__ns7__getTasks ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__getTasks(struct soap *soap, const char *URL, _ns7__getTasks const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getTasks", p->soap_type() == SOAP_TYPE__ns7__getTasks ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__getTasks * SOAP_FMAC4 soap_get__ns7__getTasks(struct soap*, _ns7__getTasks *, const char*, const char*);

inline int soap_read__ns7__getTasks(struct soap *soap, _ns7__getTasks *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__getTasks(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__getTasks(struct soap *soap, const char *URL, _ns7__getTasks *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__getTasks(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__getTasks(struct soap *soap, _ns7__getTasks *p)
{
	if (soap_read__ns7__getTasks(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__clearAllBreakpointsResponse_DEFINED
#define SOAP_TYPE__ns7__clearAllBreakpointsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__clearAllBreakpointsResponse(struct soap*, const char*, int, const _ns7__clearAllBreakpointsResponse *, const char*);
SOAP_FMAC3 _ns7__clearAllBreakpointsResponse * SOAP_FMAC4 soap_in__ns7__clearAllBreakpointsResponse(struct soap*, const char*, _ns7__clearAllBreakpointsResponse *, const char*);
SOAP_FMAC1 _ns7__clearAllBreakpointsResponse * SOAP_FMAC2 soap_instantiate__ns7__clearAllBreakpointsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__clearAllBreakpointsResponse * soap_new__ns7__clearAllBreakpointsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__clearAllBreakpointsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__clearAllBreakpointsResponse * soap_new_req__ns7__clearAllBreakpointsResponse(
	struct soap *soap)
{
	_ns7__clearAllBreakpointsResponse *_p = soap_new__ns7__clearAllBreakpointsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns7__clearAllBreakpointsResponse * soap_new_set__ns7__clearAllBreakpointsResponse(
	struct soap *soap)
{
	_ns7__clearAllBreakpointsResponse *_p = soap_new__ns7__clearAllBreakpointsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns7__clearAllBreakpointsResponse(struct soap *soap, _ns7__clearAllBreakpointsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:clearAllBreakpointsResponse", p->soap_type() == SOAP_TYPE__ns7__clearAllBreakpointsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__clearAllBreakpointsResponse(struct soap *soap, const char *URL, _ns7__clearAllBreakpointsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:clearAllBreakpointsResponse", p->soap_type() == SOAP_TYPE__ns7__clearAllBreakpointsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__clearAllBreakpointsResponse(struct soap *soap, const char *URL, _ns7__clearAllBreakpointsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:clearAllBreakpointsResponse", p->soap_type() == SOAP_TYPE__ns7__clearAllBreakpointsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__clearAllBreakpointsResponse * SOAP_FMAC4 soap_get__ns7__clearAllBreakpointsResponse(struct soap*, _ns7__clearAllBreakpointsResponse *, const char*, const char*);

inline int soap_read__ns7__clearAllBreakpointsResponse(struct soap *soap, _ns7__clearAllBreakpointsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__clearAllBreakpointsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__clearAllBreakpointsResponse(struct soap *soap, const char *URL, _ns7__clearAllBreakpointsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__clearAllBreakpointsResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__clearAllBreakpointsResponse(struct soap *soap, _ns7__clearAllBreakpointsResponse *p)
{
	if (soap_read__ns7__clearAllBreakpointsResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__clearAllBreakpoints_DEFINED
#define SOAP_TYPE__ns7__clearAllBreakpoints_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__clearAllBreakpoints(struct soap*, const char*, int, const _ns7__clearAllBreakpoints *, const char*);
SOAP_FMAC3 _ns7__clearAllBreakpoints * SOAP_FMAC4 soap_in__ns7__clearAllBreakpoints(struct soap*, const char*, _ns7__clearAllBreakpoints *, const char*);
SOAP_FMAC1 _ns7__clearAllBreakpoints * SOAP_FMAC2 soap_instantiate__ns7__clearAllBreakpoints(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__clearAllBreakpoints * soap_new__ns7__clearAllBreakpoints(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__clearAllBreakpoints(soap, n, NULL, NULL, NULL);
}

inline _ns7__clearAllBreakpoints * soap_new_req__ns7__clearAllBreakpoints(
	struct soap *soap)
{
	_ns7__clearAllBreakpoints *_p = soap_new__ns7__clearAllBreakpoints(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns7__clearAllBreakpoints * soap_new_set__ns7__clearAllBreakpoints(
	struct soap *soap)
{
	_ns7__clearAllBreakpoints *_p = soap_new__ns7__clearAllBreakpoints(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns7__clearAllBreakpoints(struct soap *soap, _ns7__clearAllBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:clearAllBreakpoints", p->soap_type() == SOAP_TYPE__ns7__clearAllBreakpoints ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__clearAllBreakpoints(struct soap *soap, const char *URL, _ns7__clearAllBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:clearAllBreakpoints", p->soap_type() == SOAP_TYPE__ns7__clearAllBreakpoints ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__clearAllBreakpoints(struct soap *soap, const char *URL, _ns7__clearAllBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:clearAllBreakpoints", p->soap_type() == SOAP_TYPE__ns7__clearAllBreakpoints ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__clearAllBreakpoints * SOAP_FMAC4 soap_get__ns7__clearAllBreakpoints(struct soap*, _ns7__clearAllBreakpoints *, const char*, const char*);

inline int soap_read__ns7__clearAllBreakpoints(struct soap *soap, _ns7__clearAllBreakpoints *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__clearAllBreakpoints(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__clearAllBreakpoints(struct soap *soap, const char *URL, _ns7__clearAllBreakpoints *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__clearAllBreakpoints(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__clearAllBreakpoints(struct soap *soap, _ns7__clearAllBreakpoints *p)
{
	if (soap_read__ns7__clearAllBreakpoints(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__clearBreakpointsResponse_DEFINED
#define SOAP_TYPE__ns7__clearBreakpointsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__clearBreakpointsResponse(struct soap*, const char*, int, const _ns7__clearBreakpointsResponse *, const char*);
SOAP_FMAC3 _ns7__clearBreakpointsResponse * SOAP_FMAC4 soap_in__ns7__clearBreakpointsResponse(struct soap*, const char*, _ns7__clearBreakpointsResponse *, const char*);
SOAP_FMAC1 _ns7__clearBreakpointsResponse * SOAP_FMAC2 soap_instantiate__ns7__clearBreakpointsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__clearBreakpointsResponse * soap_new__ns7__clearBreakpointsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__clearBreakpointsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__clearBreakpointsResponse * soap_new_req__ns7__clearBreakpointsResponse(
	struct soap *soap,
	ns7__BreakpointsResponses *out)
{
	_ns7__clearBreakpointsResponse *_p = soap_new__ns7__clearBreakpointsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__clearBreakpointsResponse::out = out;
	}
	return _p;
}

inline _ns7__clearBreakpointsResponse * soap_new_set__ns7__clearBreakpointsResponse(
	struct soap *soap,
	ns7__BreakpointsResponses *out)
{
	_ns7__clearBreakpointsResponse *_p = soap_new__ns7__clearBreakpointsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__clearBreakpointsResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns7__clearBreakpointsResponse(struct soap *soap, _ns7__clearBreakpointsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:clearBreakpointsResponse", p->soap_type() == SOAP_TYPE__ns7__clearBreakpointsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__clearBreakpointsResponse(struct soap *soap, const char *URL, _ns7__clearBreakpointsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:clearBreakpointsResponse", p->soap_type() == SOAP_TYPE__ns7__clearBreakpointsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__clearBreakpointsResponse(struct soap *soap, const char *URL, _ns7__clearBreakpointsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:clearBreakpointsResponse", p->soap_type() == SOAP_TYPE__ns7__clearBreakpointsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__clearBreakpointsResponse * SOAP_FMAC4 soap_get__ns7__clearBreakpointsResponse(struct soap*, _ns7__clearBreakpointsResponse *, const char*, const char*);

inline int soap_read__ns7__clearBreakpointsResponse(struct soap *soap, _ns7__clearBreakpointsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__clearBreakpointsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__clearBreakpointsResponse(struct soap *soap, const char *URL, _ns7__clearBreakpointsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__clearBreakpointsResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__clearBreakpointsResponse(struct soap *soap, _ns7__clearBreakpointsResponse *p)
{
	if (soap_read__ns7__clearBreakpointsResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__clearBreakpoints_DEFINED
#define SOAP_TYPE__ns7__clearBreakpoints_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__clearBreakpoints(struct soap*, const char*, int, const _ns7__clearBreakpoints *, const char*);
SOAP_FMAC3 _ns7__clearBreakpoints * SOAP_FMAC4 soap_in__ns7__clearBreakpoints(struct soap*, const char*, _ns7__clearBreakpoints *, const char*);
SOAP_FMAC1 _ns7__clearBreakpoints * SOAP_FMAC2 soap_instantiate__ns7__clearBreakpoints(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__clearBreakpoints * soap_new__ns7__clearBreakpoints(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__clearBreakpoints(soap, n, NULL, NULL, NULL);
}

inline _ns7__clearBreakpoints * soap_new_req__ns7__clearBreakpoints(
	struct soap *soap,
	ns7__SoapBreakpoints *breakpoints)
{
	_ns7__clearBreakpoints *_p = soap_new__ns7__clearBreakpoints(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__clearBreakpoints::breakpoints = breakpoints;
	}
	return _p;
}

inline _ns7__clearBreakpoints * soap_new_set__ns7__clearBreakpoints(
	struct soap *soap,
	ns7__SoapBreakpoints *breakpoints)
{
	_ns7__clearBreakpoints *_p = soap_new__ns7__clearBreakpoints(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__clearBreakpoints::breakpoints = breakpoints;
	}
	return _p;
}

inline int soap_write__ns7__clearBreakpoints(struct soap *soap, _ns7__clearBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:clearBreakpoints", p->soap_type() == SOAP_TYPE__ns7__clearBreakpoints ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__clearBreakpoints(struct soap *soap, const char *URL, _ns7__clearBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:clearBreakpoints", p->soap_type() == SOAP_TYPE__ns7__clearBreakpoints ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__clearBreakpoints(struct soap *soap, const char *URL, _ns7__clearBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:clearBreakpoints", p->soap_type() == SOAP_TYPE__ns7__clearBreakpoints ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__clearBreakpoints * SOAP_FMAC4 soap_get__ns7__clearBreakpoints(struct soap*, _ns7__clearBreakpoints *, const char*, const char*);

inline int soap_read__ns7__clearBreakpoints(struct soap *soap, _ns7__clearBreakpoints *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__clearBreakpoints(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__clearBreakpoints(struct soap *soap, const char *URL, _ns7__clearBreakpoints *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__clearBreakpoints(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__clearBreakpoints(struct soap *soap, _ns7__clearBreakpoints *p)
{
	if (soap_read__ns7__clearBreakpoints(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__getBreakpointsResponse_DEFINED
#define SOAP_TYPE__ns7__getBreakpointsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__getBreakpointsResponse(struct soap*, const char*, int, const _ns7__getBreakpointsResponse *, const char*);
SOAP_FMAC3 _ns7__getBreakpointsResponse * SOAP_FMAC4 soap_in__ns7__getBreakpointsResponse(struct soap*, const char*, _ns7__getBreakpointsResponse *, const char*);
SOAP_FMAC1 _ns7__getBreakpointsResponse * SOAP_FMAC2 soap_instantiate__ns7__getBreakpointsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__getBreakpointsResponse * soap_new__ns7__getBreakpointsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__getBreakpointsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__getBreakpointsResponse * soap_new_req__ns7__getBreakpointsResponse(
	struct soap *soap,
	ns7__SoapBreakpoints *breakpoints)
{
	_ns7__getBreakpointsResponse *_p = soap_new__ns7__getBreakpointsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__getBreakpointsResponse::breakpoints = breakpoints;
	}
	return _p;
}

inline _ns7__getBreakpointsResponse * soap_new_set__ns7__getBreakpointsResponse(
	struct soap *soap,
	ns7__SoapBreakpoints *breakpoints)
{
	_ns7__getBreakpointsResponse *_p = soap_new__ns7__getBreakpointsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__getBreakpointsResponse::breakpoints = breakpoints;
	}
	return _p;
}

inline int soap_write__ns7__getBreakpointsResponse(struct soap *soap, _ns7__getBreakpointsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getBreakpointsResponse", p->soap_type() == SOAP_TYPE__ns7__getBreakpointsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__getBreakpointsResponse(struct soap *soap, const char *URL, _ns7__getBreakpointsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getBreakpointsResponse", p->soap_type() == SOAP_TYPE__ns7__getBreakpointsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__getBreakpointsResponse(struct soap *soap, const char *URL, _ns7__getBreakpointsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getBreakpointsResponse", p->soap_type() == SOAP_TYPE__ns7__getBreakpointsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__getBreakpointsResponse * SOAP_FMAC4 soap_get__ns7__getBreakpointsResponse(struct soap*, _ns7__getBreakpointsResponse *, const char*, const char*);

inline int soap_read__ns7__getBreakpointsResponse(struct soap *soap, _ns7__getBreakpointsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__getBreakpointsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__getBreakpointsResponse(struct soap *soap, const char *URL, _ns7__getBreakpointsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__getBreakpointsResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__getBreakpointsResponse(struct soap *soap, _ns7__getBreakpointsResponse *p)
{
	if (soap_read__ns7__getBreakpointsResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__getBreakpoints_DEFINED
#define SOAP_TYPE__ns7__getBreakpoints_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__getBreakpoints(struct soap*, const char*, int, const _ns7__getBreakpoints *, const char*);
SOAP_FMAC3 _ns7__getBreakpoints * SOAP_FMAC4 soap_in__ns7__getBreakpoints(struct soap*, const char*, _ns7__getBreakpoints *, const char*);
SOAP_FMAC1 _ns7__getBreakpoints * SOAP_FMAC2 soap_instantiate__ns7__getBreakpoints(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__getBreakpoints * soap_new__ns7__getBreakpoints(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__getBreakpoints(soap, n, NULL, NULL, NULL);
}

inline _ns7__getBreakpoints * soap_new_req__ns7__getBreakpoints(
	struct soap *soap)
{
	_ns7__getBreakpoints *_p = soap_new__ns7__getBreakpoints(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns7__getBreakpoints * soap_new_set__ns7__getBreakpoints(
	struct soap *soap)
{
	_ns7__getBreakpoints *_p = soap_new__ns7__getBreakpoints(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns7__getBreakpoints(struct soap *soap, _ns7__getBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getBreakpoints", p->soap_type() == SOAP_TYPE__ns7__getBreakpoints ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__getBreakpoints(struct soap *soap, const char *URL, _ns7__getBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getBreakpoints", p->soap_type() == SOAP_TYPE__ns7__getBreakpoints ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__getBreakpoints(struct soap *soap, const char *URL, _ns7__getBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:getBreakpoints", p->soap_type() == SOAP_TYPE__ns7__getBreakpoints ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__getBreakpoints * SOAP_FMAC4 soap_get__ns7__getBreakpoints(struct soap*, _ns7__getBreakpoints *, const char*, const char*);

inline int soap_read__ns7__getBreakpoints(struct soap *soap, _ns7__getBreakpoints *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__getBreakpoints(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__getBreakpoints(struct soap *soap, const char *URL, _ns7__getBreakpoints *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__getBreakpoints(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__getBreakpoints(struct soap *soap, _ns7__getBreakpoints *p)
{
	if (soap_read__ns7__getBreakpoints(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__setBreakpointsResponse_DEFINED
#define SOAP_TYPE__ns7__setBreakpointsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__setBreakpointsResponse(struct soap*, const char*, int, const _ns7__setBreakpointsResponse *, const char*);
SOAP_FMAC3 _ns7__setBreakpointsResponse * SOAP_FMAC4 soap_in__ns7__setBreakpointsResponse(struct soap*, const char*, _ns7__setBreakpointsResponse *, const char*);
SOAP_FMAC1 _ns7__setBreakpointsResponse * SOAP_FMAC2 soap_instantiate__ns7__setBreakpointsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__setBreakpointsResponse * soap_new__ns7__setBreakpointsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__setBreakpointsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns7__setBreakpointsResponse * soap_new_req__ns7__setBreakpointsResponse(
	struct soap *soap,
	ns7__BreakpointsResponses *out)
{
	_ns7__setBreakpointsResponse *_p = soap_new__ns7__setBreakpointsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__setBreakpointsResponse::out = out;
	}
	return _p;
}

inline _ns7__setBreakpointsResponse * soap_new_set__ns7__setBreakpointsResponse(
	struct soap *soap,
	ns7__BreakpointsResponses *out)
{
	_ns7__setBreakpointsResponse *_p = soap_new__ns7__setBreakpointsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__setBreakpointsResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns7__setBreakpointsResponse(struct soap *soap, _ns7__setBreakpointsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:setBreakpointsResponse", p->soap_type() == SOAP_TYPE__ns7__setBreakpointsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__setBreakpointsResponse(struct soap *soap, const char *URL, _ns7__setBreakpointsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:setBreakpointsResponse", p->soap_type() == SOAP_TYPE__ns7__setBreakpointsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__setBreakpointsResponse(struct soap *soap, const char *URL, _ns7__setBreakpointsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:setBreakpointsResponse", p->soap_type() == SOAP_TYPE__ns7__setBreakpointsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__setBreakpointsResponse * SOAP_FMAC4 soap_get__ns7__setBreakpointsResponse(struct soap*, _ns7__setBreakpointsResponse *, const char*, const char*);

inline int soap_read__ns7__setBreakpointsResponse(struct soap *soap, _ns7__setBreakpointsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__setBreakpointsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__setBreakpointsResponse(struct soap *soap, const char *URL, _ns7__setBreakpointsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__setBreakpointsResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__setBreakpointsResponse(struct soap *soap, _ns7__setBreakpointsResponse *p)
{
	if (soap_read__ns7__setBreakpointsResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns7__setBreakpoints_DEFINED
#define SOAP_TYPE__ns7__setBreakpoints_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__setBreakpoints(struct soap*, const char*, int, const _ns7__setBreakpoints *, const char*);
SOAP_FMAC3 _ns7__setBreakpoints * SOAP_FMAC4 soap_in__ns7__setBreakpoints(struct soap*, const char*, _ns7__setBreakpoints *, const char*);
SOAP_FMAC1 _ns7__setBreakpoints * SOAP_FMAC2 soap_instantiate__ns7__setBreakpoints(struct soap*, int, const char*, const char*, size_t*);

inline _ns7__setBreakpoints * soap_new__ns7__setBreakpoints(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns7__setBreakpoints(soap, n, NULL, NULL, NULL);
}

inline _ns7__setBreakpoints * soap_new_req__ns7__setBreakpoints(
	struct soap *soap,
	ns7__SoapBreakpoints *breakpoints)
{
	_ns7__setBreakpoints *_p = soap_new__ns7__setBreakpoints(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__setBreakpoints::breakpoints = breakpoints;
	}
	return _p;
}

inline _ns7__setBreakpoints * soap_new_set__ns7__setBreakpoints(
	struct soap *soap,
	ns7__SoapBreakpoints *breakpoints)
{
	_ns7__setBreakpoints *_p = soap_new__ns7__setBreakpoints(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns7__setBreakpoints::breakpoints = breakpoints;
	}
	return _p;
}

inline int soap_write__ns7__setBreakpoints(struct soap *soap, _ns7__setBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:setBreakpoints", p->soap_type() == SOAP_TYPE__ns7__setBreakpoints ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns7__setBreakpoints(struct soap *soap, const char *URL, _ns7__setBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:setBreakpoints", p->soap_type() == SOAP_TYPE__ns7__setBreakpoints ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns7__setBreakpoints(struct soap *soap, const char *URL, _ns7__setBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:setBreakpoints", p->soap_type() == SOAP_TYPE__ns7__setBreakpoints ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns7__setBreakpoints * SOAP_FMAC4 soap_get__ns7__setBreakpoints(struct soap*, _ns7__setBreakpoints *, const char*, const char*);

inline int soap_read__ns7__setBreakpoints(struct soap *soap, _ns7__setBreakpoints *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns7__setBreakpoints(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns7__setBreakpoints(struct soap *soap, const char *URL, _ns7__setBreakpoints *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns7__setBreakpoints(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns7__setBreakpoints(struct soap *soap, _ns7__setBreakpoints *p)
{
	if (soap_read__ns7__setBreakpoints(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapDhParametersArray_DEFINED
#define SOAP_TYPE_ns7__SoapDhParametersArray_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapDhParametersArray(struct soap*, const char*, int, const ns7__SoapDhParametersArray *, const char*);
SOAP_FMAC3 ns7__SoapDhParametersArray * SOAP_FMAC4 soap_in_ns7__SoapDhParametersArray(struct soap*, const char*, ns7__SoapDhParametersArray *, const char*);
SOAP_FMAC1 ns7__SoapDhParametersArray * SOAP_FMAC2 soap_instantiate_ns7__SoapDhParametersArray(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SoapDhParametersArray * soap_new_ns7__SoapDhParametersArray(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__SoapDhParametersArray(soap, n, NULL, NULL, NULL);
}

inline ns7__SoapDhParametersArray * soap_new_req_ns7__SoapDhParametersArray(
	struct soap *soap)
{
	ns7__SoapDhParametersArray *_p = soap_new_ns7__SoapDhParametersArray(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns7__SoapDhParametersArray * soap_new_set_ns7__SoapDhParametersArray(
	struct soap *soap,
	const std::vector<ns7__SoapDhParameters *> & DhParameters)
{
	ns7__SoapDhParametersArray *_p = soap_new_ns7__SoapDhParametersArray(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapDhParametersArray::DhParameters = DhParameters;
	}
	return _p;
}

inline int soap_write_ns7__SoapDhParametersArray(struct soap *soap, ns7__SoapDhParametersArray const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapDhParametersArray", p->soap_type() == SOAP_TYPE_ns7__SoapDhParametersArray ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapDhParametersArray(struct soap *soap, const char *URL, ns7__SoapDhParametersArray const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapDhParametersArray", p->soap_type() == SOAP_TYPE_ns7__SoapDhParametersArray ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapDhParametersArray(struct soap *soap, const char *URL, ns7__SoapDhParametersArray const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapDhParametersArray", p->soap_type() == SOAP_TYPE_ns7__SoapDhParametersArray ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SoapDhParametersArray * SOAP_FMAC4 soap_get_ns7__SoapDhParametersArray(struct soap*, ns7__SoapDhParametersArray *, const char*, const char*);

inline int soap_read_ns7__SoapDhParametersArray(struct soap *soap, ns7__SoapDhParametersArray *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SoapDhParametersArray(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapDhParametersArray(struct soap *soap, const char *URL, ns7__SoapDhParametersArray *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapDhParametersArray(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapDhParametersArray(struct soap *soap, ns7__SoapDhParametersArray *p)
{
	if (soap_read_ns7__SoapDhParametersArray(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapDhParameters_DEFINED
#define SOAP_TYPE_ns7__SoapDhParameters_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapDhParameters(struct soap*, const char*, int, const ns7__SoapDhParameters *, const char*);
SOAP_FMAC3 ns7__SoapDhParameters * SOAP_FMAC4 soap_in_ns7__SoapDhParameters(struct soap*, const char*, ns7__SoapDhParameters *, const char*);
SOAP_FMAC1 ns7__SoapDhParameters * SOAP_FMAC2 soap_instantiate_ns7__SoapDhParameters(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SoapDhParameters * soap_new_ns7__SoapDhParameters(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__SoapDhParameters(soap, n, NULL, NULL, NULL);
}

inline ns7__SoapDhParameters * soap_new_req_ns7__SoapDhParameters(
	struct soap *soap,
	double theta,
	double d,
	double a,
	double alpha,
	double beta)
{
	ns7__SoapDhParameters *_p = soap_new_ns7__SoapDhParameters(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapDhParameters::theta = theta;
		_p->ns7__SoapDhParameters::d = d;
		_p->ns7__SoapDhParameters::a = a;
		_p->ns7__SoapDhParameters::alpha = alpha;
		_p->ns7__SoapDhParameters::beta = beta;
	}
	return _p;
}

inline ns7__SoapDhParameters * soap_new_set_ns7__SoapDhParameters(
	struct soap *soap,
	double theta,
	double d,
	double a,
	double alpha,
	double beta)
{
	ns7__SoapDhParameters *_p = soap_new_ns7__SoapDhParameters(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapDhParameters::theta = theta;
		_p->ns7__SoapDhParameters::d = d;
		_p->ns7__SoapDhParameters::a = a;
		_p->ns7__SoapDhParameters::alpha = alpha;
		_p->ns7__SoapDhParameters::beta = beta;
	}
	return _p;
}

inline int soap_write_ns7__SoapDhParameters(struct soap *soap, ns7__SoapDhParameters const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapDhParameters", p->soap_type() == SOAP_TYPE_ns7__SoapDhParameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapDhParameters(struct soap *soap, const char *URL, ns7__SoapDhParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapDhParameters", p->soap_type() == SOAP_TYPE_ns7__SoapDhParameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapDhParameters(struct soap *soap, const char *URL, ns7__SoapDhParameters const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapDhParameters", p->soap_type() == SOAP_TYPE_ns7__SoapDhParameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SoapDhParameters * SOAP_FMAC4 soap_get_ns7__SoapDhParameters(struct soap*, ns7__SoapDhParameters *, const char*, const char*);

inline int soap_read_ns7__SoapDhParameters(struct soap *soap, ns7__SoapDhParameters *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SoapDhParameters(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapDhParameters(struct soap *soap, const char *URL, ns7__SoapDhParameters *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapDhParameters(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapDhParameters(struct soap *soap, ns7__SoapDhParameters *p)
{
	if (soap_read_ns7__SoapDhParameters(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapPhysicalIoUnlockResponses_DEFINED
#define SOAP_TYPE_ns7__SoapPhysicalIoUnlockResponses_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapPhysicalIoUnlockResponses(struct soap*, const char*, int, const ns7__SoapPhysicalIoUnlockResponses *, const char*);
SOAP_FMAC3 ns7__SoapPhysicalIoUnlockResponses * SOAP_FMAC4 soap_in_ns7__SoapPhysicalIoUnlockResponses(struct soap*, const char*, ns7__SoapPhysicalIoUnlockResponses *, const char*);
SOAP_FMAC1 ns7__SoapPhysicalIoUnlockResponses * SOAP_FMAC2 soap_instantiate_ns7__SoapPhysicalIoUnlockResponses(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SoapPhysicalIoUnlockResponses * soap_new_ns7__SoapPhysicalIoUnlockResponses(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__SoapPhysicalIoUnlockResponses(soap, n, NULL, NULL, NULL);
}

inline ns7__SoapPhysicalIoUnlockResponses * soap_new_req_ns7__SoapPhysicalIoUnlockResponses(
	struct soap *soap)
{
	ns7__SoapPhysicalIoUnlockResponses *_p = soap_new_ns7__SoapPhysicalIoUnlockResponses(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns7__SoapPhysicalIoUnlockResponses * soap_new_set_ns7__SoapPhysicalIoUnlockResponses(
	struct soap *soap,
	const std::vector<ns7__SoapPhysicalIoUnlockResponse *> & PhysicalIoResponse)
{
	ns7__SoapPhysicalIoUnlockResponses *_p = soap_new_ns7__SoapPhysicalIoUnlockResponses(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapPhysicalIoUnlockResponses::PhysicalIoResponse = PhysicalIoResponse;
	}
	return _p;
}

inline int soap_write_ns7__SoapPhysicalIoUnlockResponses(struct soap *soap, ns7__SoapPhysicalIoUnlockResponses const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoUnlockResponses", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoUnlockResponses ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapPhysicalIoUnlockResponses(struct soap *soap, const char *URL, ns7__SoapPhysicalIoUnlockResponses const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoUnlockResponses", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoUnlockResponses ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapPhysicalIoUnlockResponses(struct soap *soap, const char *URL, ns7__SoapPhysicalIoUnlockResponses const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoUnlockResponses", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoUnlockResponses ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SoapPhysicalIoUnlockResponses * SOAP_FMAC4 soap_get_ns7__SoapPhysicalIoUnlockResponses(struct soap*, ns7__SoapPhysicalIoUnlockResponses *, const char*, const char*);

inline int soap_read_ns7__SoapPhysicalIoUnlockResponses(struct soap *soap, ns7__SoapPhysicalIoUnlockResponses *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SoapPhysicalIoUnlockResponses(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapPhysicalIoUnlockResponses(struct soap *soap, const char *URL, ns7__SoapPhysicalIoUnlockResponses *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapPhysicalIoUnlockResponses(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapPhysicalIoUnlockResponses(struct soap *soap, ns7__SoapPhysicalIoUnlockResponses *p)
{
	if (soap_read_ns7__SoapPhysicalIoUnlockResponses(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapPhysicalIoUnlockResponse_DEFINED
#define SOAP_TYPE_ns7__SoapPhysicalIoUnlockResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapPhysicalIoUnlockResponse(struct soap*, const char*, int, const ns7__SoapPhysicalIoUnlockResponse *, const char*);
SOAP_FMAC3 ns7__SoapPhysicalIoUnlockResponse * SOAP_FMAC4 soap_in_ns7__SoapPhysicalIoUnlockResponse(struct soap*, const char*, ns7__SoapPhysicalIoUnlockResponse *, const char*);
SOAP_FMAC1 ns7__SoapPhysicalIoUnlockResponse * SOAP_FMAC2 soap_instantiate_ns7__SoapPhysicalIoUnlockResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SoapPhysicalIoUnlockResponse * soap_new_ns7__SoapPhysicalIoUnlockResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__SoapPhysicalIoUnlockResponse(soap, n, NULL, NULL, NULL);
}

inline ns7__SoapPhysicalIoUnlockResponse * soap_new_req_ns7__SoapPhysicalIoUnlockResponse(
	struct soap *soap,
	ns7__SoapPhysicalIoResponse *response,
	ns7__SoapPhysicalIoState *state)
{
	ns7__SoapPhysicalIoUnlockResponse *_p = soap_new_ns7__SoapPhysicalIoUnlockResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapPhysicalIoUnlockResponse::response = response;
		_p->ns7__SoapPhysicalIoUnlockResponse::state = state;
	}
	return _p;
}

inline ns7__SoapPhysicalIoUnlockResponse * soap_new_set_ns7__SoapPhysicalIoUnlockResponse(
	struct soap *soap,
	ns7__SoapPhysicalIoResponse *response,
	ns7__SoapPhysicalIoState *state)
{
	ns7__SoapPhysicalIoUnlockResponse *_p = soap_new_ns7__SoapPhysicalIoUnlockResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapPhysicalIoUnlockResponse::response = response;
		_p->ns7__SoapPhysicalIoUnlockResponse::state = state;
	}
	return _p;
}

inline int soap_write_ns7__SoapPhysicalIoUnlockResponse(struct soap *soap, ns7__SoapPhysicalIoUnlockResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoUnlockResponse", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoUnlockResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapPhysicalIoUnlockResponse(struct soap *soap, const char *URL, ns7__SoapPhysicalIoUnlockResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoUnlockResponse", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoUnlockResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapPhysicalIoUnlockResponse(struct soap *soap, const char *URL, ns7__SoapPhysicalIoUnlockResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoUnlockResponse", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoUnlockResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SoapPhysicalIoUnlockResponse * SOAP_FMAC4 soap_get_ns7__SoapPhysicalIoUnlockResponse(struct soap*, ns7__SoapPhysicalIoUnlockResponse *, const char*, const char*);

inline int soap_read_ns7__SoapPhysicalIoUnlockResponse(struct soap *soap, ns7__SoapPhysicalIoUnlockResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SoapPhysicalIoUnlockResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapPhysicalIoUnlockResponse(struct soap *soap, const char *URL, ns7__SoapPhysicalIoUnlockResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapPhysicalIoUnlockResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapPhysicalIoUnlockResponse(struct soap *soap, ns7__SoapPhysicalIoUnlockResponse *p)
{
	if (soap_read_ns7__SoapPhysicalIoUnlockResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapPhysicalIoResponses_DEFINED
#define SOAP_TYPE_ns7__SoapPhysicalIoResponses_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapPhysicalIoResponses(struct soap*, const char*, int, const ns7__SoapPhysicalIoResponses *, const char*);
SOAP_FMAC3 ns7__SoapPhysicalIoResponses * SOAP_FMAC4 soap_in_ns7__SoapPhysicalIoResponses(struct soap*, const char*, ns7__SoapPhysicalIoResponses *, const char*);
SOAP_FMAC1 ns7__SoapPhysicalIoResponses * SOAP_FMAC2 soap_instantiate_ns7__SoapPhysicalIoResponses(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SoapPhysicalIoResponses * soap_new_ns7__SoapPhysicalIoResponses(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__SoapPhysicalIoResponses(soap, n, NULL, NULL, NULL);
}

inline ns7__SoapPhysicalIoResponses * soap_new_req_ns7__SoapPhysicalIoResponses(
	struct soap *soap)
{
	ns7__SoapPhysicalIoResponses *_p = soap_new_ns7__SoapPhysicalIoResponses(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns7__SoapPhysicalIoResponses * soap_new_set_ns7__SoapPhysicalIoResponses(
	struct soap *soap,
	const std::vector<ns7__SoapPhysicalIoResponse *> & PhysicalIoResponse)
{
	ns7__SoapPhysicalIoResponses *_p = soap_new_ns7__SoapPhysicalIoResponses(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapPhysicalIoResponses::PhysicalIoResponse = PhysicalIoResponse;
	}
	return _p;
}

inline int soap_write_ns7__SoapPhysicalIoResponses(struct soap *soap, ns7__SoapPhysicalIoResponses const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoResponses", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoResponses ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapPhysicalIoResponses(struct soap *soap, const char *URL, ns7__SoapPhysicalIoResponses const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoResponses", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoResponses ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapPhysicalIoResponses(struct soap *soap, const char *URL, ns7__SoapPhysicalIoResponses const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoResponses", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoResponses ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SoapPhysicalIoResponses * SOAP_FMAC4 soap_get_ns7__SoapPhysicalIoResponses(struct soap*, ns7__SoapPhysicalIoResponses *, const char*, const char*);

inline int soap_read_ns7__SoapPhysicalIoResponses(struct soap *soap, ns7__SoapPhysicalIoResponses *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SoapPhysicalIoResponses(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapPhysicalIoResponses(struct soap *soap, const char *URL, ns7__SoapPhysicalIoResponses *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapPhysicalIoResponses(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapPhysicalIoResponses(struct soap *soap, ns7__SoapPhysicalIoResponses *p)
{
	if (soap_read_ns7__SoapPhysicalIoResponses(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapPhysicalIoResponse_DEFINED
#define SOAP_TYPE_ns7__SoapPhysicalIoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapPhysicalIoResponse(struct soap*, const char*, int, const ns7__SoapPhysicalIoResponse *, const char*);
SOAP_FMAC3 ns7__SoapPhysicalIoResponse * SOAP_FMAC4 soap_in_ns7__SoapPhysicalIoResponse(struct soap*, const char*, ns7__SoapPhysicalIoResponse *, const char*);
SOAP_FMAC1 ns7__SoapPhysicalIoResponse * SOAP_FMAC2 soap_instantiate_ns7__SoapPhysicalIoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SoapPhysicalIoResponse * soap_new_ns7__SoapPhysicalIoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__SoapPhysicalIoResponse(soap, n, NULL, NULL, NULL);
}

inline ns7__SoapPhysicalIoResponse * soap_new_req_ns7__SoapPhysicalIoResponse(
	struct soap *soap,
	bool success,
	bool found)
{
	ns7__SoapPhysicalIoResponse *_p = soap_new_ns7__SoapPhysicalIoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapPhysicalIoResponse::success = success;
		_p->ns7__SoapPhysicalIoResponse::found = found;
	}
	return _p;
}

inline ns7__SoapPhysicalIoResponse * soap_new_set_ns7__SoapPhysicalIoResponse(
	struct soap *soap,
	bool success,
	bool found)
{
	ns7__SoapPhysicalIoResponse *_p = soap_new_ns7__SoapPhysicalIoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapPhysicalIoResponse::success = success;
		_p->ns7__SoapPhysicalIoResponse::found = found;
	}
	return _p;
}

inline int soap_write_ns7__SoapPhysicalIoResponse(struct soap *soap, ns7__SoapPhysicalIoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoResponse", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapPhysicalIoResponse(struct soap *soap, const char *URL, ns7__SoapPhysicalIoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoResponse", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapPhysicalIoResponse(struct soap *soap, const char *URL, ns7__SoapPhysicalIoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoResponse", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SoapPhysicalIoResponse * SOAP_FMAC4 soap_get_ns7__SoapPhysicalIoResponse(struct soap*, ns7__SoapPhysicalIoResponse *, const char*, const char*);

inline int soap_read_ns7__SoapPhysicalIoResponse(struct soap *soap, ns7__SoapPhysicalIoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SoapPhysicalIoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapPhysicalIoResponse(struct soap *soap, const char *URL, ns7__SoapPhysicalIoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapPhysicalIoResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapPhysicalIoResponse(struct soap *soap, ns7__SoapPhysicalIoResponse *p)
{
	if (soap_read_ns7__SoapPhysicalIoResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapPhysicalIosStates_DEFINED
#define SOAP_TYPE_ns7__SoapPhysicalIosStates_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapPhysicalIosStates(struct soap*, const char*, int, const ns7__SoapPhysicalIosStates *, const char*);
SOAP_FMAC3 ns7__SoapPhysicalIosStates * SOAP_FMAC4 soap_in_ns7__SoapPhysicalIosStates(struct soap*, const char*, ns7__SoapPhysicalIosStates *, const char*);
SOAP_FMAC1 ns7__SoapPhysicalIosStates * SOAP_FMAC2 soap_instantiate_ns7__SoapPhysicalIosStates(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SoapPhysicalIosStates * soap_new_ns7__SoapPhysicalIosStates(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__SoapPhysicalIosStates(soap, n, NULL, NULL, NULL);
}

inline ns7__SoapPhysicalIosStates * soap_new_req_ns7__SoapPhysicalIosStates(
	struct soap *soap)
{
	ns7__SoapPhysicalIosStates *_p = soap_new_ns7__SoapPhysicalIosStates(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns7__SoapPhysicalIosStates * soap_new_set_ns7__SoapPhysicalIosStates(
	struct soap *soap,
	const std::vector<ns7__SoapPhysicalIoState *> & PhysicalIoState)
{
	ns7__SoapPhysicalIosStates *_p = soap_new_ns7__SoapPhysicalIosStates(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapPhysicalIosStates::PhysicalIoState = PhysicalIoState;
	}
	return _p;
}

inline int soap_write_ns7__SoapPhysicalIosStates(struct soap *soap, ns7__SoapPhysicalIosStates const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIosStates", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIosStates ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapPhysicalIosStates(struct soap *soap, const char *URL, ns7__SoapPhysicalIosStates const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIosStates", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIosStates ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapPhysicalIosStates(struct soap *soap, const char *URL, ns7__SoapPhysicalIosStates const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIosStates", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIosStates ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SoapPhysicalIosStates * SOAP_FMAC4 soap_get_ns7__SoapPhysicalIosStates(struct soap*, ns7__SoapPhysicalIosStates *, const char*, const char*);

inline int soap_read_ns7__SoapPhysicalIosStates(struct soap *soap, ns7__SoapPhysicalIosStates *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SoapPhysicalIosStates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapPhysicalIosStates(struct soap *soap, const char *URL, ns7__SoapPhysicalIosStates *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapPhysicalIosStates(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapPhysicalIosStates(struct soap *soap, ns7__SoapPhysicalIosStates *p)
{
	if (soap_read_ns7__SoapPhysicalIosStates(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapPhysicalIoValues_DEFINED
#define SOAP_TYPE_ns7__SoapPhysicalIoValues_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapPhysicalIoValues(struct soap*, const char*, int, const ns7__SoapPhysicalIoValues *, const char*);
SOAP_FMAC3 ns7__SoapPhysicalIoValues * SOAP_FMAC4 soap_in_ns7__SoapPhysicalIoValues(struct soap*, const char*, ns7__SoapPhysicalIoValues *, const char*);
SOAP_FMAC1 ns7__SoapPhysicalIoValues * SOAP_FMAC2 soap_instantiate_ns7__SoapPhysicalIoValues(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SoapPhysicalIoValues * soap_new_ns7__SoapPhysicalIoValues(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__SoapPhysicalIoValues(soap, n, NULL, NULL, NULL);
}

inline ns7__SoapPhysicalIoValues * soap_new_req_ns7__SoapPhysicalIoValues(
	struct soap *soap)
{
	ns7__SoapPhysicalIoValues *_p = soap_new_ns7__SoapPhysicalIoValues(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns7__SoapPhysicalIoValues * soap_new_set_ns7__SoapPhysicalIoValues(
	struct soap *soap,
	const std::vector<double> & PhysicalIoValue)
{
	ns7__SoapPhysicalIoValues *_p = soap_new_ns7__SoapPhysicalIoValues(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapPhysicalIoValues::PhysicalIoValue = PhysicalIoValue;
	}
	return _p;
}

inline int soap_write_ns7__SoapPhysicalIoValues(struct soap *soap, ns7__SoapPhysicalIoValues const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoValues", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoValues ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapPhysicalIoValues(struct soap *soap, const char *URL, ns7__SoapPhysicalIoValues const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoValues", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoValues ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapPhysicalIoValues(struct soap *soap, const char *URL, ns7__SoapPhysicalIoValues const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoValues", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoValues ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SoapPhysicalIoValues * SOAP_FMAC4 soap_get_ns7__SoapPhysicalIoValues(struct soap*, ns7__SoapPhysicalIoValues *, const char*, const char*);

inline int soap_read_ns7__SoapPhysicalIoValues(struct soap *soap, ns7__SoapPhysicalIoValues *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SoapPhysicalIoValues(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapPhysicalIoValues(struct soap *soap, const char *URL, ns7__SoapPhysicalIoValues *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapPhysicalIoValues(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapPhysicalIoValues(struct soap *soap, ns7__SoapPhysicalIoValues *p)
{
	if (soap_read_ns7__SoapPhysicalIoValues(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapPhysicalIoState_DEFINED
#define SOAP_TYPE_ns7__SoapPhysicalIoState_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapPhysicalIoState(struct soap*, const char*, int, const ns7__SoapPhysicalIoState *, const char*);
SOAP_FMAC3 ns7__SoapPhysicalIoState * SOAP_FMAC4 soap_in_ns7__SoapPhysicalIoState(struct soap*, const char*, ns7__SoapPhysicalIoState *, const char*);
SOAP_FMAC1 ns7__SoapPhysicalIoState * SOAP_FMAC2 soap_instantiate_ns7__SoapPhysicalIoState(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SoapPhysicalIoState * soap_new_ns7__SoapPhysicalIoState(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__SoapPhysicalIoState(soap, n, NULL, NULL, NULL);
}

inline ns7__SoapPhysicalIoState * soap_new_req_ns7__SoapPhysicalIoState(
	struct soap *soap,
	enum ns7__SoapPhysicalIoEnumState state,
	bool locked,
	bool simulated,
	double value,
	ns7__SoapPhysicalIoAttrib *attrib)
{
	ns7__SoapPhysicalIoState *_p = soap_new_ns7__SoapPhysicalIoState(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapPhysicalIoState::state = state;
		_p->ns7__SoapPhysicalIoState::locked = locked;
		_p->ns7__SoapPhysicalIoState::simulated = simulated;
		_p->ns7__SoapPhysicalIoState::value = value;
		_p->ns7__SoapPhysicalIoState::attrib = attrib;
	}
	return _p;
}

inline ns7__SoapPhysicalIoState * soap_new_set_ns7__SoapPhysicalIoState(
	struct soap *soap,
	enum ns7__SoapPhysicalIoEnumState state,
	bool locked,
	bool simulated,
	double value,
	std::string *description,
	ns7__SoapPhysicalIoAttrib *attrib)
{
	ns7__SoapPhysicalIoState *_p = soap_new_ns7__SoapPhysicalIoState(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapPhysicalIoState::state = state;
		_p->ns7__SoapPhysicalIoState::locked = locked;
		_p->ns7__SoapPhysicalIoState::simulated = simulated;
		_p->ns7__SoapPhysicalIoState::value = value;
		_p->ns7__SoapPhysicalIoState::description = description;
		_p->ns7__SoapPhysicalIoState::attrib = attrib;
	}
	return _p;
}

inline int soap_write_ns7__SoapPhysicalIoState(struct soap *soap, ns7__SoapPhysicalIoState const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoState", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoState ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapPhysicalIoState(struct soap *soap, const char *URL, ns7__SoapPhysicalIoState const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoState", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoState ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapPhysicalIoState(struct soap *soap, const char *URL, ns7__SoapPhysicalIoState const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoState", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoState ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SoapPhysicalIoState * SOAP_FMAC4 soap_get_ns7__SoapPhysicalIoState(struct soap*, ns7__SoapPhysicalIoState *, const char*, const char*);

inline int soap_read_ns7__SoapPhysicalIoState(struct soap *soap, ns7__SoapPhysicalIoState *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SoapPhysicalIoState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapPhysicalIoState(struct soap *soap, const char *URL, ns7__SoapPhysicalIoState *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapPhysicalIoState(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapPhysicalIoState(struct soap *soap, ns7__SoapPhysicalIoState *p)
{
	if (soap_read_ns7__SoapPhysicalIoState(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapPhysicalIoAttrib_DEFINED
#define SOAP_TYPE_ns7__SoapPhysicalIoAttrib_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapPhysicalIoAttrib(struct soap*, const char*, int, const ns7__SoapPhysicalIoAttrib *, const char*);
SOAP_FMAC3 ns7__SoapPhysicalIoAttrib * SOAP_FMAC4 soap_in_ns7__SoapPhysicalIoAttrib(struct soap*, const char*, ns7__SoapPhysicalIoAttrib *, const char*);
SOAP_FMAC1 ns7__SoapPhysicalIoAttrib * SOAP_FMAC2 soap_instantiate_ns7__SoapPhysicalIoAttrib(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SoapPhysicalIoAttrib * soap_new_ns7__SoapPhysicalIoAttrib(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__SoapPhysicalIoAttrib(soap, n, NULL, NULL, NULL);
}

inline ns7__SoapPhysicalIoAttrib * soap_new_req_ns7__SoapPhysicalIoAttrib(
	struct soap *soap,
	const union _ns7__union_SoapPhysicalIoAttrib& union_SoapPhysicalIoAttrib)
{
	ns7__SoapPhysicalIoAttrib *_p = soap_new_ns7__SoapPhysicalIoAttrib(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapPhysicalIoAttrib::union_SoapPhysicalIoAttrib = union_SoapPhysicalIoAttrib;
	}
	return _p;
}

inline ns7__SoapPhysicalIoAttrib * soap_new_set_ns7__SoapPhysicalIoAttrib(
	struct soap *soap,
	int __union_SoapPhysicalIoAttrib,
	const union _ns7__union_SoapPhysicalIoAttrib& union_SoapPhysicalIoAttrib)
{
	ns7__SoapPhysicalIoAttrib *_p = soap_new_ns7__SoapPhysicalIoAttrib(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapPhysicalIoAttrib::__union_SoapPhysicalIoAttrib = __union_SoapPhysicalIoAttrib;
		_p->ns7__SoapPhysicalIoAttrib::union_SoapPhysicalIoAttrib = union_SoapPhysicalIoAttrib;
	}
	return _p;
}

inline int soap_write_ns7__SoapPhysicalIoAttrib(struct soap *soap, ns7__SoapPhysicalIoAttrib const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoAttrib", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoAttrib ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapPhysicalIoAttrib(struct soap *soap, const char *URL, ns7__SoapPhysicalIoAttrib const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoAttrib", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoAttrib ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapPhysicalIoAttrib(struct soap *soap, const char *URL, ns7__SoapPhysicalIoAttrib const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoAttrib", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoAttrib ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SoapPhysicalIoAttrib * SOAP_FMAC4 soap_get_ns7__SoapPhysicalIoAttrib(struct soap*, ns7__SoapPhysicalIoAttrib *, const char*, const char*);

inline int soap_read_ns7__SoapPhysicalIoAttrib(struct soap *soap, ns7__SoapPhysicalIoAttrib *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SoapPhysicalIoAttrib(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapPhysicalIoAttrib(struct soap *soap, const char *URL, ns7__SoapPhysicalIoAttrib *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapPhysicalIoAttrib(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapPhysicalIoAttrib(struct soap *soap, ns7__SoapPhysicalIoAttrib *p)
{
	if (soap_read_ns7__SoapPhysicalIoAttrib(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapPhysicalAioAttrib_DEFINED
#define SOAP_TYPE_ns7__SoapPhysicalAioAttrib_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapPhysicalAioAttrib(struct soap*, const char*, int, const ns7__SoapPhysicalAioAttrib *, const char*);
SOAP_FMAC3 ns7__SoapPhysicalAioAttrib * SOAP_FMAC4 soap_in_ns7__SoapPhysicalAioAttrib(struct soap*, const char*, ns7__SoapPhysicalAioAttrib *, const char*);
SOAP_FMAC1 ns7__SoapPhysicalAioAttrib * SOAP_FMAC2 soap_instantiate_ns7__SoapPhysicalAioAttrib(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SoapPhysicalAioAttrib * soap_new_ns7__SoapPhysicalAioAttrib(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__SoapPhysicalAioAttrib(soap, n, NULL, NULL, NULL);
}

inline ns7__SoapPhysicalAioAttrib * soap_new_req_ns7__SoapPhysicalAioAttrib(
	struct soap *soap,
	double coefA,
	double coefB)
{
	ns7__SoapPhysicalAioAttrib *_p = soap_new_ns7__SoapPhysicalAioAttrib(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapPhysicalAioAttrib::coefA = coefA;
		_p->ns7__SoapPhysicalAioAttrib::coefB = coefB;
	}
	return _p;
}

inline ns7__SoapPhysicalAioAttrib * soap_new_set_ns7__SoapPhysicalAioAttrib(
	struct soap *soap,
	double coefA,
	double coefB)
{
	ns7__SoapPhysicalAioAttrib *_p = soap_new_ns7__SoapPhysicalAioAttrib(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapPhysicalAioAttrib::coefA = coefA;
		_p->ns7__SoapPhysicalAioAttrib::coefB = coefB;
	}
	return _p;
}

inline int soap_write_ns7__SoapPhysicalAioAttrib(struct soap *soap, ns7__SoapPhysicalAioAttrib const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalAioAttrib", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalAioAttrib ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapPhysicalAioAttrib(struct soap *soap, const char *URL, ns7__SoapPhysicalAioAttrib const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalAioAttrib", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalAioAttrib ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapPhysicalAioAttrib(struct soap *soap, const char *URL, ns7__SoapPhysicalAioAttrib const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalAioAttrib", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalAioAttrib ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SoapPhysicalAioAttrib * SOAP_FMAC4 soap_get_ns7__SoapPhysicalAioAttrib(struct soap*, ns7__SoapPhysicalAioAttrib *, const char*, const char*);

inline int soap_read_ns7__SoapPhysicalAioAttrib(struct soap *soap, ns7__SoapPhysicalAioAttrib *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SoapPhysicalAioAttrib(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapPhysicalAioAttrib(struct soap *soap, const char *URL, ns7__SoapPhysicalAioAttrib *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapPhysicalAioAttrib(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapPhysicalAioAttrib(struct soap *soap, ns7__SoapPhysicalAioAttrib *p)
{
	if (soap_read_ns7__SoapPhysicalAioAttrib(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapPhysicalDioAttrib_DEFINED
#define SOAP_TYPE_ns7__SoapPhysicalDioAttrib_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapPhysicalDioAttrib(struct soap*, const char*, int, const ns7__SoapPhysicalDioAttrib *, const char*);
SOAP_FMAC3 ns7__SoapPhysicalDioAttrib * SOAP_FMAC4 soap_in_ns7__SoapPhysicalDioAttrib(struct soap*, const char*, ns7__SoapPhysicalDioAttrib *, const char*);
SOAP_FMAC1 ns7__SoapPhysicalDioAttrib * SOAP_FMAC2 soap_instantiate_ns7__SoapPhysicalDioAttrib(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SoapPhysicalDioAttrib * soap_new_ns7__SoapPhysicalDioAttrib(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__SoapPhysicalDioAttrib(soap, n, NULL, NULL, NULL);
}

inline ns7__SoapPhysicalDioAttrib * soap_new_req_ns7__SoapPhysicalDioAttrib(
	struct soap *soap,
	bool inverted)
{
	ns7__SoapPhysicalDioAttrib *_p = soap_new_ns7__SoapPhysicalDioAttrib(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapPhysicalDioAttrib::inverted = inverted;
	}
	return _p;
}

inline ns7__SoapPhysicalDioAttrib * soap_new_set_ns7__SoapPhysicalDioAttrib(
	struct soap *soap,
	bool inverted)
{
	ns7__SoapPhysicalDioAttrib *_p = soap_new_ns7__SoapPhysicalDioAttrib(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapPhysicalDioAttrib::inverted = inverted;
	}
	return _p;
}

inline int soap_write_ns7__SoapPhysicalDioAttrib(struct soap *soap, ns7__SoapPhysicalDioAttrib const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalDioAttrib", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalDioAttrib ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapPhysicalDioAttrib(struct soap *soap, const char *URL, ns7__SoapPhysicalDioAttrib const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalDioAttrib", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalDioAttrib ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapPhysicalDioAttrib(struct soap *soap, const char *URL, ns7__SoapPhysicalDioAttrib const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalDioAttrib", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalDioAttrib ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SoapPhysicalDioAttrib * SOAP_FMAC4 soap_get_ns7__SoapPhysicalDioAttrib(struct soap*, ns7__SoapPhysicalDioAttrib *, const char*, const char*);

inline int soap_read_ns7__SoapPhysicalDioAttrib(struct soap *soap, ns7__SoapPhysicalDioAttrib *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SoapPhysicalDioAttrib(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapPhysicalDioAttrib(struct soap *soap, const char *URL, ns7__SoapPhysicalDioAttrib *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapPhysicalDioAttrib(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapPhysicalDioAttrib(struct soap *soap, ns7__SoapPhysicalDioAttrib *p)
{
	if (soap_read_ns7__SoapPhysicalDioAttrib(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapPhysicalIoLinks_DEFINED
#define SOAP_TYPE_ns7__SoapPhysicalIoLinks_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapPhysicalIoLinks(struct soap*, const char*, int, const ns7__SoapPhysicalIoLinks *, const char*);
SOAP_FMAC3 ns7__SoapPhysicalIoLinks * SOAP_FMAC4 soap_in_ns7__SoapPhysicalIoLinks(struct soap*, const char*, ns7__SoapPhysicalIoLinks *, const char*);
SOAP_FMAC1 ns7__SoapPhysicalIoLinks * SOAP_FMAC2 soap_instantiate_ns7__SoapPhysicalIoLinks(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SoapPhysicalIoLinks * soap_new_ns7__SoapPhysicalIoLinks(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__SoapPhysicalIoLinks(soap, n, NULL, NULL, NULL);
}

inline ns7__SoapPhysicalIoLinks * soap_new_req_ns7__SoapPhysicalIoLinks(
	struct soap *soap)
{
	ns7__SoapPhysicalIoLinks *_p = soap_new_ns7__SoapPhysicalIoLinks(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns7__SoapPhysicalIoLinks * soap_new_set_ns7__SoapPhysicalIoLinks(
	struct soap *soap,
	const std::vector<std::string> & PhysicalPath)
{
	ns7__SoapPhysicalIoLinks *_p = soap_new_ns7__SoapPhysicalIoLinks(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapPhysicalIoLinks::PhysicalPath = PhysicalPath;
	}
	return _p;
}

inline int soap_write_ns7__SoapPhysicalIoLinks(struct soap *soap, ns7__SoapPhysicalIoLinks const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoLinks", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoLinks ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapPhysicalIoLinks(struct soap *soap, const char *URL, ns7__SoapPhysicalIoLinks const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoLinks", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoLinks ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapPhysicalIoLinks(struct soap *soap, const char *URL, ns7__SoapPhysicalIoLinks const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapPhysicalIoLinks", p->soap_type() == SOAP_TYPE_ns7__SoapPhysicalIoLinks ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SoapPhysicalIoLinks * SOAP_FMAC4 soap_get_ns7__SoapPhysicalIoLinks(struct soap*, ns7__SoapPhysicalIoLinks *, const char*, const char*);

inline int soap_read_ns7__SoapPhysicalIoLinks(struct soap *soap, ns7__SoapPhysicalIoLinks *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SoapPhysicalIoLinks(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapPhysicalIoLinks(struct soap *soap, const char *URL, ns7__SoapPhysicalIoLinks *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapPhysicalIoLinks(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapPhysicalIoLinks(struct soap *soap, ns7__SoapPhysicalIoLinks *p)
{
	if (soap_read_ns7__SoapPhysicalIoLinks(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapWatches_DEFINED
#define SOAP_TYPE_ns7__SoapWatches_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapWatches(struct soap*, const char*, int, const ns7__SoapWatches *, const char*);
SOAP_FMAC3 ns7__SoapWatches * SOAP_FMAC4 soap_in_ns7__SoapWatches(struct soap*, const char*, ns7__SoapWatches *, const char*);
SOAP_FMAC1 ns7__SoapWatches * SOAP_FMAC2 soap_instantiate_ns7__SoapWatches(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SoapWatches * soap_new_ns7__SoapWatches(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__SoapWatches(soap, n, NULL, NULL, NULL);
}

inline ns7__SoapWatches * soap_new_req_ns7__SoapWatches(
	struct soap *soap)
{
	ns7__SoapWatches *_p = soap_new_ns7__SoapWatches(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns7__SoapWatches * soap_new_set_ns7__SoapWatches(
	struct soap *soap,
	const std::vector<ns7__SoapData *> & SoapData)
{
	ns7__SoapWatches *_p = soap_new_ns7__SoapWatches(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapWatches::SoapData = SoapData;
	}
	return _p;
}

inline int soap_write_ns7__SoapWatches(struct soap *soap, ns7__SoapWatches const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapWatches", p->soap_type() == SOAP_TYPE_ns7__SoapWatches ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapWatches(struct soap *soap, const char *URL, ns7__SoapWatches const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapWatches", p->soap_type() == SOAP_TYPE_ns7__SoapWatches ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapWatches(struct soap *soap, const char *URL, ns7__SoapWatches const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapWatches", p->soap_type() == SOAP_TYPE_ns7__SoapWatches ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SoapWatches * SOAP_FMAC4 soap_get_ns7__SoapWatches(struct soap*, ns7__SoapWatches *, const char*, const char*);

inline int soap_read_ns7__SoapWatches(struct soap *soap, ns7__SoapWatches *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SoapWatches(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapWatches(struct soap *soap, const char *URL, ns7__SoapWatches *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapWatches(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapWatches(struct soap *soap, ns7__SoapWatches *p)
{
	if (soap_read_ns7__SoapWatches(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapData_DEFINED
#define SOAP_TYPE_ns7__SoapData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapData(struct soap*, const char*, int, const ns7__SoapData *, const char*);
SOAP_FMAC3 ns7__SoapData * SOAP_FMAC4 soap_in_ns7__SoapData(struct soap*, const char*, ns7__SoapData *, const char*);
SOAP_FMAC1 ns7__SoapData * SOAP_FMAC2 soap_instantiate_ns7__SoapData(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SoapData * soap_new_ns7__SoapData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__SoapData(soap, n, NULL, NULL, NULL);
}

inline ns7__SoapData * soap_new_req_ns7__SoapData(
	struct soap *soap)
{
	ns7__SoapData *_p = soap_new_ns7__SoapData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns7__SoapData * soap_new_set_ns7__SoapData(
	struct soap *soap,
	std::string *appName,
	std::string *dataName,
	std::string *dataIndex)
{
	ns7__SoapData *_p = soap_new_ns7__SoapData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapData::appName = appName;
		_p->ns7__SoapData::dataName = dataName;
		_p->ns7__SoapData::dataIndex = dataIndex;
	}
	return _p;
}

inline int soap_write_ns7__SoapData(struct soap *soap, ns7__SoapData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapData", p->soap_type() == SOAP_TYPE_ns7__SoapData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapData(struct soap *soap, const char *URL, ns7__SoapData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapData", p->soap_type() == SOAP_TYPE_ns7__SoapData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapData(struct soap *soap, const char *URL, ns7__SoapData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapData", p->soap_type() == SOAP_TYPE_ns7__SoapData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SoapData * SOAP_FMAC4 soap_get_ns7__SoapData(struct soap*, ns7__SoapData *, const char*, const char*);

inline int soap_read_ns7__SoapData(struct soap *soap, ns7__SoapData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SoapData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapData(struct soap *soap, const char *URL, ns7__SoapData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapData(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapData(struct soap *soap, ns7__SoapData *p)
{
	if (soap_read_ns7__SoapData(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapCallStack_DEFINED
#define SOAP_TYPE_ns7__SoapCallStack_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapCallStack(struct soap*, const char*, int, const ns7__SoapCallStack *, const char*);
SOAP_FMAC3 ns7__SoapCallStack * SOAP_FMAC4 soap_in_ns7__SoapCallStack(struct soap*, const char*, ns7__SoapCallStack *, const char*);
SOAP_FMAC1 ns7__SoapCallStack * SOAP_FMAC2 soap_instantiate_ns7__SoapCallStack(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SoapCallStack * soap_new_ns7__SoapCallStack(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__SoapCallStack(soap, n, NULL, NULL, NULL);
}

inline ns7__SoapCallStack * soap_new_req_ns7__SoapCallStack(
	struct soap *soap)
{
	ns7__SoapCallStack *_p = soap_new_ns7__SoapCallStack(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns7__SoapCallStack * soap_new_set_ns7__SoapCallStack(
	struct soap *soap,
	const std::vector<ns7__SoapStackFrameAbstract *> & SfAbstract)
{
	ns7__SoapCallStack *_p = soap_new_ns7__SoapCallStack(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapCallStack::SfAbstract = SfAbstract;
	}
	return _p;
}

inline int soap_write_ns7__SoapCallStack(struct soap *soap, ns7__SoapCallStack const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapCallStack", p->soap_type() == SOAP_TYPE_ns7__SoapCallStack ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapCallStack(struct soap *soap, const char *URL, ns7__SoapCallStack const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapCallStack", p->soap_type() == SOAP_TYPE_ns7__SoapCallStack ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapCallStack(struct soap *soap, const char *URL, ns7__SoapCallStack const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapCallStack", p->soap_type() == SOAP_TYPE_ns7__SoapCallStack ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SoapCallStack * SOAP_FMAC4 soap_get_ns7__SoapCallStack(struct soap*, ns7__SoapCallStack *, const char*, const char*);

inline int soap_read_ns7__SoapCallStack(struct soap *soap, ns7__SoapCallStack *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SoapCallStack(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapCallStack(struct soap *soap, const char *URL, ns7__SoapCallStack *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapCallStack(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapCallStack(struct soap *soap, ns7__SoapCallStack *p)
{
	if (soap_read_ns7__SoapCallStack(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapStackFrameAbstract_DEFINED
#define SOAP_TYPE_ns7__SoapStackFrameAbstract_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapStackFrameAbstract(struct soap*, const char*, int, const ns7__SoapStackFrameAbstract *, const char*);
SOAP_FMAC3 ns7__SoapStackFrameAbstract * SOAP_FMAC4 soap_in_ns7__SoapStackFrameAbstract(struct soap*, const char*, ns7__SoapStackFrameAbstract *, const char*);
SOAP_FMAC1 ns7__SoapStackFrameAbstract * SOAP_FMAC2 soap_instantiate_ns7__SoapStackFrameAbstract(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SoapStackFrameAbstract * soap_new_ns7__SoapStackFrameAbstract(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__SoapStackFrameAbstract(soap, n, NULL, NULL, NULL);
}

inline ns7__SoapStackFrameAbstract * soap_new_req_ns7__SoapStackFrameAbstract(
	struct soap *soap,
	ns7__SoapInstruction *currentInstruction)
{
	ns7__SoapStackFrameAbstract *_p = soap_new_ns7__SoapStackFrameAbstract(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapStackFrameAbstract::currentInstruction = currentInstruction;
	}
	return _p;
}

inline ns7__SoapStackFrameAbstract * soap_new_set_ns7__SoapStackFrameAbstract(
	struct soap *soap,
	ns7__SoapInstruction *currentInstruction)
{
	ns7__SoapStackFrameAbstract *_p = soap_new_ns7__SoapStackFrameAbstract(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapStackFrameAbstract::currentInstruction = currentInstruction;
	}
	return _p;
}

inline int soap_write_ns7__SoapStackFrameAbstract(struct soap *soap, ns7__SoapStackFrameAbstract const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapStackFrameAbstract", p->soap_type() == SOAP_TYPE_ns7__SoapStackFrameAbstract ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapStackFrameAbstract(struct soap *soap, const char *URL, ns7__SoapStackFrameAbstract const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapStackFrameAbstract", p->soap_type() == SOAP_TYPE_ns7__SoapStackFrameAbstract ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapStackFrameAbstract(struct soap *soap, const char *URL, ns7__SoapStackFrameAbstract const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapStackFrameAbstract", p->soap_type() == SOAP_TYPE_ns7__SoapStackFrameAbstract ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SoapStackFrameAbstract * SOAP_FMAC4 soap_get_ns7__SoapStackFrameAbstract(struct soap*, ns7__SoapStackFrameAbstract *, const char*, const char*);

inline int soap_read_ns7__SoapStackFrameAbstract(struct soap *soap, ns7__SoapStackFrameAbstract *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SoapStackFrameAbstract(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapStackFrameAbstract(struct soap *soap, const char *URL, ns7__SoapStackFrameAbstract *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapStackFrameAbstract(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapStackFrameAbstract(struct soap *soap, ns7__SoapStackFrameAbstract *p)
{
	if (soap_read_ns7__SoapStackFrameAbstract(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapInstruction_DEFINED
#define SOAP_TYPE_ns7__SoapInstruction_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapInstruction(struct soap*, const char*, int, const ns7__SoapInstruction *, const char*);
SOAP_FMAC3 ns7__SoapInstruction * SOAP_FMAC4 soap_in_ns7__SoapInstruction(struct soap*, const char*, ns7__SoapInstruction *, const char*);
SOAP_FMAC1 ns7__SoapInstruction * SOAP_FMAC2 soap_instantiate_ns7__SoapInstruction(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SoapInstruction * soap_new_ns7__SoapInstruction(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__SoapInstruction(soap, n, NULL, NULL, NULL);
}

inline ns7__SoapInstruction * soap_new_req_ns7__SoapInstruction(
	struct soap *soap,
	ns7__SoapProgramLine *programLine)
{
	ns7__SoapInstruction *_p = soap_new_ns7__SoapInstruction(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapInstruction::programLine = programLine;
	}
	return _p;
}

inline ns7__SoapInstruction * soap_new_set_ns7__SoapInstruction(
	struct soap *soap,
	ns7__SoapProgramLine *programLine)
{
	ns7__SoapInstruction *_p = soap_new_ns7__SoapInstruction(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapInstruction::programLine = programLine;
	}
	return _p;
}

inline int soap_write_ns7__SoapInstruction(struct soap *soap, ns7__SoapInstruction const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapInstruction", p->soap_type() == SOAP_TYPE_ns7__SoapInstruction ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapInstruction(struct soap *soap, const char *URL, ns7__SoapInstruction const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapInstruction", p->soap_type() == SOAP_TYPE_ns7__SoapInstruction ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapInstruction(struct soap *soap, const char *URL, ns7__SoapInstruction const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapInstruction", p->soap_type() == SOAP_TYPE_ns7__SoapInstruction ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SoapInstruction * SOAP_FMAC4 soap_get_ns7__SoapInstruction(struct soap*, ns7__SoapInstruction *, const char*, const char*);

inline int soap_read_ns7__SoapInstruction(struct soap *soap, ns7__SoapInstruction *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SoapInstruction(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapInstruction(struct soap *soap, const char *URL, ns7__SoapInstruction *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapInstruction(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapInstruction(struct soap *soap, ns7__SoapInstruction *p)
{
	if (soap_read_ns7__SoapInstruction(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapTasks_DEFINED
#define SOAP_TYPE_ns7__SoapTasks_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapTasks(struct soap*, const char*, int, const ns7__SoapTasks *, const char*);
SOAP_FMAC3 ns7__SoapTasks * SOAP_FMAC4 soap_in_ns7__SoapTasks(struct soap*, const char*, ns7__SoapTasks *, const char*);
SOAP_FMAC1 ns7__SoapTasks * SOAP_FMAC2 soap_instantiate_ns7__SoapTasks(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SoapTasks * soap_new_ns7__SoapTasks(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__SoapTasks(soap, n, NULL, NULL, NULL);
}

inline ns7__SoapTasks * soap_new_req_ns7__SoapTasks(
	struct soap *soap)
{
	ns7__SoapTasks *_p = soap_new_ns7__SoapTasks(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns7__SoapTasks * soap_new_set_ns7__SoapTasks(
	struct soap *soap,
	const std::vector<ns7__SoapTask *> & Task)
{
	ns7__SoapTasks *_p = soap_new_ns7__SoapTasks(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapTasks::Task = Task;
	}
	return _p;
}

inline int soap_write_ns7__SoapTasks(struct soap *soap, ns7__SoapTasks const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapTasks", p->soap_type() == SOAP_TYPE_ns7__SoapTasks ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapTasks(struct soap *soap, const char *URL, ns7__SoapTasks const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapTasks", p->soap_type() == SOAP_TYPE_ns7__SoapTasks ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapTasks(struct soap *soap, const char *URL, ns7__SoapTasks const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapTasks", p->soap_type() == SOAP_TYPE_ns7__SoapTasks ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SoapTasks * SOAP_FMAC4 soap_get_ns7__SoapTasks(struct soap*, ns7__SoapTasks *, const char*, const char*);

inline int soap_read_ns7__SoapTasks(struct soap *soap, ns7__SoapTasks *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SoapTasks(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapTasks(struct soap *soap, const char *URL, ns7__SoapTasks *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapTasks(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapTasks(struct soap *soap, ns7__SoapTasks *p)
{
	if (soap_read_ns7__SoapTasks(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapTask_DEFINED
#define SOAP_TYPE_ns7__SoapTask_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapTask(struct soap*, const char*, int, const ns7__SoapTask *, const char*);
SOAP_FMAC3 ns7__SoapTask * SOAP_FMAC4 soap_in_ns7__SoapTask(struct soap*, const char*, ns7__SoapTask *, const char*);
SOAP_FMAC1 ns7__SoapTask * SOAP_FMAC2 soap_instantiate_ns7__SoapTask(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SoapTask * soap_new_ns7__SoapTask(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__SoapTask(soap, n, NULL, NULL, NULL);
}

inline ns7__SoapTask * soap_new_req_ns7__SoapTask(
	struct soap *soap,
	enum ns7__SoapTaskState state,
	int priority,
	int runtimeError,
	ns7__SoapProgramLine *programLine)
{
	ns7__SoapTask *_p = soap_new_ns7__SoapTask(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapTask::state = state;
		_p->ns7__SoapTask::priority = priority;
		_p->ns7__SoapTask::runtimeError = runtimeError;
		_p->ns7__SoapTask::programLine = programLine;
	}
	return _p;
}

inline ns7__SoapTask * soap_new_set_ns7__SoapTask(
	struct soap *soap,
	std::string *name,
	enum ns7__SoapTaskState state,
	int priority,
	std::string *createdBy,
	int runtimeError,
	std::string *runtimeErrorDescription,
	ns7__SoapProgramLine *programLine)
{
	ns7__SoapTask *_p = soap_new_ns7__SoapTask(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapTask::name = name;
		_p->ns7__SoapTask::state = state;
		_p->ns7__SoapTask::priority = priority;
		_p->ns7__SoapTask::createdBy = createdBy;
		_p->ns7__SoapTask::runtimeError = runtimeError;
		_p->ns7__SoapTask::runtimeErrorDescription = runtimeErrorDescription;
		_p->ns7__SoapTask::programLine = programLine;
	}
	return _p;
}

inline int soap_write_ns7__SoapTask(struct soap *soap, ns7__SoapTask const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapTask", p->soap_type() == SOAP_TYPE_ns7__SoapTask ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapTask(struct soap *soap, const char *URL, ns7__SoapTask const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapTask", p->soap_type() == SOAP_TYPE_ns7__SoapTask ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapTask(struct soap *soap, const char *URL, ns7__SoapTask const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapTask", p->soap_type() == SOAP_TYPE_ns7__SoapTask ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SoapTask * SOAP_FMAC4 soap_get_ns7__SoapTask(struct soap*, ns7__SoapTask *, const char*, const char*);

inline int soap_read_ns7__SoapTask(struct soap *soap, ns7__SoapTask *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SoapTask(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapTask(struct soap *soap, const char *URL, ns7__SoapTask *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapTask(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapTask(struct soap *soap, ns7__SoapTask *p)
{
	if (soap_read_ns7__SoapTask(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__MimeData_DEFINED
#define SOAP_TYPE_ns7__MimeData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__MimeData(struct soap*, const char*, int, const ns7__MimeData *, const char*);
SOAP_FMAC3 ns7__MimeData * SOAP_FMAC4 soap_in_ns7__MimeData(struct soap*, const char*, ns7__MimeData *, const char*);
SOAP_FMAC1 ns7__MimeData * SOAP_FMAC2 soap_instantiate_ns7__MimeData(struct soap*, int, const char*, const char*, size_t*);

inline ns7__MimeData * soap_new_ns7__MimeData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__MimeData(soap, n, NULL, NULL, NULL);
}

inline ns7__MimeData * soap_new_req_ns7__MimeData(
	struct soap *soap,
	const xsd__base64Binary& data)
{
	ns7__MimeData *_p = soap_new_ns7__MimeData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__MimeData::data = data;
	}
	return _p;
}

inline ns7__MimeData * soap_new_set_ns7__MimeData(
	struct soap *soap,
	const xsd__base64Binary& data,
	std::string *ns5__contentType)
{
	ns7__MimeData *_p = soap_new_ns7__MimeData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__MimeData::data = data;
		_p->ns7__MimeData::ns5__contentType = ns5__contentType;
	}
	return _p;
}

inline int soap_write_ns7__MimeData(struct soap *soap, ns7__MimeData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:MimeData", p->soap_type() == SOAP_TYPE_ns7__MimeData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__MimeData(struct soap *soap, const char *URL, ns7__MimeData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:MimeData", p->soap_type() == SOAP_TYPE_ns7__MimeData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__MimeData(struct soap *soap, const char *URL, ns7__MimeData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:MimeData", p->soap_type() == SOAP_TYPE_ns7__MimeData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__MimeData * SOAP_FMAC4 soap_get_ns7__MimeData(struct soap*, ns7__MimeData *, const char*, const char*);

inline int soap_read_ns7__MimeData(struct soap *soap, ns7__MimeData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__MimeData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__MimeData(struct soap *soap, const char *URL, ns7__MimeData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__MimeData(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__MimeData(struct soap *soap, ns7__MimeData *p)
{
	if (soap_read_ns7__MimeData(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__BreakpointsResponses_DEFINED
#define SOAP_TYPE_ns7__BreakpointsResponses_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__BreakpointsResponses(struct soap*, const char*, int, const ns7__BreakpointsResponses *, const char*);
SOAP_FMAC3 ns7__BreakpointsResponses * SOAP_FMAC4 soap_in_ns7__BreakpointsResponses(struct soap*, const char*, ns7__BreakpointsResponses *, const char*);
SOAP_FMAC1 ns7__BreakpointsResponses * SOAP_FMAC2 soap_instantiate_ns7__BreakpointsResponses(struct soap*, int, const char*, const char*, size_t*);

inline ns7__BreakpointsResponses * soap_new_ns7__BreakpointsResponses(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__BreakpointsResponses(soap, n, NULL, NULL, NULL);
}

inline ns7__BreakpointsResponses * soap_new_req_ns7__BreakpointsResponses(
	struct soap *soap)
{
	ns7__BreakpointsResponses *_p = soap_new_ns7__BreakpointsResponses(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns7__BreakpointsResponses * soap_new_set_ns7__BreakpointsResponses(
	struct soap *soap,
	const std::vector<ns7__BreakpointsResponse *> & BreakpointResponse)
{
	ns7__BreakpointsResponses *_p = soap_new_ns7__BreakpointsResponses(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__BreakpointsResponses::BreakpointResponse = BreakpointResponse;
	}
	return _p;
}

inline int soap_write_ns7__BreakpointsResponses(struct soap *soap, ns7__BreakpointsResponses const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:BreakpointsResponses", p->soap_type() == SOAP_TYPE_ns7__BreakpointsResponses ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__BreakpointsResponses(struct soap *soap, const char *URL, ns7__BreakpointsResponses const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:BreakpointsResponses", p->soap_type() == SOAP_TYPE_ns7__BreakpointsResponses ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__BreakpointsResponses(struct soap *soap, const char *URL, ns7__BreakpointsResponses const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:BreakpointsResponses", p->soap_type() == SOAP_TYPE_ns7__BreakpointsResponses ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__BreakpointsResponses * SOAP_FMAC4 soap_get_ns7__BreakpointsResponses(struct soap*, ns7__BreakpointsResponses *, const char*, const char*);

inline int soap_read_ns7__BreakpointsResponses(struct soap *soap, ns7__BreakpointsResponses *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__BreakpointsResponses(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__BreakpointsResponses(struct soap *soap, const char *URL, ns7__BreakpointsResponses *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__BreakpointsResponses(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__BreakpointsResponses(struct soap *soap, ns7__BreakpointsResponses *p)
{
	if (soap_read_ns7__BreakpointsResponses(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__BreakpointsResponse_DEFINED
#define SOAP_TYPE_ns7__BreakpointsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__BreakpointsResponse(struct soap*, const char*, int, const ns7__BreakpointsResponse *, const char*);
SOAP_FMAC3 ns7__BreakpointsResponse * SOAP_FMAC4 soap_in_ns7__BreakpointsResponse(struct soap*, const char*, ns7__BreakpointsResponse *, const char*);
SOAP_FMAC1 ns7__BreakpointsResponse * SOAP_FMAC2 soap_instantiate_ns7__BreakpointsResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns7__BreakpointsResponse * soap_new_ns7__BreakpointsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__BreakpointsResponse(soap, n, NULL, NULL, NULL);
}

inline ns7__BreakpointsResponse * soap_new_req_ns7__BreakpointsResponse(
	struct soap *soap,
	int breakpointIndex,
	enum ns1__ServerExceptionCode errorCode)
{
	ns7__BreakpointsResponse *_p = soap_new_ns7__BreakpointsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__BreakpointsResponse::breakpointIndex = breakpointIndex;
		_p->ns7__BreakpointsResponse::errorCode = errorCode;
	}
	return _p;
}

inline ns7__BreakpointsResponse * soap_new_set_ns7__BreakpointsResponse(
	struct soap *soap,
	int breakpointIndex,
	enum ns1__ServerExceptionCode errorCode)
{
	ns7__BreakpointsResponse *_p = soap_new_ns7__BreakpointsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__BreakpointsResponse::breakpointIndex = breakpointIndex;
		_p->ns7__BreakpointsResponse::errorCode = errorCode;
	}
	return _p;
}

inline int soap_write_ns7__BreakpointsResponse(struct soap *soap, ns7__BreakpointsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:BreakpointsResponse", p->soap_type() == SOAP_TYPE_ns7__BreakpointsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__BreakpointsResponse(struct soap *soap, const char *URL, ns7__BreakpointsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:BreakpointsResponse", p->soap_type() == SOAP_TYPE_ns7__BreakpointsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__BreakpointsResponse(struct soap *soap, const char *URL, ns7__BreakpointsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:BreakpointsResponse", p->soap_type() == SOAP_TYPE_ns7__BreakpointsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__BreakpointsResponse * SOAP_FMAC4 soap_get_ns7__BreakpointsResponse(struct soap*, ns7__BreakpointsResponse *, const char*, const char*);

inline int soap_read_ns7__BreakpointsResponse(struct soap *soap, ns7__BreakpointsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__BreakpointsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__BreakpointsResponse(struct soap *soap, const char *URL, ns7__BreakpointsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__BreakpointsResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__BreakpointsResponse(struct soap *soap, ns7__BreakpointsResponse *p)
{
	if (soap_read_ns7__BreakpointsResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapBreakpoints_DEFINED
#define SOAP_TYPE_ns7__SoapBreakpoints_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapBreakpoints(struct soap*, const char*, int, const ns7__SoapBreakpoints *, const char*);
SOAP_FMAC3 ns7__SoapBreakpoints * SOAP_FMAC4 soap_in_ns7__SoapBreakpoints(struct soap*, const char*, ns7__SoapBreakpoints *, const char*);
SOAP_FMAC1 ns7__SoapBreakpoints * SOAP_FMAC2 soap_instantiate_ns7__SoapBreakpoints(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SoapBreakpoints * soap_new_ns7__SoapBreakpoints(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__SoapBreakpoints(soap, n, NULL, NULL, NULL);
}

inline ns7__SoapBreakpoints * soap_new_req_ns7__SoapBreakpoints(
	struct soap *soap)
{
	ns7__SoapBreakpoints *_p = soap_new_ns7__SoapBreakpoints(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns7__SoapBreakpoints * soap_new_set_ns7__SoapBreakpoints(
	struct soap *soap,
	const std::vector<ns7__SoapBreakpoint *> & BreakPoint)
{
	ns7__SoapBreakpoints *_p = soap_new_ns7__SoapBreakpoints(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapBreakpoints::BreakPoint = BreakPoint;
	}
	return _p;
}

inline int soap_write_ns7__SoapBreakpoints(struct soap *soap, ns7__SoapBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapBreakpoints", p->soap_type() == SOAP_TYPE_ns7__SoapBreakpoints ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapBreakpoints(struct soap *soap, const char *URL, ns7__SoapBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapBreakpoints", p->soap_type() == SOAP_TYPE_ns7__SoapBreakpoints ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapBreakpoints(struct soap *soap, const char *URL, ns7__SoapBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapBreakpoints", p->soap_type() == SOAP_TYPE_ns7__SoapBreakpoints ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SoapBreakpoints * SOAP_FMAC4 soap_get_ns7__SoapBreakpoints(struct soap*, ns7__SoapBreakpoints *, const char*, const char*);

inline int soap_read_ns7__SoapBreakpoints(struct soap *soap, ns7__SoapBreakpoints *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SoapBreakpoints(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapBreakpoints(struct soap *soap, const char *URL, ns7__SoapBreakpoints *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapBreakpoints(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapBreakpoints(struct soap *soap, ns7__SoapBreakpoints *p)
{
	if (soap_read_ns7__SoapBreakpoints(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapBreakpoint_DEFINED
#define SOAP_TYPE_ns7__SoapBreakpoint_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapBreakpoint(struct soap*, const char*, int, const ns7__SoapBreakpoint *, const char*);
SOAP_FMAC3 ns7__SoapBreakpoint * SOAP_FMAC4 soap_in_ns7__SoapBreakpoint(struct soap*, const char*, ns7__SoapBreakpoint *, const char*);
SOAP_FMAC1 ns7__SoapBreakpoint * SOAP_FMAC2 soap_instantiate_ns7__SoapBreakpoint(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SoapBreakpoint * soap_new_ns7__SoapBreakpoint(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__SoapBreakpoint(soap, n, NULL, NULL, NULL);
}

inline ns7__SoapBreakpoint * soap_new_req_ns7__SoapBreakpoint(
	struct soap *soap,
	ns7__SoapProgramLine *programLine)
{
	ns7__SoapBreakpoint *_p = soap_new_ns7__SoapBreakpoint(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapBreakpoint::programLine = programLine;
	}
	return _p;
}

inline ns7__SoapBreakpoint * soap_new_set_ns7__SoapBreakpoint(
	struct soap *soap,
	ns7__SoapProgramLine *programLine)
{
	ns7__SoapBreakpoint *_p = soap_new_ns7__SoapBreakpoint(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapBreakpoint::programLine = programLine;
	}
	return _p;
}

inline int soap_write_ns7__SoapBreakpoint(struct soap *soap, ns7__SoapBreakpoint const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapBreakpoint", p->soap_type() == SOAP_TYPE_ns7__SoapBreakpoint ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapBreakpoint(struct soap *soap, const char *URL, ns7__SoapBreakpoint const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapBreakpoint", p->soap_type() == SOAP_TYPE_ns7__SoapBreakpoint ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapBreakpoint(struct soap *soap, const char *URL, ns7__SoapBreakpoint const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapBreakpoint", p->soap_type() == SOAP_TYPE_ns7__SoapBreakpoint ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SoapBreakpoint * SOAP_FMAC4 soap_get_ns7__SoapBreakpoint(struct soap*, ns7__SoapBreakpoint *, const char*, const char*);

inline int soap_read_ns7__SoapBreakpoint(struct soap *soap, ns7__SoapBreakpoint *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SoapBreakpoint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapBreakpoint(struct soap *soap, const char *URL, ns7__SoapBreakpoint *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapBreakpoint(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapBreakpoint(struct soap *soap, ns7__SoapBreakpoint *p)
{
	if (soap_read_ns7__SoapBreakpoint(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SoapProgramLine_DEFINED
#define SOAP_TYPE_ns7__SoapProgramLine_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SoapProgramLine(struct soap*, const char*, int, const ns7__SoapProgramLine *, const char*);
SOAP_FMAC3 ns7__SoapProgramLine * SOAP_FMAC4 soap_in_ns7__SoapProgramLine(struct soap*, const char*, ns7__SoapProgramLine *, const char*);
SOAP_FMAC1 ns7__SoapProgramLine * SOAP_FMAC2 soap_instantiate_ns7__SoapProgramLine(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SoapProgramLine * soap_new_ns7__SoapProgramLine(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__SoapProgramLine(soap, n, NULL, NULL, NULL);
}

inline ns7__SoapProgramLine * soap_new_req_ns7__SoapProgramLine(
	struct soap *soap,
	int lineNumber)
{
	ns7__SoapProgramLine *_p = soap_new_ns7__SoapProgramLine(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapProgramLine::lineNumber = lineNumber;
	}
	return _p;
}

inline ns7__SoapProgramLine * soap_new_set_ns7__SoapProgramLine(
	struct soap *soap,
	std::string *appName,
	std::string *pgmName,
	int lineNumber,
	std::string *lineContent)
{
	ns7__SoapProgramLine *_p = soap_new_ns7__SoapProgramLine(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SoapProgramLine::appName = appName;
		_p->ns7__SoapProgramLine::pgmName = pgmName;
		_p->ns7__SoapProgramLine::lineNumber = lineNumber;
		_p->ns7__SoapProgramLine::lineContent = lineContent;
	}
	return _p;
}

inline int soap_write_ns7__SoapProgramLine(struct soap *soap, ns7__SoapProgramLine const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapProgramLine", p->soap_type() == SOAP_TYPE_ns7__SoapProgramLine ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SoapProgramLine(struct soap *soap, const char *URL, ns7__SoapProgramLine const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapProgramLine", p->soap_type() == SOAP_TYPE_ns7__SoapProgramLine ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SoapProgramLine(struct soap *soap, const char *URL, ns7__SoapProgramLine const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SoapProgramLine", p->soap_type() == SOAP_TYPE_ns7__SoapProgramLine ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SoapProgramLine * SOAP_FMAC4 soap_get_ns7__SoapProgramLine(struct soap*, ns7__SoapProgramLine *, const char*, const char*);

inline int soap_read_ns7__SoapProgramLine(struct soap *soap, ns7__SoapProgramLine *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SoapProgramLine(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SoapProgramLine(struct soap *soap, const char *URL, ns7__SoapProgramLine *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SoapProgramLine(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SoapProgramLine(struct soap *soap, ns7__SoapProgramLine *p)
{
	if (soap_read_ns7__SoapProgramLine(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__Records_DEFINED
#define SOAP_TYPE_ns7__Records_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__Records(struct soap*, const char*, int, const ns7__Records *, const char*);
SOAP_FMAC3 ns7__Records * SOAP_FMAC4 soap_in_ns7__Records(struct soap*, const char*, ns7__Records *, const char*);
SOAP_FMAC1 ns7__Records * SOAP_FMAC2 soap_instantiate_ns7__Records(struct soap*, int, const char*, const char*, size_t*);

inline ns7__Records * soap_new_ns7__Records(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__Records(soap, n, NULL, NULL, NULL);
}

inline ns7__Records * soap_new_req_ns7__Records(
	struct soap *soap)
{
	ns7__Records *_p = soap_new_ns7__Records(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns7__Records * soap_new_set_ns7__Records(
	struct soap *soap,
	const std::vector<std::string> & record)
{
	ns7__Records *_p = soap_new_ns7__Records(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__Records::record = record;
	}
	return _p;
}

inline int soap_write_ns7__Records(struct soap *soap, ns7__Records const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:Records", p->soap_type() == SOAP_TYPE_ns7__Records ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__Records(struct soap *soap, const char *URL, ns7__Records const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:Records", p->soap_type() == SOAP_TYPE_ns7__Records ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__Records(struct soap *soap, const char *URL, ns7__Records const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:Records", p->soap_type() == SOAP_TYPE_ns7__Records ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__Records * SOAP_FMAC4 soap_get_ns7__Records(struct soap*, ns7__Records *, const char*, const char*);

inline int soap_read_ns7__Records(struct soap *soap, ns7__Records *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__Records(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__Records(struct soap *soap, const char *URL, ns7__Records *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__Records(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__Records(struct soap *soap, ns7__Records *p)
{
	if (soap_read_ns7__Records(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__VALApplications_DEFINED
#define SOAP_TYPE_ns7__VALApplications_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__VALApplications(struct soap*, const char*, int, const ns7__VALApplications *, const char*);
SOAP_FMAC3 ns7__VALApplications * SOAP_FMAC4 soap_in_ns7__VALApplications(struct soap*, const char*, ns7__VALApplications *, const char*);
SOAP_FMAC1 ns7__VALApplications * SOAP_FMAC2 soap_instantiate_ns7__VALApplications(struct soap*, int, const char*, const char*, size_t*);

inline ns7__VALApplications * soap_new_ns7__VALApplications(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__VALApplications(soap, n, NULL, NULL, NULL);
}

inline ns7__VALApplications * soap_new_req_ns7__VALApplications(
	struct soap *soap)
{
	ns7__VALApplications *_p = soap_new_ns7__VALApplications(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns7__VALApplications * soap_new_set_ns7__VALApplications(
	struct soap *soap,
	const std::vector<ns2__VALApplication *> & application)
{
	ns7__VALApplications *_p = soap_new_ns7__VALApplications(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__VALApplications::application = application;
	}
	return _p;
}

inline int soap_write_ns7__VALApplications(struct soap *soap, ns7__VALApplications const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:VALApplications", p->soap_type() == SOAP_TYPE_ns7__VALApplications ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__VALApplications(struct soap *soap, const char *URL, ns7__VALApplications const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:VALApplications", p->soap_type() == SOAP_TYPE_ns7__VALApplications ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__VALApplications(struct soap *soap, const char *URL, ns7__VALApplications const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:VALApplications", p->soap_type() == SOAP_TYPE_ns7__VALApplications ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__VALApplications * SOAP_FMAC4 soap_get_ns7__VALApplications(struct soap*, ns7__VALApplications *, const char*, const char*);

inline int soap_read_ns7__VALApplications(struct soap *soap, ns7__VALApplications *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__VALApplications(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__VALApplications(struct soap *soap, const char *URL, ns7__VALApplications *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__VALApplications(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__VALApplications(struct soap *soap, ns7__VALApplications *p)
{
	if (soap_read_ns7__VALApplications(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__Robots_DEFINED
#define SOAP_TYPE_ns7__Robots_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__Robots(struct soap*, const char*, int, const ns7__Robots *, const char*);
SOAP_FMAC3 ns7__Robots * SOAP_FMAC4 soap_in_ns7__Robots(struct soap*, const char*, ns7__Robots *, const char*);
SOAP_FMAC1 ns7__Robots * SOAP_FMAC2 soap_instantiate_ns7__Robots(struct soap*, int, const char*, const char*, size_t*);

inline ns7__Robots * soap_new_ns7__Robots(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__Robots(soap, n, NULL, NULL, NULL);
}

inline ns7__Robots * soap_new_req_ns7__Robots(
	struct soap *soap)
{
	ns7__Robots *_p = soap_new_ns7__Robots(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns7__Robots * soap_new_set_ns7__Robots(
	struct soap *soap,
	const std::vector<ns1__Robot *> & Robots)
{
	ns7__Robots *_p = soap_new_ns7__Robots(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__Robots::Robots = Robots;
	}
	return _p;
}

inline int soap_write_ns7__Robots(struct soap *soap, ns7__Robots const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:Robots", p->soap_type() == SOAP_TYPE_ns7__Robots ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__Robots(struct soap *soap, const char *URL, ns7__Robots const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:Robots", p->soap_type() == SOAP_TYPE_ns7__Robots ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__Robots(struct soap *soap, const char *URL, ns7__Robots const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:Robots", p->soap_type() == SOAP_TYPE_ns7__Robots ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__Robots * SOAP_FMAC4 soap_get_ns7__Robots(struct soap*, ns7__Robots *, const char*, const char*);

inline int soap_read_ns7__Robots(struct soap *soap, ns7__Robots *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__Robots(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__Robots(struct soap *soap, const char *URL, ns7__Robots *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__Robots(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__Robots(struct soap *soap, ns7__Robots *p)
{
	if (soap_read_ns7__Robots(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__Versions_DEFINED
#define SOAP_TYPE_ns7__Versions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__Versions(struct soap*, const char*, int, const ns7__Versions *, const char*);
SOAP_FMAC3 ns7__Versions * SOAP_FMAC4 soap_in_ns7__Versions(struct soap*, const char*, ns7__Versions *, const char*);
SOAP_FMAC1 ns7__Versions * SOAP_FMAC2 soap_instantiate_ns7__Versions(struct soap*, int, const char*, const char*, size_t*);

inline ns7__Versions * soap_new_ns7__Versions(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__Versions(soap, n, NULL, NULL, NULL);
}

inline ns7__Versions * soap_new_req_ns7__Versions(
	struct soap *soap)
{
	ns7__Versions *_p = soap_new_ns7__Versions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns7__Versions * soap_new_set_ns7__Versions(
	struct soap *soap,
	const std::vector<ns1__Version *> & Versions)
{
	ns7__Versions *_p = soap_new_ns7__Versions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__Versions::Versions = Versions;
	}
	return _p;
}

inline int soap_write_ns7__Versions(struct soap *soap, ns7__Versions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:Versions", p->soap_type() == SOAP_TYPE_ns7__Versions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__Versions(struct soap *soap, const char *URL, ns7__Versions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:Versions", p->soap_type() == SOAP_TYPE_ns7__Versions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__Versions(struct soap *soap, const char *URL, ns7__Versions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:Versions", p->soap_type() == SOAP_TYPE_ns7__Versions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__Versions * SOAP_FMAC4 soap_get_ns7__Versions(struct soap*, ns7__Versions *, const char*, const char*);

inline int soap_read_ns7__Versions(struct soap *soap, ns7__Versions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__Versions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__Versions(struct soap *soap, const char *URL, ns7__Versions *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__Versions(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__Versions(struct soap *soap, ns7__Versions *p)
{
	if (soap_read_ns7__Versions(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__Parameters_DEFINED
#define SOAP_TYPE_ns7__Parameters_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__Parameters(struct soap*, const char*, int, const ns7__Parameters *, const char*);
SOAP_FMAC3 ns7__Parameters * SOAP_FMAC4 soap_in_ns7__Parameters(struct soap*, const char*, ns7__Parameters *, const char*);
SOAP_FMAC1 ns7__Parameters * SOAP_FMAC2 soap_instantiate_ns7__Parameters(struct soap*, int, const char*, const char*, size_t*);

inline ns7__Parameters * soap_new_ns7__Parameters(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__Parameters(soap, n, NULL, NULL, NULL);
}

inline ns7__Parameters * soap_new_req_ns7__Parameters(
	struct soap *soap)
{
	ns7__Parameters *_p = soap_new_ns7__Parameters(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns7__Parameters * soap_new_set_ns7__Parameters(
	struct soap *soap,
	const std::vector<ns1__Parameter *> & Parameters)
{
	ns7__Parameters *_p = soap_new_ns7__Parameters(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__Parameters::Parameters = Parameters;
	}
	return _p;
}

inline int soap_write_ns7__Parameters(struct soap *soap, ns7__Parameters const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:Parameters", p->soap_type() == SOAP_TYPE_ns7__Parameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__Parameters(struct soap *soap, const char *URL, ns7__Parameters const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:Parameters", p->soap_type() == SOAP_TYPE_ns7__Parameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__Parameters(struct soap *soap, const char *URL, ns7__Parameters const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:Parameters", p->soap_type() == SOAP_TYPE_ns7__Parameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__Parameters * SOAP_FMAC4 soap_get_ns7__Parameters(struct soap*, ns7__Parameters *, const char*, const char*);

inline int soap_read_ns7__Parameters(struct soap *soap, ns7__Parameters *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__Parameters(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__Parameters(struct soap *soap, const char *URL, ns7__Parameters *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__Parameters(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__Parameters(struct soap *soap, ns7__Parameters *p)
{
	if (soap_read_ns7__Parameters(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__JointPos_DEFINED
#define SOAP_TYPE_ns7__JointPos_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__JointPos(struct soap*, const char*, int, const ns7__JointPos *, const char*);
SOAP_FMAC3 ns7__JointPos * SOAP_FMAC4 soap_in_ns7__JointPos(struct soap*, const char*, ns7__JointPos *, const char*);
SOAP_FMAC1 ns7__JointPos * SOAP_FMAC2 soap_instantiate_ns7__JointPos(struct soap*, int, const char*, const char*, size_t*);

inline ns7__JointPos * soap_new_ns7__JointPos(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__JointPos(soap, n, NULL, NULL, NULL);
}

inline ns7__JointPos * soap_new_req_ns7__JointPos(
	struct soap *soap,
	const std::vector<double> & item)
{
	ns7__JointPos *_p = soap_new_ns7__JointPos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__JointPos::item = item;
	}
	return _p;
}

inline ns7__JointPos * soap_new_set_ns7__JointPos(
	struct soap *soap,
	const std::vector<double> & item)
{
	ns7__JointPos *_p = soap_new_ns7__JointPos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__JointPos::item = item;
	}
	return _p;
}

inline int soap_write_ns7__JointPos(struct soap *soap, ns7__JointPos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:JointPos", p->soap_type() == SOAP_TYPE_ns7__JointPos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__JointPos(struct soap *soap, const char *URL, ns7__JointPos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:JointPos", p->soap_type() == SOAP_TYPE_ns7__JointPos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__JointPos(struct soap *soap, const char *URL, ns7__JointPos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:JointPos", p->soap_type() == SOAP_TYPE_ns7__JointPos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__JointPos * SOAP_FMAC4 soap_get_ns7__JointPos(struct soap*, ns7__JointPos *, const char*, const char*);

inline int soap_read_ns7__JointPos(struct soap *soap, ns7__JointPos *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__JointPos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__JointPos(struct soap *soap, const char *URL, ns7__JointPos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__JointPos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__JointPos(struct soap *soap, ns7__JointPos *p)
{
	if (soap_read_ns7__JointPos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__SoapDhParametersArray_DEFINED
#define SOAP_TYPE_ns5__SoapDhParametersArray_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__SoapDhParametersArray(struct soap*, const char*, int, const ns5__SoapDhParametersArray *, const char*);
SOAP_FMAC3 ns5__SoapDhParametersArray * SOAP_FMAC4 soap_in_ns5__SoapDhParametersArray(struct soap*, const char*, ns5__SoapDhParametersArray *, const char*);
SOAP_FMAC1 ns5__SoapDhParametersArray * SOAP_FMAC2 soap_instantiate_ns5__SoapDhParametersArray(struct soap*, int, const char*, const char*, size_t*);

inline ns5__SoapDhParametersArray * soap_new_ns5__SoapDhParametersArray(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__SoapDhParametersArray(soap, n, NULL, NULL, NULL);
}

inline ns5__SoapDhParametersArray * soap_new_req_ns5__SoapDhParametersArray(
	struct soap *soap)
{
	ns5__SoapDhParametersArray *_p = soap_new_ns5__SoapDhParametersArray(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__SoapDhParametersArray * soap_new_set_ns5__SoapDhParametersArray(
	struct soap *soap,
	const std::vector<ns7__SoapDhParameters *> & DhParameters)
{
	ns5__SoapDhParametersArray *_p = soap_new_ns5__SoapDhParametersArray(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__SoapDhParametersArray::DhParameters = DhParameters;
	}
	return _p;
}

inline int soap_write_ns5__SoapDhParametersArray(struct soap *soap, ns5__SoapDhParametersArray const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapDhParametersArray", p->soap_type() == SOAP_TYPE_ns5__SoapDhParametersArray ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__SoapDhParametersArray(struct soap *soap, const char *URL, ns5__SoapDhParametersArray const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapDhParametersArray", p->soap_type() == SOAP_TYPE_ns5__SoapDhParametersArray ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__SoapDhParametersArray(struct soap *soap, const char *URL, ns5__SoapDhParametersArray const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapDhParametersArray", p->soap_type() == SOAP_TYPE_ns5__SoapDhParametersArray ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__SoapDhParametersArray * SOAP_FMAC4 soap_get_ns5__SoapDhParametersArray(struct soap*, ns5__SoapDhParametersArray *, const char*, const char*);

inline int soap_read_ns5__SoapDhParametersArray(struct soap *soap, ns5__SoapDhParametersArray *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__SoapDhParametersArray(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__SoapDhParametersArray(struct soap *soap, const char *URL, ns5__SoapDhParametersArray *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__SoapDhParametersArray(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__SoapDhParametersArray(struct soap *soap, ns5__SoapDhParametersArray *p)
{
	if (soap_read_ns5__SoapDhParametersArray(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__SoapPhysicalIoUnlockResponses_DEFINED
#define SOAP_TYPE_ns5__SoapPhysicalIoUnlockResponses_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__SoapPhysicalIoUnlockResponses(struct soap*, const char*, int, const ns5__SoapPhysicalIoUnlockResponses *, const char*);
SOAP_FMAC3 ns5__SoapPhysicalIoUnlockResponses * SOAP_FMAC4 soap_in_ns5__SoapPhysicalIoUnlockResponses(struct soap*, const char*, ns5__SoapPhysicalIoUnlockResponses *, const char*);
SOAP_FMAC1 ns5__SoapPhysicalIoUnlockResponses * SOAP_FMAC2 soap_instantiate_ns5__SoapPhysicalIoUnlockResponses(struct soap*, int, const char*, const char*, size_t*);

inline ns5__SoapPhysicalIoUnlockResponses * soap_new_ns5__SoapPhysicalIoUnlockResponses(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__SoapPhysicalIoUnlockResponses(soap, n, NULL, NULL, NULL);
}

inline ns5__SoapPhysicalIoUnlockResponses * soap_new_req_ns5__SoapPhysicalIoUnlockResponses(
	struct soap *soap)
{
	ns5__SoapPhysicalIoUnlockResponses *_p = soap_new_ns5__SoapPhysicalIoUnlockResponses(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__SoapPhysicalIoUnlockResponses * soap_new_set_ns5__SoapPhysicalIoUnlockResponses(
	struct soap *soap,
	const std::vector<ns7__SoapPhysicalIoUnlockResponse *> & PhysicalIoResponse)
{
	ns5__SoapPhysicalIoUnlockResponses *_p = soap_new_ns5__SoapPhysicalIoUnlockResponses(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__SoapPhysicalIoUnlockResponses::PhysicalIoResponse = PhysicalIoResponse;
	}
	return _p;
}

inline int soap_write_ns5__SoapPhysicalIoUnlockResponses(struct soap *soap, ns5__SoapPhysicalIoUnlockResponses const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapPhysicalIoUnlockResponses", p->soap_type() == SOAP_TYPE_ns5__SoapPhysicalIoUnlockResponses ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__SoapPhysicalIoUnlockResponses(struct soap *soap, const char *URL, ns5__SoapPhysicalIoUnlockResponses const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapPhysicalIoUnlockResponses", p->soap_type() == SOAP_TYPE_ns5__SoapPhysicalIoUnlockResponses ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__SoapPhysicalIoUnlockResponses(struct soap *soap, const char *URL, ns5__SoapPhysicalIoUnlockResponses const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapPhysicalIoUnlockResponses", p->soap_type() == SOAP_TYPE_ns5__SoapPhysicalIoUnlockResponses ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__SoapPhysicalIoUnlockResponses * SOAP_FMAC4 soap_get_ns5__SoapPhysicalIoUnlockResponses(struct soap*, ns5__SoapPhysicalIoUnlockResponses *, const char*, const char*);

inline int soap_read_ns5__SoapPhysicalIoUnlockResponses(struct soap *soap, ns5__SoapPhysicalIoUnlockResponses *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__SoapPhysicalIoUnlockResponses(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__SoapPhysicalIoUnlockResponses(struct soap *soap, const char *URL, ns5__SoapPhysicalIoUnlockResponses *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__SoapPhysicalIoUnlockResponses(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__SoapPhysicalIoUnlockResponses(struct soap *soap, ns5__SoapPhysicalIoUnlockResponses *p)
{
	if (soap_read_ns5__SoapPhysicalIoUnlockResponses(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__SoapPhysicalIoResponses_DEFINED
#define SOAP_TYPE_ns5__SoapPhysicalIoResponses_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__SoapPhysicalIoResponses(struct soap*, const char*, int, const ns5__SoapPhysicalIoResponses *, const char*);
SOAP_FMAC3 ns5__SoapPhysicalIoResponses * SOAP_FMAC4 soap_in_ns5__SoapPhysicalIoResponses(struct soap*, const char*, ns5__SoapPhysicalIoResponses *, const char*);
SOAP_FMAC1 ns5__SoapPhysicalIoResponses * SOAP_FMAC2 soap_instantiate_ns5__SoapPhysicalIoResponses(struct soap*, int, const char*, const char*, size_t*);

inline ns5__SoapPhysicalIoResponses * soap_new_ns5__SoapPhysicalIoResponses(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__SoapPhysicalIoResponses(soap, n, NULL, NULL, NULL);
}

inline ns5__SoapPhysicalIoResponses * soap_new_req_ns5__SoapPhysicalIoResponses(
	struct soap *soap)
{
	ns5__SoapPhysicalIoResponses *_p = soap_new_ns5__SoapPhysicalIoResponses(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__SoapPhysicalIoResponses * soap_new_set_ns5__SoapPhysicalIoResponses(
	struct soap *soap,
	const std::vector<ns7__SoapPhysicalIoResponse *> & PhysicalIoResponse)
{
	ns5__SoapPhysicalIoResponses *_p = soap_new_ns5__SoapPhysicalIoResponses(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__SoapPhysicalIoResponses::PhysicalIoResponse = PhysicalIoResponse;
	}
	return _p;
}

inline int soap_write_ns5__SoapPhysicalIoResponses(struct soap *soap, ns5__SoapPhysicalIoResponses const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapPhysicalIoResponses", p->soap_type() == SOAP_TYPE_ns5__SoapPhysicalIoResponses ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__SoapPhysicalIoResponses(struct soap *soap, const char *URL, ns5__SoapPhysicalIoResponses const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapPhysicalIoResponses", p->soap_type() == SOAP_TYPE_ns5__SoapPhysicalIoResponses ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__SoapPhysicalIoResponses(struct soap *soap, const char *URL, ns5__SoapPhysicalIoResponses const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapPhysicalIoResponses", p->soap_type() == SOAP_TYPE_ns5__SoapPhysicalIoResponses ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__SoapPhysicalIoResponses * SOAP_FMAC4 soap_get_ns5__SoapPhysicalIoResponses(struct soap*, ns5__SoapPhysicalIoResponses *, const char*, const char*);

inline int soap_read_ns5__SoapPhysicalIoResponses(struct soap *soap, ns5__SoapPhysicalIoResponses *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__SoapPhysicalIoResponses(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__SoapPhysicalIoResponses(struct soap *soap, const char *URL, ns5__SoapPhysicalIoResponses *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__SoapPhysicalIoResponses(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__SoapPhysicalIoResponses(struct soap *soap, ns5__SoapPhysicalIoResponses *p)
{
	if (soap_read_ns5__SoapPhysicalIoResponses(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__SoapPhysicalIosStates_DEFINED
#define SOAP_TYPE_ns5__SoapPhysicalIosStates_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__SoapPhysicalIosStates(struct soap*, const char*, int, const ns5__SoapPhysicalIosStates *, const char*);
SOAP_FMAC3 ns5__SoapPhysicalIosStates * SOAP_FMAC4 soap_in_ns5__SoapPhysicalIosStates(struct soap*, const char*, ns5__SoapPhysicalIosStates *, const char*);
SOAP_FMAC1 ns5__SoapPhysicalIosStates * SOAP_FMAC2 soap_instantiate_ns5__SoapPhysicalIosStates(struct soap*, int, const char*, const char*, size_t*);

inline ns5__SoapPhysicalIosStates * soap_new_ns5__SoapPhysicalIosStates(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__SoapPhysicalIosStates(soap, n, NULL, NULL, NULL);
}

inline ns5__SoapPhysicalIosStates * soap_new_req_ns5__SoapPhysicalIosStates(
	struct soap *soap)
{
	ns5__SoapPhysicalIosStates *_p = soap_new_ns5__SoapPhysicalIosStates(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__SoapPhysicalIosStates * soap_new_set_ns5__SoapPhysicalIosStates(
	struct soap *soap,
	const std::vector<ns7__SoapPhysicalIoState *> & PhysicalIoState)
{
	ns5__SoapPhysicalIosStates *_p = soap_new_ns5__SoapPhysicalIosStates(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__SoapPhysicalIosStates::PhysicalIoState = PhysicalIoState;
	}
	return _p;
}

inline int soap_write_ns5__SoapPhysicalIosStates(struct soap *soap, ns5__SoapPhysicalIosStates const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapPhysicalIosStates", p->soap_type() == SOAP_TYPE_ns5__SoapPhysicalIosStates ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__SoapPhysicalIosStates(struct soap *soap, const char *URL, ns5__SoapPhysicalIosStates const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapPhysicalIosStates", p->soap_type() == SOAP_TYPE_ns5__SoapPhysicalIosStates ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__SoapPhysicalIosStates(struct soap *soap, const char *URL, ns5__SoapPhysicalIosStates const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapPhysicalIosStates", p->soap_type() == SOAP_TYPE_ns5__SoapPhysicalIosStates ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__SoapPhysicalIosStates * SOAP_FMAC4 soap_get_ns5__SoapPhysicalIosStates(struct soap*, ns5__SoapPhysicalIosStates *, const char*, const char*);

inline int soap_read_ns5__SoapPhysicalIosStates(struct soap *soap, ns5__SoapPhysicalIosStates *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__SoapPhysicalIosStates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__SoapPhysicalIosStates(struct soap *soap, const char *URL, ns5__SoapPhysicalIosStates *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__SoapPhysicalIosStates(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__SoapPhysicalIosStates(struct soap *soap, ns5__SoapPhysicalIosStates *p)
{
	if (soap_read_ns5__SoapPhysicalIosStates(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__SoapPhysicalIoValues_DEFINED
#define SOAP_TYPE_ns5__SoapPhysicalIoValues_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__SoapPhysicalIoValues(struct soap*, const char*, int, const ns5__SoapPhysicalIoValues *, const char*);
SOAP_FMAC3 ns5__SoapPhysicalIoValues * SOAP_FMAC4 soap_in_ns5__SoapPhysicalIoValues(struct soap*, const char*, ns5__SoapPhysicalIoValues *, const char*);
SOAP_FMAC1 ns5__SoapPhysicalIoValues * SOAP_FMAC2 soap_instantiate_ns5__SoapPhysicalIoValues(struct soap*, int, const char*, const char*, size_t*);

inline ns5__SoapPhysicalIoValues * soap_new_ns5__SoapPhysicalIoValues(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__SoapPhysicalIoValues(soap, n, NULL, NULL, NULL);
}

inline ns5__SoapPhysicalIoValues * soap_new_req_ns5__SoapPhysicalIoValues(
	struct soap *soap)
{
	ns5__SoapPhysicalIoValues *_p = soap_new_ns5__SoapPhysicalIoValues(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__SoapPhysicalIoValues * soap_new_set_ns5__SoapPhysicalIoValues(
	struct soap *soap,
	const std::vector<double> & PhysicalIoValue)
{
	ns5__SoapPhysicalIoValues *_p = soap_new_ns5__SoapPhysicalIoValues(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__SoapPhysicalIoValues::PhysicalIoValue = PhysicalIoValue;
	}
	return _p;
}

inline int soap_write_ns5__SoapPhysicalIoValues(struct soap *soap, ns5__SoapPhysicalIoValues const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapPhysicalIoValues", p->soap_type() == SOAP_TYPE_ns5__SoapPhysicalIoValues ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__SoapPhysicalIoValues(struct soap *soap, const char *URL, ns5__SoapPhysicalIoValues const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapPhysicalIoValues", p->soap_type() == SOAP_TYPE_ns5__SoapPhysicalIoValues ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__SoapPhysicalIoValues(struct soap *soap, const char *URL, ns5__SoapPhysicalIoValues const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapPhysicalIoValues", p->soap_type() == SOAP_TYPE_ns5__SoapPhysicalIoValues ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__SoapPhysicalIoValues * SOAP_FMAC4 soap_get_ns5__SoapPhysicalIoValues(struct soap*, ns5__SoapPhysicalIoValues *, const char*, const char*);

inline int soap_read_ns5__SoapPhysicalIoValues(struct soap *soap, ns5__SoapPhysicalIoValues *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__SoapPhysicalIoValues(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__SoapPhysicalIoValues(struct soap *soap, const char *URL, ns5__SoapPhysicalIoValues *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__SoapPhysicalIoValues(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__SoapPhysicalIoValues(struct soap *soap, ns5__SoapPhysicalIoValues *p)
{
	if (soap_read_ns5__SoapPhysicalIoValues(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__SoapPhysicalIoLinks_DEFINED
#define SOAP_TYPE_ns5__SoapPhysicalIoLinks_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__SoapPhysicalIoLinks(struct soap*, const char*, int, const ns5__SoapPhysicalIoLinks *, const char*);
SOAP_FMAC3 ns5__SoapPhysicalIoLinks * SOAP_FMAC4 soap_in_ns5__SoapPhysicalIoLinks(struct soap*, const char*, ns5__SoapPhysicalIoLinks *, const char*);
SOAP_FMAC1 ns5__SoapPhysicalIoLinks * SOAP_FMAC2 soap_instantiate_ns5__SoapPhysicalIoLinks(struct soap*, int, const char*, const char*, size_t*);

inline ns5__SoapPhysicalIoLinks * soap_new_ns5__SoapPhysicalIoLinks(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__SoapPhysicalIoLinks(soap, n, NULL, NULL, NULL);
}

inline ns5__SoapPhysicalIoLinks * soap_new_req_ns5__SoapPhysicalIoLinks(
	struct soap *soap)
{
	ns5__SoapPhysicalIoLinks *_p = soap_new_ns5__SoapPhysicalIoLinks(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__SoapPhysicalIoLinks * soap_new_set_ns5__SoapPhysicalIoLinks(
	struct soap *soap,
	const std::vector<std::string> & PhysicalPath)
{
	ns5__SoapPhysicalIoLinks *_p = soap_new_ns5__SoapPhysicalIoLinks(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__SoapPhysicalIoLinks::PhysicalPath = PhysicalPath;
	}
	return _p;
}

inline int soap_write_ns5__SoapPhysicalIoLinks(struct soap *soap, ns5__SoapPhysicalIoLinks const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapPhysicalIoLinks", p->soap_type() == SOAP_TYPE_ns5__SoapPhysicalIoLinks ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__SoapPhysicalIoLinks(struct soap *soap, const char *URL, ns5__SoapPhysicalIoLinks const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapPhysicalIoLinks", p->soap_type() == SOAP_TYPE_ns5__SoapPhysicalIoLinks ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__SoapPhysicalIoLinks(struct soap *soap, const char *URL, ns5__SoapPhysicalIoLinks const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapPhysicalIoLinks", p->soap_type() == SOAP_TYPE_ns5__SoapPhysicalIoLinks ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__SoapPhysicalIoLinks * SOAP_FMAC4 soap_get_ns5__SoapPhysicalIoLinks(struct soap*, ns5__SoapPhysicalIoLinks *, const char*, const char*);

inline int soap_read_ns5__SoapPhysicalIoLinks(struct soap *soap, ns5__SoapPhysicalIoLinks *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__SoapPhysicalIoLinks(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__SoapPhysicalIoLinks(struct soap *soap, const char *URL, ns5__SoapPhysicalIoLinks *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__SoapPhysicalIoLinks(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__SoapPhysicalIoLinks(struct soap *soap, ns5__SoapPhysicalIoLinks *p)
{
	if (soap_read_ns5__SoapPhysicalIoLinks(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__SoapWatches_DEFINED
#define SOAP_TYPE_ns5__SoapWatches_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__SoapWatches(struct soap*, const char*, int, const ns5__SoapWatches *, const char*);
SOAP_FMAC3 ns5__SoapWatches * SOAP_FMAC4 soap_in_ns5__SoapWatches(struct soap*, const char*, ns5__SoapWatches *, const char*);
SOAP_FMAC1 ns5__SoapWatches * SOAP_FMAC2 soap_instantiate_ns5__SoapWatches(struct soap*, int, const char*, const char*, size_t*);

inline ns5__SoapWatches * soap_new_ns5__SoapWatches(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__SoapWatches(soap, n, NULL, NULL, NULL);
}

inline ns5__SoapWatches * soap_new_req_ns5__SoapWatches(
	struct soap *soap)
{
	ns5__SoapWatches *_p = soap_new_ns5__SoapWatches(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__SoapWatches * soap_new_set_ns5__SoapWatches(
	struct soap *soap,
	const std::vector<ns7__SoapData *> & SoapData)
{
	ns5__SoapWatches *_p = soap_new_ns5__SoapWatches(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__SoapWatches::SoapData = SoapData;
	}
	return _p;
}

inline int soap_write_ns5__SoapWatches(struct soap *soap, ns5__SoapWatches const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapWatches", p->soap_type() == SOAP_TYPE_ns5__SoapWatches ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__SoapWatches(struct soap *soap, const char *URL, ns5__SoapWatches const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapWatches", p->soap_type() == SOAP_TYPE_ns5__SoapWatches ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__SoapWatches(struct soap *soap, const char *URL, ns5__SoapWatches const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapWatches", p->soap_type() == SOAP_TYPE_ns5__SoapWatches ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__SoapWatches * SOAP_FMAC4 soap_get_ns5__SoapWatches(struct soap*, ns5__SoapWatches *, const char*, const char*);

inline int soap_read_ns5__SoapWatches(struct soap *soap, ns5__SoapWatches *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__SoapWatches(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__SoapWatches(struct soap *soap, const char *URL, ns5__SoapWatches *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__SoapWatches(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__SoapWatches(struct soap *soap, ns5__SoapWatches *p)
{
	if (soap_read_ns5__SoapWatches(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__SoapCallStack_DEFINED
#define SOAP_TYPE_ns5__SoapCallStack_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__SoapCallStack(struct soap*, const char*, int, const ns5__SoapCallStack *, const char*);
SOAP_FMAC3 ns5__SoapCallStack * SOAP_FMAC4 soap_in_ns5__SoapCallStack(struct soap*, const char*, ns5__SoapCallStack *, const char*);
SOAP_FMAC1 ns5__SoapCallStack * SOAP_FMAC2 soap_instantiate_ns5__SoapCallStack(struct soap*, int, const char*, const char*, size_t*);

inline ns5__SoapCallStack * soap_new_ns5__SoapCallStack(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__SoapCallStack(soap, n, NULL, NULL, NULL);
}

inline ns5__SoapCallStack * soap_new_req_ns5__SoapCallStack(
	struct soap *soap)
{
	ns5__SoapCallStack *_p = soap_new_ns5__SoapCallStack(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__SoapCallStack * soap_new_set_ns5__SoapCallStack(
	struct soap *soap,
	const std::vector<ns7__SoapStackFrameAbstract *> & SfAbstract)
{
	ns5__SoapCallStack *_p = soap_new_ns5__SoapCallStack(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__SoapCallStack::SfAbstract = SfAbstract;
	}
	return _p;
}

inline int soap_write_ns5__SoapCallStack(struct soap *soap, ns5__SoapCallStack const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapCallStack", p->soap_type() == SOAP_TYPE_ns5__SoapCallStack ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__SoapCallStack(struct soap *soap, const char *URL, ns5__SoapCallStack const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapCallStack", p->soap_type() == SOAP_TYPE_ns5__SoapCallStack ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__SoapCallStack(struct soap *soap, const char *URL, ns5__SoapCallStack const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapCallStack", p->soap_type() == SOAP_TYPE_ns5__SoapCallStack ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__SoapCallStack * SOAP_FMAC4 soap_get_ns5__SoapCallStack(struct soap*, ns5__SoapCallStack *, const char*, const char*);

inline int soap_read_ns5__SoapCallStack(struct soap *soap, ns5__SoapCallStack *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__SoapCallStack(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__SoapCallStack(struct soap *soap, const char *URL, ns5__SoapCallStack *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__SoapCallStack(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__SoapCallStack(struct soap *soap, ns5__SoapCallStack *p)
{
	if (soap_read_ns5__SoapCallStack(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__SoapTasks_DEFINED
#define SOAP_TYPE_ns5__SoapTasks_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__SoapTasks(struct soap*, const char*, int, const ns5__SoapTasks *, const char*);
SOAP_FMAC3 ns5__SoapTasks * SOAP_FMAC4 soap_in_ns5__SoapTasks(struct soap*, const char*, ns5__SoapTasks *, const char*);
SOAP_FMAC1 ns5__SoapTasks * SOAP_FMAC2 soap_instantiate_ns5__SoapTasks(struct soap*, int, const char*, const char*, size_t*);

inline ns5__SoapTasks * soap_new_ns5__SoapTasks(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__SoapTasks(soap, n, NULL, NULL, NULL);
}

inline ns5__SoapTasks * soap_new_req_ns5__SoapTasks(
	struct soap *soap)
{
	ns5__SoapTasks *_p = soap_new_ns5__SoapTasks(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__SoapTasks * soap_new_set_ns5__SoapTasks(
	struct soap *soap,
	const std::vector<ns7__SoapTask *> & Task)
{
	ns5__SoapTasks *_p = soap_new_ns5__SoapTasks(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__SoapTasks::Task = Task;
	}
	return _p;
}

inline int soap_write_ns5__SoapTasks(struct soap *soap, ns5__SoapTasks const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapTasks", p->soap_type() == SOAP_TYPE_ns5__SoapTasks ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__SoapTasks(struct soap *soap, const char *URL, ns5__SoapTasks const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapTasks", p->soap_type() == SOAP_TYPE_ns5__SoapTasks ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__SoapTasks(struct soap *soap, const char *URL, ns5__SoapTasks const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapTasks", p->soap_type() == SOAP_TYPE_ns5__SoapTasks ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__SoapTasks * SOAP_FMAC4 soap_get_ns5__SoapTasks(struct soap*, ns5__SoapTasks *, const char*, const char*);

inline int soap_read_ns5__SoapTasks(struct soap *soap, ns5__SoapTasks *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__SoapTasks(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__SoapTasks(struct soap *soap, const char *URL, ns5__SoapTasks *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__SoapTasks(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__SoapTasks(struct soap *soap, ns5__SoapTasks *p)
{
	if (soap_read_ns5__SoapTasks(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__BreakpointsResponses_DEFINED
#define SOAP_TYPE_ns5__BreakpointsResponses_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__BreakpointsResponses(struct soap*, const char*, int, const ns5__BreakpointsResponses *, const char*);
SOAP_FMAC3 ns5__BreakpointsResponses * SOAP_FMAC4 soap_in_ns5__BreakpointsResponses(struct soap*, const char*, ns5__BreakpointsResponses *, const char*);
SOAP_FMAC1 ns5__BreakpointsResponses * SOAP_FMAC2 soap_instantiate_ns5__BreakpointsResponses(struct soap*, int, const char*, const char*, size_t*);

inline ns5__BreakpointsResponses * soap_new_ns5__BreakpointsResponses(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__BreakpointsResponses(soap, n, NULL, NULL, NULL);
}

inline ns5__BreakpointsResponses * soap_new_req_ns5__BreakpointsResponses(
	struct soap *soap)
{
	ns5__BreakpointsResponses *_p = soap_new_ns5__BreakpointsResponses(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__BreakpointsResponses * soap_new_set_ns5__BreakpointsResponses(
	struct soap *soap,
	const std::vector<ns7__BreakpointsResponse *> & BreakpointResponse)
{
	ns5__BreakpointsResponses *_p = soap_new_ns5__BreakpointsResponses(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__BreakpointsResponses::BreakpointResponse = BreakpointResponse;
	}
	return _p;
}

inline int soap_write_ns5__BreakpointsResponses(struct soap *soap, ns5__BreakpointsResponses const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:BreakpointsResponses", p->soap_type() == SOAP_TYPE_ns5__BreakpointsResponses ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__BreakpointsResponses(struct soap *soap, const char *URL, ns5__BreakpointsResponses const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:BreakpointsResponses", p->soap_type() == SOAP_TYPE_ns5__BreakpointsResponses ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__BreakpointsResponses(struct soap *soap, const char *URL, ns5__BreakpointsResponses const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:BreakpointsResponses", p->soap_type() == SOAP_TYPE_ns5__BreakpointsResponses ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__BreakpointsResponses * SOAP_FMAC4 soap_get_ns5__BreakpointsResponses(struct soap*, ns5__BreakpointsResponses *, const char*, const char*);

inline int soap_read_ns5__BreakpointsResponses(struct soap *soap, ns5__BreakpointsResponses *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__BreakpointsResponses(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__BreakpointsResponses(struct soap *soap, const char *URL, ns5__BreakpointsResponses *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__BreakpointsResponses(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__BreakpointsResponses(struct soap *soap, ns5__BreakpointsResponses *p)
{
	if (soap_read_ns5__BreakpointsResponses(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__SoapBreakpoints_DEFINED
#define SOAP_TYPE_ns5__SoapBreakpoints_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__SoapBreakpoints(struct soap*, const char*, int, const ns5__SoapBreakpoints *, const char*);
SOAP_FMAC3 ns5__SoapBreakpoints * SOAP_FMAC4 soap_in_ns5__SoapBreakpoints(struct soap*, const char*, ns5__SoapBreakpoints *, const char*);
SOAP_FMAC1 ns5__SoapBreakpoints * SOAP_FMAC2 soap_instantiate_ns5__SoapBreakpoints(struct soap*, int, const char*, const char*, size_t*);

inline ns5__SoapBreakpoints * soap_new_ns5__SoapBreakpoints(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__SoapBreakpoints(soap, n, NULL, NULL, NULL);
}

inline ns5__SoapBreakpoints * soap_new_req_ns5__SoapBreakpoints(
	struct soap *soap)
{
	ns5__SoapBreakpoints *_p = soap_new_ns5__SoapBreakpoints(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__SoapBreakpoints * soap_new_set_ns5__SoapBreakpoints(
	struct soap *soap,
	const std::vector<ns7__SoapBreakpoint *> & BreakPoint)
{
	ns5__SoapBreakpoints *_p = soap_new_ns5__SoapBreakpoints(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__SoapBreakpoints::BreakPoint = BreakPoint;
	}
	return _p;
}

inline int soap_write_ns5__SoapBreakpoints(struct soap *soap, ns5__SoapBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapBreakpoints", p->soap_type() == SOAP_TYPE_ns5__SoapBreakpoints ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__SoapBreakpoints(struct soap *soap, const char *URL, ns5__SoapBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapBreakpoints", p->soap_type() == SOAP_TYPE_ns5__SoapBreakpoints ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__SoapBreakpoints(struct soap *soap, const char *URL, ns5__SoapBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SoapBreakpoints", p->soap_type() == SOAP_TYPE_ns5__SoapBreakpoints ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__SoapBreakpoints * SOAP_FMAC4 soap_get_ns5__SoapBreakpoints(struct soap*, ns5__SoapBreakpoints *, const char*, const char*);

inline int soap_read_ns5__SoapBreakpoints(struct soap *soap, ns5__SoapBreakpoints *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__SoapBreakpoints(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__SoapBreakpoints(struct soap *soap, const char *URL, ns5__SoapBreakpoints *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__SoapBreakpoints(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__SoapBreakpoints(struct soap *soap, ns5__SoapBreakpoints *p)
{
	if (soap_read_ns5__SoapBreakpoints(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__Records_DEFINED
#define SOAP_TYPE_ns5__Records_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__Records(struct soap*, const char*, int, const ns5__Records *, const char*);
SOAP_FMAC3 ns5__Records * SOAP_FMAC4 soap_in_ns5__Records(struct soap*, const char*, ns5__Records *, const char*);
SOAP_FMAC1 ns5__Records * SOAP_FMAC2 soap_instantiate_ns5__Records(struct soap*, int, const char*, const char*, size_t*);

inline ns5__Records * soap_new_ns5__Records(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__Records(soap, n, NULL, NULL, NULL);
}

inline ns5__Records * soap_new_req_ns5__Records(
	struct soap *soap)
{
	ns5__Records *_p = soap_new_ns5__Records(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__Records * soap_new_set_ns5__Records(
	struct soap *soap,
	const std::vector<std::string> & record)
{
	ns5__Records *_p = soap_new_ns5__Records(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__Records::record = record;
	}
	return _p;
}

inline int soap_write_ns5__Records(struct soap *soap, ns5__Records const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:Records", p->soap_type() == SOAP_TYPE_ns5__Records ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__Records(struct soap *soap, const char *URL, ns5__Records const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:Records", p->soap_type() == SOAP_TYPE_ns5__Records ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__Records(struct soap *soap, const char *URL, ns5__Records const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:Records", p->soap_type() == SOAP_TYPE_ns5__Records ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__Records * SOAP_FMAC4 soap_get_ns5__Records(struct soap*, ns5__Records *, const char*, const char*);

inline int soap_read_ns5__Records(struct soap *soap, ns5__Records *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__Records(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__Records(struct soap *soap, const char *URL, ns5__Records *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__Records(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__Records(struct soap *soap, ns5__Records *p)
{
	if (soap_read_ns5__Records(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__VALApplications_DEFINED
#define SOAP_TYPE_ns5__VALApplications_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__VALApplications(struct soap*, const char*, int, const ns5__VALApplications *, const char*);
SOAP_FMAC3 ns5__VALApplications * SOAP_FMAC4 soap_in_ns5__VALApplications(struct soap*, const char*, ns5__VALApplications *, const char*);
SOAP_FMAC1 ns5__VALApplications * SOAP_FMAC2 soap_instantiate_ns5__VALApplications(struct soap*, int, const char*, const char*, size_t*);

inline ns5__VALApplications * soap_new_ns5__VALApplications(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__VALApplications(soap, n, NULL, NULL, NULL);
}

inline ns5__VALApplications * soap_new_req_ns5__VALApplications(
	struct soap *soap)
{
	ns5__VALApplications *_p = soap_new_ns5__VALApplications(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__VALApplications * soap_new_set_ns5__VALApplications(
	struct soap *soap,
	const std::vector<ns2__VALApplication *> & application)
{
	ns5__VALApplications *_p = soap_new_ns5__VALApplications(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__VALApplications::application = application;
	}
	return _p;
}

inline int soap_write_ns5__VALApplications(struct soap *soap, ns5__VALApplications const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:VALApplications", p->soap_type() == SOAP_TYPE_ns5__VALApplications ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__VALApplications(struct soap *soap, const char *URL, ns5__VALApplications const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:VALApplications", p->soap_type() == SOAP_TYPE_ns5__VALApplications ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__VALApplications(struct soap *soap, const char *URL, ns5__VALApplications const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:VALApplications", p->soap_type() == SOAP_TYPE_ns5__VALApplications ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__VALApplications * SOAP_FMAC4 soap_get_ns5__VALApplications(struct soap*, ns5__VALApplications *, const char*, const char*);

inline int soap_read_ns5__VALApplications(struct soap *soap, ns5__VALApplications *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__VALApplications(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__VALApplications(struct soap *soap, const char *URL, ns5__VALApplications *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__VALApplications(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__VALApplications(struct soap *soap, ns5__VALApplications *p)
{
	if (soap_read_ns5__VALApplications(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__Robots_DEFINED
#define SOAP_TYPE_ns5__Robots_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__Robots(struct soap*, const char*, int, const ns5__Robots *, const char*);
SOAP_FMAC3 ns5__Robots * SOAP_FMAC4 soap_in_ns5__Robots(struct soap*, const char*, ns5__Robots *, const char*);
SOAP_FMAC1 ns5__Robots * SOAP_FMAC2 soap_instantiate_ns5__Robots(struct soap*, int, const char*, const char*, size_t*);

inline ns5__Robots * soap_new_ns5__Robots(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__Robots(soap, n, NULL, NULL, NULL);
}

inline ns5__Robots * soap_new_req_ns5__Robots(
	struct soap *soap)
{
	ns5__Robots *_p = soap_new_ns5__Robots(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__Robots * soap_new_set_ns5__Robots(
	struct soap *soap,
	const std::vector<ns1__Robot *> & Robots)
{
	ns5__Robots *_p = soap_new_ns5__Robots(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__Robots::Robots = Robots;
	}
	return _p;
}

inline int soap_write_ns5__Robots(struct soap *soap, ns5__Robots const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:Robots", p->soap_type() == SOAP_TYPE_ns5__Robots ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__Robots(struct soap *soap, const char *URL, ns5__Robots const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:Robots", p->soap_type() == SOAP_TYPE_ns5__Robots ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__Robots(struct soap *soap, const char *URL, ns5__Robots const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:Robots", p->soap_type() == SOAP_TYPE_ns5__Robots ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__Robots * SOAP_FMAC4 soap_get_ns5__Robots(struct soap*, ns5__Robots *, const char*, const char*);

inline int soap_read_ns5__Robots(struct soap *soap, ns5__Robots *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__Robots(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__Robots(struct soap *soap, const char *URL, ns5__Robots *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__Robots(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__Robots(struct soap *soap, ns5__Robots *p)
{
	if (soap_read_ns5__Robots(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__Versions_DEFINED
#define SOAP_TYPE_ns5__Versions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__Versions(struct soap*, const char*, int, const ns5__Versions *, const char*);
SOAP_FMAC3 ns5__Versions * SOAP_FMAC4 soap_in_ns5__Versions(struct soap*, const char*, ns5__Versions *, const char*);
SOAP_FMAC1 ns5__Versions * SOAP_FMAC2 soap_instantiate_ns5__Versions(struct soap*, int, const char*, const char*, size_t*);

inline ns5__Versions * soap_new_ns5__Versions(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__Versions(soap, n, NULL, NULL, NULL);
}

inline ns5__Versions * soap_new_req_ns5__Versions(
	struct soap *soap)
{
	ns5__Versions *_p = soap_new_ns5__Versions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__Versions * soap_new_set_ns5__Versions(
	struct soap *soap,
	const std::vector<ns1__Version *> & Versions)
{
	ns5__Versions *_p = soap_new_ns5__Versions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__Versions::Versions = Versions;
	}
	return _p;
}

inline int soap_write_ns5__Versions(struct soap *soap, ns5__Versions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:Versions", p->soap_type() == SOAP_TYPE_ns5__Versions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__Versions(struct soap *soap, const char *URL, ns5__Versions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:Versions", p->soap_type() == SOAP_TYPE_ns5__Versions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__Versions(struct soap *soap, const char *URL, ns5__Versions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:Versions", p->soap_type() == SOAP_TYPE_ns5__Versions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__Versions * SOAP_FMAC4 soap_get_ns5__Versions(struct soap*, ns5__Versions *, const char*, const char*);

inline int soap_read_ns5__Versions(struct soap *soap, ns5__Versions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__Versions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__Versions(struct soap *soap, const char *URL, ns5__Versions *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__Versions(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__Versions(struct soap *soap, ns5__Versions *p)
{
	if (soap_read_ns5__Versions(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__Parameters_DEFINED
#define SOAP_TYPE_ns5__Parameters_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__Parameters(struct soap*, const char*, int, const ns5__Parameters *, const char*);
SOAP_FMAC3 ns5__Parameters * SOAP_FMAC4 soap_in_ns5__Parameters(struct soap*, const char*, ns5__Parameters *, const char*);
SOAP_FMAC1 ns5__Parameters * SOAP_FMAC2 soap_instantiate_ns5__Parameters(struct soap*, int, const char*, const char*, size_t*);

inline ns5__Parameters * soap_new_ns5__Parameters(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__Parameters(soap, n, NULL, NULL, NULL);
}

inline ns5__Parameters * soap_new_req_ns5__Parameters(
	struct soap *soap)
{
	ns5__Parameters *_p = soap_new_ns5__Parameters(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__Parameters * soap_new_set_ns5__Parameters(
	struct soap *soap,
	const std::vector<ns1__Parameter *> & Parameters)
{
	ns5__Parameters *_p = soap_new_ns5__Parameters(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__Parameters::Parameters = Parameters;
	}
	return _p;
}

inline int soap_write_ns5__Parameters(struct soap *soap, ns5__Parameters const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:Parameters", p->soap_type() == SOAP_TYPE_ns5__Parameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__Parameters(struct soap *soap, const char *URL, ns5__Parameters const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:Parameters", p->soap_type() == SOAP_TYPE_ns5__Parameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__Parameters(struct soap *soap, const char *URL, ns5__Parameters const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:Parameters", p->soap_type() == SOAP_TYPE_ns5__Parameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__Parameters * SOAP_FMAC4 soap_get_ns5__Parameters(struct soap*, ns5__Parameters *, const char*, const char*);

inline int soap_read_ns5__Parameters(struct soap *soap, ns5__Parameters *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__Parameters(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__Parameters(struct soap *soap, const char *URL, ns5__Parameters *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__Parameters(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__Parameters(struct soap *soap, ns5__Parameters *p)
{
	if (soap_read_ns5__Parameters(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__JointPos_DEFINED
#define SOAP_TYPE_ns5__JointPos_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__JointPos(struct soap*, const char*, int, const ns5__JointPos *, const char*);
SOAP_FMAC3 ns5__JointPos * SOAP_FMAC4 soap_in_ns5__JointPos(struct soap*, const char*, ns5__JointPos *, const char*);
SOAP_FMAC1 ns5__JointPos * SOAP_FMAC2 soap_instantiate_ns5__JointPos(struct soap*, int, const char*, const char*, size_t*);

inline ns5__JointPos * soap_new_ns5__JointPos(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__JointPos(soap, n, NULL, NULL, NULL);
}

inline ns5__JointPos * soap_new_req_ns5__JointPos(
	struct soap *soap,
	const std::vector<double> & item)
{
	ns5__JointPos *_p = soap_new_ns5__JointPos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__JointPos::item = item;
	}
	return _p;
}

inline ns5__JointPos * soap_new_set_ns5__JointPos(
	struct soap *soap,
	const std::vector<double> & item)
{
	ns5__JointPos *_p = soap_new_ns5__JointPos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__JointPos::item = item;
	}
	return _p;
}

inline int soap_write_ns5__JointPos(struct soap *soap, ns5__JointPos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:JointPos", p->soap_type() == SOAP_TYPE_ns5__JointPos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__JointPos(struct soap *soap, const char *URL, ns5__JointPos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:JointPos", p->soap_type() == SOAP_TYPE_ns5__JointPos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__JointPos(struct soap *soap, const char *URL, ns5__JointPos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:JointPos", p->soap_type() == SOAP_TYPE_ns5__JointPos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__JointPos * SOAP_FMAC4 soap_get_ns5__JointPos(struct soap*, ns5__JointPos *, const char*, const char*);

inline int soap_read_ns5__JointPos(struct soap *soap, ns5__JointPos *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__JointPos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__JointPos(struct soap *soap, const char *URL, ns5__JointPos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__JointPos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__JointPos(struct soap *soap, ns5__JointPos *p)
{
	if (soap_read_ns5__JointPos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__setRobotPosResponse_DEFINED
#define SOAP_TYPE__ns1__setRobotPosResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setRobotPosResponse(struct soap*, const char*, int, const _ns1__setRobotPosResponse *, const char*);
SOAP_FMAC3 _ns1__setRobotPosResponse * SOAP_FMAC4 soap_in__ns1__setRobotPosResponse(struct soap*, const char*, _ns1__setRobotPosResponse *, const char*);
SOAP_FMAC1 _ns1__setRobotPosResponse * SOAP_FMAC2 soap_instantiate__ns1__setRobotPosResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__setRobotPosResponse * soap_new__ns1__setRobotPosResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__setRobotPosResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__setRobotPosResponse * soap_new_req__ns1__setRobotPosResponse(
	struct soap *soap)
{
	_ns1__setRobotPosResponse *_p = soap_new__ns1__setRobotPosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__setRobotPosResponse * soap_new_set__ns1__setRobotPosResponse(
	struct soap *soap)
{
	_ns1__setRobotPosResponse *_p = soap_new__ns1__setRobotPosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__setRobotPosResponse(struct soap *soap, _ns1__setRobotPosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:setRobotPosResponse", p->soap_type() == SOAP_TYPE__ns1__setRobotPosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__setRobotPosResponse(struct soap *soap, const char *URL, _ns1__setRobotPosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:setRobotPosResponse", p->soap_type() == SOAP_TYPE__ns1__setRobotPosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__setRobotPosResponse(struct soap *soap, const char *URL, _ns1__setRobotPosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:setRobotPosResponse", p->soap_type() == SOAP_TYPE__ns1__setRobotPosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__setRobotPosResponse * SOAP_FMAC4 soap_get__ns1__setRobotPosResponse(struct soap*, _ns1__setRobotPosResponse *, const char*, const char*);

inline int soap_read__ns1__setRobotPosResponse(struct soap *soap, _ns1__setRobotPosResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__setRobotPosResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__setRobotPosResponse(struct soap *soap, const char *URL, _ns1__setRobotPosResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__setRobotPosResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__setRobotPosResponse(struct soap *soap, _ns1__setRobotPosResponse *p)
{
	if (soap_read__ns1__setRobotPosResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__setRobotJointPos_DEFINED
#define SOAP_TYPE__ns1__setRobotJointPos_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setRobotJointPos(struct soap*, const char*, int, const _ns1__setRobotJointPos *, const char*);
SOAP_FMAC3 _ns1__setRobotJointPos * SOAP_FMAC4 soap_in__ns1__setRobotJointPos(struct soap*, const char*, _ns1__setRobotJointPos *, const char*);
SOAP_FMAC1 _ns1__setRobotJointPos * SOAP_FMAC2 soap_instantiate__ns1__setRobotJointPos(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__setRobotJointPos * soap_new__ns1__setRobotJointPos(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__setRobotJointPos(soap, n, NULL, NULL, NULL);
}

inline _ns1__setRobotJointPos * soap_new_req__ns1__setRobotJointPos(
	struct soap *soap,
	int robot,
	ns1__JointPos *pos)
{
	_ns1__setRobotJointPos *_p = soap_new__ns1__setRobotJointPos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__setRobotJointPos::robot = robot;
		_p->_ns1__setRobotJointPos::pos = pos;
	}
	return _p;
}

inline _ns1__setRobotJointPos * soap_new_set__ns1__setRobotJointPos(
	struct soap *soap,
	int robot,
	ns1__JointPos *pos)
{
	_ns1__setRobotJointPos *_p = soap_new__ns1__setRobotJointPos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__setRobotJointPos::robot = robot;
		_p->_ns1__setRobotJointPos::pos = pos;
	}
	return _p;
}

inline int soap_write__ns1__setRobotJointPos(struct soap *soap, _ns1__setRobotJointPos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:setRobotJointPos", p->soap_type() == SOAP_TYPE__ns1__setRobotJointPos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__setRobotJointPos(struct soap *soap, const char *URL, _ns1__setRobotJointPos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:setRobotJointPos", p->soap_type() == SOAP_TYPE__ns1__setRobotJointPos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__setRobotJointPos(struct soap *soap, const char *URL, _ns1__setRobotJointPos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:setRobotJointPos", p->soap_type() == SOAP_TYPE__ns1__setRobotJointPos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__setRobotJointPos * SOAP_FMAC4 soap_get__ns1__setRobotJointPos(struct soap*, _ns1__setRobotJointPos *, const char*, const char*);

inline int soap_read__ns1__setRobotJointPos(struct soap *soap, _ns1__setRobotJointPos *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__setRobotJointPos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__setRobotJointPos(struct soap *soap, const char *URL, _ns1__setRobotJointPos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__setRobotJointPos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__setRobotJointPos(struct soap *soap, _ns1__setRobotJointPos *p)
{
	if (soap_read__ns1__setRobotJointPos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getRobotJntCartPosResponse_DEFINED
#define SOAP_TYPE__ns1__getRobotJntCartPosResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getRobotJntCartPosResponse(struct soap*, const char*, int, const _ns1__getRobotJntCartPosResponse *, const char*);
SOAP_FMAC3 _ns1__getRobotJntCartPosResponse * SOAP_FMAC4 soap_in__ns1__getRobotJntCartPosResponse(struct soap*, const char*, _ns1__getRobotJntCartPosResponse *, const char*);
SOAP_FMAC1 _ns1__getRobotJntCartPosResponse * SOAP_FMAC2 soap_instantiate__ns1__getRobotJntCartPosResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getRobotJntCartPosResponse * soap_new__ns1__getRobotJntCartPosResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getRobotJntCartPosResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getRobotJntCartPosResponse * soap_new_req__ns1__getRobotJntCartPosResponse(
	struct soap *soap,
	ns1__JointPos *jntPos,
	ns1__CartesianPos *cartPos)
{
	_ns1__getRobotJntCartPosResponse *_p = soap_new__ns1__getRobotJntCartPosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getRobotJntCartPosResponse::jntPos = jntPos;
		_p->_ns1__getRobotJntCartPosResponse::cartPos = cartPos;
	}
	return _p;
}

inline _ns1__getRobotJntCartPosResponse * soap_new_set__ns1__getRobotJntCartPosResponse(
	struct soap *soap,
	ns1__JointPos *jntPos,
	ns1__CartesianPos *cartPos)
{
	_ns1__getRobotJntCartPosResponse *_p = soap_new__ns1__getRobotJntCartPosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getRobotJntCartPosResponse::jntPos = jntPos;
		_p->_ns1__getRobotJntCartPosResponse::cartPos = cartPos;
	}
	return _p;
}

inline int soap_write__ns1__getRobotJntCartPosResponse(struct soap *soap, _ns1__getRobotJntCartPosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRobotJntCartPosResponse", p->soap_type() == SOAP_TYPE__ns1__getRobotJntCartPosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getRobotJntCartPosResponse(struct soap *soap, const char *URL, _ns1__getRobotJntCartPosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRobotJntCartPosResponse", p->soap_type() == SOAP_TYPE__ns1__getRobotJntCartPosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getRobotJntCartPosResponse(struct soap *soap, const char *URL, _ns1__getRobotJntCartPosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRobotJntCartPosResponse", p->soap_type() == SOAP_TYPE__ns1__getRobotJntCartPosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getRobotJntCartPosResponse * SOAP_FMAC4 soap_get__ns1__getRobotJntCartPosResponse(struct soap*, _ns1__getRobotJntCartPosResponse *, const char*, const char*);

inline int soap_read__ns1__getRobotJntCartPosResponse(struct soap *soap, _ns1__getRobotJntCartPosResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getRobotJntCartPosResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getRobotJntCartPosResponse(struct soap *soap, const char *URL, _ns1__getRobotJntCartPosResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getRobotJntCartPosResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getRobotJntCartPosResponse(struct soap *soap, _ns1__getRobotJntCartPosResponse *p)
{
	if (soap_read__ns1__getRobotJntCartPosResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getRobotJntCartPos_DEFINED
#define SOAP_TYPE__ns1__getRobotJntCartPos_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getRobotJntCartPos(struct soap*, const char*, int, const _ns1__getRobotJntCartPos *, const char*);
SOAP_FMAC3 _ns1__getRobotJntCartPos * SOAP_FMAC4 soap_in__ns1__getRobotJntCartPos(struct soap*, const char*, _ns1__getRobotJntCartPos *, const char*);
SOAP_FMAC1 _ns1__getRobotJntCartPos * SOAP_FMAC2 soap_instantiate__ns1__getRobotJntCartPos(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getRobotJntCartPos * soap_new__ns1__getRobotJntCartPos(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getRobotJntCartPos(soap, n, NULL, NULL, NULL);
}

inline _ns1__getRobotJntCartPos * soap_new_req__ns1__getRobotJntCartPos(
	struct soap *soap,
	int robot,
	ns1__CartesianPos *tool,
	ns1__CartesianPos *frame)
{
	_ns1__getRobotJntCartPos *_p = soap_new__ns1__getRobotJntCartPos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getRobotJntCartPos::robot = robot;
		_p->_ns1__getRobotJntCartPos::tool = tool;
		_p->_ns1__getRobotJntCartPos::frame = frame;
	}
	return _p;
}

inline _ns1__getRobotJntCartPos * soap_new_set__ns1__getRobotJntCartPos(
	struct soap *soap,
	int robot,
	ns1__CartesianPos *tool,
	ns1__CartesianPos *frame)
{
	_ns1__getRobotJntCartPos *_p = soap_new__ns1__getRobotJntCartPos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getRobotJntCartPos::robot = robot;
		_p->_ns1__getRobotJntCartPos::tool = tool;
		_p->_ns1__getRobotJntCartPos::frame = frame;
	}
	return _p;
}

inline int soap_write__ns1__getRobotJntCartPos(struct soap *soap, _ns1__getRobotJntCartPos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRobotJntCartPos", p->soap_type() == SOAP_TYPE__ns1__getRobotJntCartPos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getRobotJntCartPos(struct soap *soap, const char *URL, _ns1__getRobotJntCartPos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRobotJntCartPos", p->soap_type() == SOAP_TYPE__ns1__getRobotJntCartPos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getRobotJntCartPos(struct soap *soap, const char *URL, _ns1__getRobotJntCartPos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRobotJntCartPos", p->soap_type() == SOAP_TYPE__ns1__getRobotJntCartPos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getRobotJntCartPos * SOAP_FMAC4 soap_get__ns1__getRobotJntCartPos(struct soap*, _ns1__getRobotJntCartPos *, const char*, const char*);

inline int soap_read__ns1__getRobotJntCartPos(struct soap *soap, _ns1__getRobotJntCartPos *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getRobotJntCartPos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getRobotJntCartPos(struct soap *soap, const char *URL, _ns1__getRobotJntCartPos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getRobotJntCartPos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getRobotJntCartPos(struct soap *soap, _ns1__getRobotJntCartPos *p)
{
	if (soap_read__ns1__getRobotJntCartPos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getRobotJointPosResponse_DEFINED
#define SOAP_TYPE__ns1__getRobotJointPosResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getRobotJointPosResponse(struct soap*, const char*, int, const _ns1__getRobotJointPosResponse *, const char*);
SOAP_FMAC3 _ns1__getRobotJointPosResponse * SOAP_FMAC4 soap_in__ns1__getRobotJointPosResponse(struct soap*, const char*, _ns1__getRobotJointPosResponse *, const char*);
SOAP_FMAC1 _ns1__getRobotJointPosResponse * SOAP_FMAC2 soap_instantiate__ns1__getRobotJointPosResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getRobotJointPosResponse * soap_new__ns1__getRobotJointPosResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getRobotJointPosResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getRobotJointPosResponse * soap_new_req__ns1__getRobotJointPosResponse(
	struct soap *soap,
	ns1__JointPos *pos)
{
	_ns1__getRobotJointPosResponse *_p = soap_new__ns1__getRobotJointPosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getRobotJointPosResponse::pos = pos;
	}
	return _p;
}

inline _ns1__getRobotJointPosResponse * soap_new_set__ns1__getRobotJointPosResponse(
	struct soap *soap,
	ns1__JointPos *pos)
{
	_ns1__getRobotJointPosResponse *_p = soap_new__ns1__getRobotJointPosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getRobotJointPosResponse::pos = pos;
	}
	return _p;
}

inline int soap_write__ns1__getRobotJointPosResponse(struct soap *soap, _ns1__getRobotJointPosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRobotJointPosResponse", p->soap_type() == SOAP_TYPE__ns1__getRobotJointPosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getRobotJointPosResponse(struct soap *soap, const char *URL, _ns1__getRobotJointPosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRobotJointPosResponse", p->soap_type() == SOAP_TYPE__ns1__getRobotJointPosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getRobotJointPosResponse(struct soap *soap, const char *URL, _ns1__getRobotJointPosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRobotJointPosResponse", p->soap_type() == SOAP_TYPE__ns1__getRobotJointPosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getRobotJointPosResponse * SOAP_FMAC4 soap_get__ns1__getRobotJointPosResponse(struct soap*, _ns1__getRobotJointPosResponse *, const char*, const char*);

inline int soap_read__ns1__getRobotJointPosResponse(struct soap *soap, _ns1__getRobotJointPosResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getRobotJointPosResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getRobotJointPosResponse(struct soap *soap, const char *URL, _ns1__getRobotJointPosResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getRobotJointPosResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getRobotJointPosResponse(struct soap *soap, _ns1__getRobotJointPosResponse *p)
{
	if (soap_read__ns1__getRobotJointPosResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getRobotJointPos_DEFINED
#define SOAP_TYPE__ns1__getRobotJointPos_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getRobotJointPos(struct soap*, const char*, int, const _ns1__getRobotJointPos *, const char*);
SOAP_FMAC3 _ns1__getRobotJointPos * SOAP_FMAC4 soap_in__ns1__getRobotJointPos(struct soap*, const char*, _ns1__getRobotJointPos *, const char*);
SOAP_FMAC1 _ns1__getRobotJointPos * SOAP_FMAC2 soap_instantiate__ns1__getRobotJointPos(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getRobotJointPos * soap_new__ns1__getRobotJointPos(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getRobotJointPos(soap, n, NULL, NULL, NULL);
}

inline _ns1__getRobotJointPos * soap_new_req__ns1__getRobotJointPos(
	struct soap *soap,
	int robot)
{
	_ns1__getRobotJointPos *_p = soap_new__ns1__getRobotJointPos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getRobotJointPos::robot = robot;
	}
	return _p;
}

inline _ns1__getRobotJointPos * soap_new_set__ns1__getRobotJointPos(
	struct soap *soap,
	int robot)
{
	_ns1__getRobotJointPos *_p = soap_new__ns1__getRobotJointPos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getRobotJointPos::robot = robot;
	}
	return _p;
}

inline int soap_write__ns1__getRobotJointPos(struct soap *soap, _ns1__getRobotJointPos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRobotJointPos", p->soap_type() == SOAP_TYPE__ns1__getRobotJointPos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getRobotJointPos(struct soap *soap, const char *URL, _ns1__getRobotJointPos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRobotJointPos", p->soap_type() == SOAP_TYPE__ns1__getRobotJointPos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getRobotJointPos(struct soap *soap, const char *URL, _ns1__getRobotJointPos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRobotJointPos", p->soap_type() == SOAP_TYPE__ns1__getRobotJointPos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getRobotJointPos * SOAP_FMAC4 soap_get__ns1__getRobotJointPos(struct soap*, _ns1__getRobotJointPos *, const char*, const char*);

inline int soap_read__ns1__getRobotJointPos(struct soap *soap, _ns1__getRobotJointPos *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getRobotJointPos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getRobotJointPos(struct soap *soap, const char *URL, _ns1__getRobotJointPos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getRobotJointPos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getRobotJointPos(struct soap *soap, _ns1__getRobotJointPos *p)
{
	if (soap_read__ns1__getRobotJointPos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getRobotsResponse_DEFINED
#define SOAP_TYPE__ns1__getRobotsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getRobotsResponse(struct soap*, const char*, int, const _ns1__getRobotsResponse *, const char*);
SOAP_FMAC3 _ns1__getRobotsResponse * SOAP_FMAC4 soap_in__ns1__getRobotsResponse(struct soap*, const char*, _ns1__getRobotsResponse *, const char*);
SOAP_FMAC1 _ns1__getRobotsResponse * SOAP_FMAC2 soap_instantiate__ns1__getRobotsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getRobotsResponse * soap_new__ns1__getRobotsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getRobotsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getRobotsResponse * soap_new_req__ns1__getRobotsResponse(
	struct soap *soap,
	ns1__Robots *out)
{
	_ns1__getRobotsResponse *_p = soap_new__ns1__getRobotsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getRobotsResponse::out = out;
	}
	return _p;
}

inline _ns1__getRobotsResponse * soap_new_set__ns1__getRobotsResponse(
	struct soap *soap,
	ns1__Robots *out)
{
	_ns1__getRobotsResponse *_p = soap_new__ns1__getRobotsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getRobotsResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns1__getRobotsResponse(struct soap *soap, _ns1__getRobotsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRobotsResponse", p->soap_type() == SOAP_TYPE__ns1__getRobotsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getRobotsResponse(struct soap *soap, const char *URL, _ns1__getRobotsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRobotsResponse", p->soap_type() == SOAP_TYPE__ns1__getRobotsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getRobotsResponse(struct soap *soap, const char *URL, _ns1__getRobotsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRobotsResponse", p->soap_type() == SOAP_TYPE__ns1__getRobotsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getRobotsResponse * SOAP_FMAC4 soap_get__ns1__getRobotsResponse(struct soap*, _ns1__getRobotsResponse *, const char*, const char*);

inline int soap_read__ns1__getRobotsResponse(struct soap *soap, _ns1__getRobotsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getRobotsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getRobotsResponse(struct soap *soap, const char *URL, _ns1__getRobotsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getRobotsResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getRobotsResponse(struct soap *soap, _ns1__getRobotsResponse *p)
{
	if (soap_read__ns1__getRobotsResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getRobots_DEFINED
#define SOAP_TYPE__ns1__getRobots_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getRobots(struct soap*, const char*, int, const _ns1__getRobots *, const char*);
SOAP_FMAC3 _ns1__getRobots * SOAP_FMAC4 soap_in__ns1__getRobots(struct soap*, const char*, _ns1__getRobots *, const char*);
SOAP_FMAC1 _ns1__getRobots * SOAP_FMAC2 soap_instantiate__ns1__getRobots(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getRobots * soap_new__ns1__getRobots(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getRobots(soap, n, NULL, NULL, NULL);
}

inline _ns1__getRobots * soap_new_req__ns1__getRobots(
	struct soap *soap)
{
	_ns1__getRobots *_p = soap_new__ns1__getRobots(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getRobots * soap_new_set__ns1__getRobots(
	struct soap *soap)
{
	_ns1__getRobots *_p = soap_new__ns1__getRobots(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__getRobots(struct soap *soap, _ns1__getRobots const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRobots", p->soap_type() == SOAP_TYPE__ns1__getRobots ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getRobots(struct soap *soap, const char *URL, _ns1__getRobots const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRobots", p->soap_type() == SOAP_TYPE__ns1__getRobots ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getRobots(struct soap *soap, const char *URL, _ns1__getRobots const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRobots", p->soap_type() == SOAP_TYPE__ns1__getRobots ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getRobots * SOAP_FMAC4 soap_get__ns1__getRobots(struct soap*, _ns1__getRobots *, const char*, const char*);

inline int soap_read__ns1__getRobots(struct soap *soap, _ns1__getRobots *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getRobots(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getRobots(struct soap *soap, const char *URL, _ns1__getRobots *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getRobots(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getRobots(struct soap *soap, _ns1__getRobots *p)
{
	if (soap_read__ns1__getRobots(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__logoutResponse_DEFINED
#define SOAP_TYPE__ns1__logoutResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__logoutResponse(struct soap*, const char*, int, const _ns1__logoutResponse *, const char*);
SOAP_FMAC3 _ns1__logoutResponse * SOAP_FMAC4 soap_in__ns1__logoutResponse(struct soap*, const char*, _ns1__logoutResponse *, const char*);
SOAP_FMAC1 _ns1__logoutResponse * SOAP_FMAC2 soap_instantiate__ns1__logoutResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__logoutResponse * soap_new__ns1__logoutResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__logoutResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__logoutResponse * soap_new_req__ns1__logoutResponse(
	struct soap *soap)
{
	_ns1__logoutResponse *_p = soap_new__ns1__logoutResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__logoutResponse * soap_new_set__ns1__logoutResponse(
	struct soap *soap)
{
	_ns1__logoutResponse *_p = soap_new__ns1__logoutResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__logoutResponse(struct soap *soap, _ns1__logoutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:logoutResponse", p->soap_type() == SOAP_TYPE__ns1__logoutResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__logoutResponse(struct soap *soap, const char *URL, _ns1__logoutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:logoutResponse", p->soap_type() == SOAP_TYPE__ns1__logoutResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__logoutResponse(struct soap *soap, const char *URL, _ns1__logoutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:logoutResponse", p->soap_type() == SOAP_TYPE__ns1__logoutResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__logoutResponse * SOAP_FMAC4 soap_get__ns1__logoutResponse(struct soap*, _ns1__logoutResponse *, const char*, const char*);

inline int soap_read__ns1__logoutResponse(struct soap *soap, _ns1__logoutResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__logoutResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__logoutResponse(struct soap *soap, const char *URL, _ns1__logoutResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__logoutResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__logoutResponse(struct soap *soap, _ns1__logoutResponse *p)
{
	if (soap_read__ns1__logoutResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__logout_DEFINED
#define SOAP_TYPE__ns1__logout_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__logout(struct soap*, const char*, int, const _ns1__logout *, const char*);
SOAP_FMAC3 _ns1__logout * SOAP_FMAC4 soap_in__ns1__logout(struct soap*, const char*, _ns1__logout *, const char*);
SOAP_FMAC1 _ns1__logout * SOAP_FMAC2 soap_instantiate__ns1__logout(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__logout * soap_new__ns1__logout(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__logout(soap, n, NULL, NULL, NULL);
}

inline _ns1__logout * soap_new_req__ns1__logout(
	struct soap *soap)
{
	_ns1__logout *_p = soap_new__ns1__logout(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__logout * soap_new_set__ns1__logout(
	struct soap *soap)
{
	_ns1__logout *_p = soap_new__ns1__logout(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__logout(struct soap *soap, _ns1__logout const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:logout", p->soap_type() == SOAP_TYPE__ns1__logout ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__logout(struct soap *soap, const char *URL, _ns1__logout const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:logout", p->soap_type() == SOAP_TYPE__ns1__logout ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__logout(struct soap *soap, const char *URL, _ns1__logout const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:logout", p->soap_type() == SOAP_TYPE__ns1__logout ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__logout * SOAP_FMAC4 soap_get__ns1__logout(struct soap*, _ns1__logout *, const char*, const char*);

inline int soap_read__ns1__logout(struct soap *soap, _ns1__logout *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__logout(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__logout(struct soap *soap, const char *URL, _ns1__logout *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__logout(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__logout(struct soap *soap, _ns1__logout *p)
{
	if (soap_read__ns1__logout(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__loginResponse_DEFINED
#define SOAP_TYPE__ns1__loginResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__loginResponse(struct soap*, const char*, int, const _ns1__loginResponse *, const char*);
SOAP_FMAC3 _ns1__loginResponse * SOAP_FMAC4 soap_in__ns1__loginResponse(struct soap*, const char*, _ns1__loginResponse *, const char*);
SOAP_FMAC1 _ns1__loginResponse * SOAP_FMAC2 soap_instantiate__ns1__loginResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__loginResponse * soap_new__ns1__loginResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__loginResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__loginResponse * soap_new_req__ns1__loginResponse(
	struct soap *soap,
	int sid)
{
	_ns1__loginResponse *_p = soap_new__ns1__loginResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__loginResponse::sid = sid;
	}
	return _p;
}

inline _ns1__loginResponse * soap_new_set__ns1__loginResponse(
	struct soap *soap,
	int sid)
{
	_ns1__loginResponse *_p = soap_new__ns1__loginResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__loginResponse::sid = sid;
	}
	return _p;
}

inline int soap_write__ns1__loginResponse(struct soap *soap, _ns1__loginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:loginResponse", p->soap_type() == SOAP_TYPE__ns1__loginResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__loginResponse(struct soap *soap, const char *URL, _ns1__loginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:loginResponse", p->soap_type() == SOAP_TYPE__ns1__loginResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__loginResponse(struct soap *soap, const char *URL, _ns1__loginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:loginResponse", p->soap_type() == SOAP_TYPE__ns1__loginResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__loginResponse * SOAP_FMAC4 soap_get__ns1__loginResponse(struct soap*, _ns1__loginResponse *, const char*, const char*);

inline int soap_read__ns1__loginResponse(struct soap *soap, _ns1__loginResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__loginResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__loginResponse(struct soap *soap, const char *URL, _ns1__loginResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__loginResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__loginResponse(struct soap *soap, _ns1__loginResponse *p)
{
	if (soap_read__ns1__loginResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__login_DEFINED
#define SOAP_TYPE__ns1__login_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__login(struct soap*, const char*, int, const _ns1__login *, const char*);
SOAP_FMAC3 _ns1__login * SOAP_FMAC4 soap_in__ns1__login(struct soap*, const char*, _ns1__login *, const char*);
SOAP_FMAC1 _ns1__login * SOAP_FMAC2 soap_instantiate__ns1__login(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__login * soap_new__ns1__login(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__login(soap, n, NULL, NULL, NULL);
}

inline _ns1__login * soap_new_req__ns1__login(
	struct soap *soap)
{
	_ns1__login *_p = soap_new__ns1__login(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__login * soap_new_set__ns1__login(
	struct soap *soap,
	std::string *user,
	std::string *pwd)
{
	_ns1__login *_p = soap_new__ns1__login(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__login::user = user;
		_p->_ns1__login::pwd = pwd;
	}
	return _p;
}

inline int soap_write__ns1__login(struct soap *soap, _ns1__login const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:login", p->soap_type() == SOAP_TYPE__ns1__login ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__login(struct soap *soap, const char *URL, _ns1__login const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:login", p->soap_type() == SOAP_TYPE__ns1__login ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__login(struct soap *soap, const char *URL, _ns1__login const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:login", p->soap_type() == SOAP_TYPE__ns1__login ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__login * SOAP_FMAC4 soap_get__ns1__login(struct soap*, _ns1__login *, const char*, const char*);

inline int soap_read__ns1__login(struct soap *soap, _ns1__login *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__login(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__login(struct soap *soap, const char *URL, _ns1__login *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__login(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__login(struct soap *soap, _ns1__login *p)
{
	if (soap_read__ns1__login(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getCS8CompatibilityResponse_DEFINED
#define SOAP_TYPE__ns1__getCS8CompatibilityResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getCS8CompatibilityResponse(struct soap*, const char*, int, const _ns1__getCS8CompatibilityResponse *, const char*);
SOAP_FMAC3 _ns1__getCS8CompatibilityResponse * SOAP_FMAC4 soap_in__ns1__getCS8CompatibilityResponse(struct soap*, const char*, _ns1__getCS8CompatibilityResponse *, const char*);
SOAP_FMAC1 _ns1__getCS8CompatibilityResponse * SOAP_FMAC2 soap_instantiate__ns1__getCS8CompatibilityResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getCS8CompatibilityResponse * soap_new__ns1__getCS8CompatibilityResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getCS8CompatibilityResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getCS8CompatibilityResponse * soap_new_req__ns1__getCS8CompatibilityResponse(
	struct soap *soap)
{
	_ns1__getCS8CompatibilityResponse *_p = soap_new__ns1__getCS8CompatibilityResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getCS8CompatibilityResponse * soap_new_set__ns1__getCS8CompatibilityResponse(
	struct soap *soap,
	std::string *compatibility)
{
	_ns1__getCS8CompatibilityResponse *_p = soap_new__ns1__getCS8CompatibilityResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getCS8CompatibilityResponse::compatibility = compatibility;
	}
	return _p;
}

inline int soap_write__ns1__getCS8CompatibilityResponse(struct soap *soap, _ns1__getCS8CompatibilityResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getCS8CompatibilityResponse", p->soap_type() == SOAP_TYPE__ns1__getCS8CompatibilityResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getCS8CompatibilityResponse(struct soap *soap, const char *URL, _ns1__getCS8CompatibilityResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getCS8CompatibilityResponse", p->soap_type() == SOAP_TYPE__ns1__getCS8CompatibilityResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getCS8CompatibilityResponse(struct soap *soap, const char *URL, _ns1__getCS8CompatibilityResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getCS8CompatibilityResponse", p->soap_type() == SOAP_TYPE__ns1__getCS8CompatibilityResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getCS8CompatibilityResponse * SOAP_FMAC4 soap_get__ns1__getCS8CompatibilityResponse(struct soap*, _ns1__getCS8CompatibilityResponse *, const char*, const char*);

inline int soap_read__ns1__getCS8CompatibilityResponse(struct soap *soap, _ns1__getCS8CompatibilityResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getCS8CompatibilityResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getCS8CompatibilityResponse(struct soap *soap, const char *URL, _ns1__getCS8CompatibilityResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getCS8CompatibilityResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getCS8CompatibilityResponse(struct soap *soap, _ns1__getCS8CompatibilityResponse *p)
{
	if (soap_read__ns1__getCS8CompatibilityResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getCS8Compatibility_DEFINED
#define SOAP_TYPE__ns1__getCS8Compatibility_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getCS8Compatibility(struct soap*, const char*, int, const _ns1__getCS8Compatibility *, const char*);
SOAP_FMAC3 _ns1__getCS8Compatibility * SOAP_FMAC4 soap_in__ns1__getCS8Compatibility(struct soap*, const char*, _ns1__getCS8Compatibility *, const char*);
SOAP_FMAC1 _ns1__getCS8Compatibility * SOAP_FMAC2 soap_instantiate__ns1__getCS8Compatibility(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getCS8Compatibility * soap_new__ns1__getCS8Compatibility(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getCS8Compatibility(soap, n, NULL, NULL, NULL);
}

inline _ns1__getCS8Compatibility * soap_new_req__ns1__getCS8Compatibility(
	struct soap *soap)
{
	_ns1__getCS8Compatibility *_p = soap_new__ns1__getCS8Compatibility(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getCS8Compatibility * soap_new_set__ns1__getCS8Compatibility(
	struct soap *soap)
{
	_ns1__getCS8Compatibility *_p = soap_new__ns1__getCS8Compatibility(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__getCS8Compatibility(struct soap *soap, _ns1__getCS8Compatibility const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getCS8Compatibility", p->soap_type() == SOAP_TYPE__ns1__getCS8Compatibility ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getCS8Compatibility(struct soap *soap, const char *URL, _ns1__getCS8Compatibility const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getCS8Compatibility", p->soap_type() == SOAP_TYPE__ns1__getCS8Compatibility ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getCS8Compatibility(struct soap *soap, const char *URL, _ns1__getCS8Compatibility const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getCS8Compatibility", p->soap_type() == SOAP_TYPE__ns1__getCS8Compatibility ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getCS8Compatibility * SOAP_FMAC4 soap_get__ns1__getCS8Compatibility(struct soap*, _ns1__getCS8Compatibility *, const char*, const char*);

inline int soap_read__ns1__getCS8Compatibility(struct soap *soap, _ns1__getCS8Compatibility *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getCS8Compatibility(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getCS8Compatibility(struct soap *soap, const char *URL, _ns1__getCS8Compatibility *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getCS8Compatibility(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getCS8Compatibility(struct soap *soap, _ns1__getCS8Compatibility *p)
{
	if (soap_read__ns1__getCS8Compatibility(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getControllerParametersResponse_DEFINED
#define SOAP_TYPE__ns1__getControllerParametersResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getControllerParametersResponse(struct soap*, const char*, int, const _ns1__getControllerParametersResponse *, const char*);
SOAP_FMAC3 _ns1__getControllerParametersResponse * SOAP_FMAC4 soap_in__ns1__getControllerParametersResponse(struct soap*, const char*, _ns1__getControllerParametersResponse *, const char*);
SOAP_FMAC1 _ns1__getControllerParametersResponse * SOAP_FMAC2 soap_instantiate__ns1__getControllerParametersResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getControllerParametersResponse * soap_new__ns1__getControllerParametersResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getControllerParametersResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getControllerParametersResponse * soap_new_req__ns1__getControllerParametersResponse(
	struct soap *soap,
	ns1__Parameters *out)
{
	_ns1__getControllerParametersResponse *_p = soap_new__ns1__getControllerParametersResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getControllerParametersResponse::out = out;
	}
	return _p;
}

inline _ns1__getControllerParametersResponse * soap_new_set__ns1__getControllerParametersResponse(
	struct soap *soap,
	ns1__Parameters *out)
{
	_ns1__getControllerParametersResponse *_p = soap_new__ns1__getControllerParametersResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getControllerParametersResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns1__getControllerParametersResponse(struct soap *soap, _ns1__getControllerParametersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getControllerParametersResponse", p->soap_type() == SOAP_TYPE__ns1__getControllerParametersResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getControllerParametersResponse(struct soap *soap, const char *URL, _ns1__getControllerParametersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getControllerParametersResponse", p->soap_type() == SOAP_TYPE__ns1__getControllerParametersResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getControllerParametersResponse(struct soap *soap, const char *URL, _ns1__getControllerParametersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getControllerParametersResponse", p->soap_type() == SOAP_TYPE__ns1__getControllerParametersResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getControllerParametersResponse * SOAP_FMAC4 soap_get__ns1__getControllerParametersResponse(struct soap*, _ns1__getControllerParametersResponse *, const char*, const char*);

inline int soap_read__ns1__getControllerParametersResponse(struct soap *soap, _ns1__getControllerParametersResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getControllerParametersResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getControllerParametersResponse(struct soap *soap, const char *URL, _ns1__getControllerParametersResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getControllerParametersResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getControllerParametersResponse(struct soap *soap, _ns1__getControllerParametersResponse *p)
{
	if (soap_read__ns1__getControllerParametersResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getControllerParameters_DEFINED
#define SOAP_TYPE__ns1__getControllerParameters_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getControllerParameters(struct soap*, const char*, int, const _ns1__getControllerParameters *, const char*);
SOAP_FMAC3 _ns1__getControllerParameters * SOAP_FMAC4 soap_in__ns1__getControllerParameters(struct soap*, const char*, _ns1__getControllerParameters *, const char*);
SOAP_FMAC1 _ns1__getControllerParameters * SOAP_FMAC2 soap_instantiate__ns1__getControllerParameters(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getControllerParameters * soap_new__ns1__getControllerParameters(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getControllerParameters(soap, n, NULL, NULL, NULL);
}

inline _ns1__getControllerParameters * soap_new_req__ns1__getControllerParameters(
	struct soap *soap)
{
	_ns1__getControllerParameters *_p = soap_new__ns1__getControllerParameters(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getControllerParameters * soap_new_set__ns1__getControllerParameters(
	struct soap *soap)
{
	_ns1__getControllerParameters *_p = soap_new__ns1__getControllerParameters(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__getControllerParameters(struct soap *soap, _ns1__getControllerParameters const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getControllerParameters", p->soap_type() == SOAP_TYPE__ns1__getControllerParameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getControllerParameters(struct soap *soap, const char *URL, _ns1__getControllerParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getControllerParameters", p->soap_type() == SOAP_TYPE__ns1__getControllerParameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getControllerParameters(struct soap *soap, const char *URL, _ns1__getControllerParameters const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getControllerParameters", p->soap_type() == SOAP_TYPE__ns1__getControllerParameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getControllerParameters * SOAP_FMAC4 soap_get__ns1__getControllerParameters(struct soap*, _ns1__getControllerParameters *, const char*, const char*);

inline int soap_read__ns1__getControllerParameters(struct soap *soap, _ns1__getControllerParameters *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getControllerParameters(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getControllerParameters(struct soap *soap, const char *URL, _ns1__getControllerParameters *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getControllerParameters(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getControllerParameters(struct soap *soap, _ns1__getControllerParameters *p)
{
	if (soap_read__ns1__getControllerParameters(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getCS8VersionsResponse_DEFINED
#define SOAP_TYPE__ns1__getCS8VersionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getCS8VersionsResponse(struct soap*, const char*, int, const _ns1__getCS8VersionsResponse *, const char*);
SOAP_FMAC3 _ns1__getCS8VersionsResponse * SOAP_FMAC4 soap_in__ns1__getCS8VersionsResponse(struct soap*, const char*, _ns1__getCS8VersionsResponse *, const char*);
SOAP_FMAC1 _ns1__getCS8VersionsResponse * SOAP_FMAC2 soap_instantiate__ns1__getCS8VersionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getCS8VersionsResponse * soap_new__ns1__getCS8VersionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getCS8VersionsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getCS8VersionsResponse * soap_new_req__ns1__getCS8VersionsResponse(
	struct soap *soap,
	ns1__Versions *out)
{
	_ns1__getCS8VersionsResponse *_p = soap_new__ns1__getCS8VersionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getCS8VersionsResponse::out = out;
	}
	return _p;
}

inline _ns1__getCS8VersionsResponse * soap_new_set__ns1__getCS8VersionsResponse(
	struct soap *soap,
	ns1__Versions *out)
{
	_ns1__getCS8VersionsResponse *_p = soap_new__ns1__getCS8VersionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getCS8VersionsResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns1__getCS8VersionsResponse(struct soap *soap, _ns1__getCS8VersionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getCS8VersionsResponse", p->soap_type() == SOAP_TYPE__ns1__getCS8VersionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getCS8VersionsResponse(struct soap *soap, const char *URL, _ns1__getCS8VersionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getCS8VersionsResponse", p->soap_type() == SOAP_TYPE__ns1__getCS8VersionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getCS8VersionsResponse(struct soap *soap, const char *URL, _ns1__getCS8VersionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getCS8VersionsResponse", p->soap_type() == SOAP_TYPE__ns1__getCS8VersionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getCS8VersionsResponse * SOAP_FMAC4 soap_get__ns1__getCS8VersionsResponse(struct soap*, _ns1__getCS8VersionsResponse *, const char*, const char*);

inline int soap_read__ns1__getCS8VersionsResponse(struct soap *soap, _ns1__getCS8VersionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getCS8VersionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getCS8VersionsResponse(struct soap *soap, const char *URL, _ns1__getCS8VersionsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getCS8VersionsResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getCS8VersionsResponse(struct soap *soap, _ns1__getCS8VersionsResponse *p)
{
	if (soap_read__ns1__getCS8VersionsResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getCS8Versions_DEFINED
#define SOAP_TYPE__ns1__getCS8Versions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getCS8Versions(struct soap*, const char*, int, const _ns1__getCS8Versions *, const char*);
SOAP_FMAC3 _ns1__getCS8Versions * SOAP_FMAC4 soap_in__ns1__getCS8Versions(struct soap*, const char*, _ns1__getCS8Versions *, const char*);
SOAP_FMAC1 _ns1__getCS8Versions * SOAP_FMAC2 soap_instantiate__ns1__getCS8Versions(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getCS8Versions * soap_new__ns1__getCS8Versions(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getCS8Versions(soap, n, NULL, NULL, NULL);
}

inline _ns1__getCS8Versions * soap_new_req__ns1__getCS8Versions(
	struct soap *soap)
{
	_ns1__getCS8Versions *_p = soap_new__ns1__getCS8Versions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getCS8Versions * soap_new_set__ns1__getCS8Versions(
	struct soap *soap)
{
	_ns1__getCS8Versions *_p = soap_new__ns1__getCS8Versions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__getCS8Versions(struct soap *soap, _ns1__getCS8Versions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getCS8Versions", p->soap_type() == SOAP_TYPE__ns1__getCS8Versions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getCS8Versions(struct soap *soap, const char *URL, _ns1__getCS8Versions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getCS8Versions", p->soap_type() == SOAP_TYPE__ns1__getCS8Versions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getCS8Versions(struct soap *soap, const char *URL, _ns1__getCS8Versions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getCS8Versions", p->soap_type() == SOAP_TYPE__ns1__getCS8Versions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getCS8Versions * SOAP_FMAC4 soap_get__ns1__getCS8Versions(struct soap*, _ns1__getCS8Versions *, const char*, const char*);

inline int soap_read__ns1__getCS8Versions(struct soap *soap, _ns1__getCS8Versions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getCS8Versions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getCS8Versions(struct soap *soap, const char *URL, _ns1__getCS8Versions *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getCS8Versions(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getCS8Versions(struct soap *soap, _ns1__getCS8Versions *p)
{
	if (soap_read__ns1__getCS8Versions(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__pingResponse_DEFINED
#define SOAP_TYPE__ns1__pingResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__pingResponse(struct soap*, const char*, int, const _ns1__pingResponse *, const char*);
SOAP_FMAC3 _ns1__pingResponse * SOAP_FMAC4 soap_in__ns1__pingResponse(struct soap*, const char*, _ns1__pingResponse *, const char*);
SOAP_FMAC1 _ns1__pingResponse * SOAP_FMAC2 soap_instantiate__ns1__pingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__pingResponse * soap_new__ns1__pingResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__pingResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__pingResponse * soap_new_req__ns1__pingResponse(
	struct soap *soap)
{
	_ns1__pingResponse *_p = soap_new__ns1__pingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__pingResponse * soap_new_set__ns1__pingResponse(
	struct soap *soap,
	std::string *message)
{
	_ns1__pingResponse *_p = soap_new__ns1__pingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__pingResponse::message = message;
	}
	return _p;
}

inline int soap_write__ns1__pingResponse(struct soap *soap, _ns1__pingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:pingResponse", p->soap_type() == SOAP_TYPE__ns1__pingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__pingResponse(struct soap *soap, const char *URL, _ns1__pingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:pingResponse", p->soap_type() == SOAP_TYPE__ns1__pingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__pingResponse(struct soap *soap, const char *URL, _ns1__pingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:pingResponse", p->soap_type() == SOAP_TYPE__ns1__pingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__pingResponse * SOAP_FMAC4 soap_get__ns1__pingResponse(struct soap*, _ns1__pingResponse *, const char*, const char*);

inline int soap_read__ns1__pingResponse(struct soap *soap, _ns1__pingResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__pingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__pingResponse(struct soap *soap, const char *URL, _ns1__pingResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__pingResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__pingResponse(struct soap *soap, _ns1__pingResponse *p)
{
	if (soap_read__ns1__pingResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ping_DEFINED
#define SOAP_TYPE__ns1__ping_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ping(struct soap*, const char*, int, const _ns1__ping *, const char*);
SOAP_FMAC3 _ns1__ping * SOAP_FMAC4 soap_in__ns1__ping(struct soap*, const char*, _ns1__ping *, const char*);
SOAP_FMAC1 _ns1__ping * SOAP_FMAC2 soap_instantiate__ns1__ping(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ping * soap_new__ns1__ping(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ping(soap, n, NULL, NULL, NULL);
}

inline _ns1__ping * soap_new_req__ns1__ping(
	struct soap *soap)
{
	_ns1__ping *_p = soap_new__ns1__ping(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ping * soap_new_set__ns1__ping(
	struct soap *soap,
	std::string *message)
{
	_ns1__ping *_p = soap_new__ns1__ping(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ping::message = message;
	}
	return _p;
}

inline int soap_write__ns1__ping(struct soap *soap, _ns1__ping const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ping", p->soap_type() == SOAP_TYPE__ns1__ping ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ping(struct soap *soap, const char *URL, _ns1__ping const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ping", p->soap_type() == SOAP_TYPE__ns1__ping ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ping(struct soap *soap, const char *URL, _ns1__ping const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ping", p->soap_type() == SOAP_TYPE__ns1__ping ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ping * SOAP_FMAC4 soap_get__ns1__ping(struct soap*, _ns1__ping *, const char*, const char*);

inline int soap_read__ns1__ping(struct soap *soap, _ns1__ping *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ping(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ping(struct soap *soap, const char *URL, _ns1__ping *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ping(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ping(struct soap *soap, _ns1__ping *p)
{
	if (soap_read__ns1__ping(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__findServerResponse_DEFINED
#define SOAP_TYPE__ns1__findServerResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__findServerResponse(struct soap*, const char*, int, const _ns1__findServerResponse *, const char*);
SOAP_FMAC3 _ns1__findServerResponse * SOAP_FMAC4 soap_in__ns1__findServerResponse(struct soap*, const char*, _ns1__findServerResponse *, const char*);
SOAP_FMAC1 _ns1__findServerResponse * SOAP_FMAC2 soap_instantiate__ns1__findServerResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__findServerResponse * soap_new__ns1__findServerResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__findServerResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__findServerResponse * soap_new_req__ns1__findServerResponse(
	struct soap *soap,
	bool found)
{
	_ns1__findServerResponse *_p = soap_new__ns1__findServerResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__findServerResponse::found = found;
	}
	return _p;
}

inline _ns1__findServerResponse * soap_new_set__ns1__findServerResponse(
	struct soap *soap,
	bool found)
{
	_ns1__findServerResponse *_p = soap_new__ns1__findServerResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__findServerResponse::found = found;
	}
	return _p;
}

inline int soap_write__ns1__findServerResponse(struct soap *soap, _ns1__findServerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:findServerResponse", p->soap_type() == SOAP_TYPE__ns1__findServerResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__findServerResponse(struct soap *soap, const char *URL, _ns1__findServerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:findServerResponse", p->soap_type() == SOAP_TYPE__ns1__findServerResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__findServerResponse(struct soap *soap, const char *URL, _ns1__findServerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:findServerResponse", p->soap_type() == SOAP_TYPE__ns1__findServerResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__findServerResponse * SOAP_FMAC4 soap_get__ns1__findServerResponse(struct soap*, _ns1__findServerResponse *, const char*, const char*);

inline int soap_read__ns1__findServerResponse(struct soap *soap, _ns1__findServerResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__findServerResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__findServerResponse(struct soap *soap, const char *URL, _ns1__findServerResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__findServerResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__findServerResponse(struct soap *soap, _ns1__findServerResponse *p)
{
	if (soap_read__ns1__findServerResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__findServer_DEFINED
#define SOAP_TYPE__ns1__findServer_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__findServer(struct soap*, const char*, int, const _ns1__findServer *, const char*);
SOAP_FMAC3 _ns1__findServer * SOAP_FMAC4 soap_in__ns1__findServer(struct soap*, const char*, _ns1__findServer *, const char*);
SOAP_FMAC1 _ns1__findServer * SOAP_FMAC2 soap_instantiate__ns1__findServer(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__findServer * soap_new__ns1__findServer(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__findServer(soap, n, NULL, NULL, NULL);
}

inline _ns1__findServer * soap_new_req__ns1__findServer(
	struct soap *soap)
{
	_ns1__findServer *_p = soap_new__ns1__findServer(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__findServer * soap_new_set__ns1__findServer(
	struct soap *soap,
	std::string *serverName)
{
	_ns1__findServer *_p = soap_new__ns1__findServer(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__findServer::serverName = serverName;
	}
	return _p;
}

inline int soap_write__ns1__findServer(struct soap *soap, _ns1__findServer const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:findServer", p->soap_type() == SOAP_TYPE__ns1__findServer ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__findServer(struct soap *soap, const char *URL, _ns1__findServer const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:findServer", p->soap_type() == SOAP_TYPE__ns1__findServer ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__findServer(struct soap *soap, const char *URL, _ns1__findServer const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:findServer", p->soap_type() == SOAP_TYPE__ns1__findServer ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__findServer * SOAP_FMAC4 soap_get__ns1__findServer(struct soap*, _ns1__findServer *, const char*, const char*);

inline int soap_read__ns1__findServer(struct soap *soap, _ns1__findServer *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__findServer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__findServer(struct soap *soap, const char *URL, _ns1__findServer *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__findServer(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__findServer(struct soap *soap, _ns1__findServer *p)
{
	if (soap_read__ns1__findServer(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getSoapServerVersionResponse_DEFINED
#define SOAP_TYPE__ns1__getSoapServerVersionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSoapServerVersionResponse(struct soap*, const char*, int, const _ns1__getSoapServerVersionResponse *, const char*);
SOAP_FMAC3 _ns1__getSoapServerVersionResponse * SOAP_FMAC4 soap_in__ns1__getSoapServerVersionResponse(struct soap*, const char*, _ns1__getSoapServerVersionResponse *, const char*);
SOAP_FMAC1 _ns1__getSoapServerVersionResponse * SOAP_FMAC2 soap_instantiate__ns1__getSoapServerVersionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getSoapServerVersionResponse * soap_new__ns1__getSoapServerVersionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getSoapServerVersionResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getSoapServerVersionResponse * soap_new_req__ns1__getSoapServerVersionResponse(
	struct soap *soap,
	ns1__SoapServerVersion *server)
{
	_ns1__getSoapServerVersionResponse *_p = soap_new__ns1__getSoapServerVersionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getSoapServerVersionResponse::server = server;
	}
	return _p;
}

inline _ns1__getSoapServerVersionResponse * soap_new_set__ns1__getSoapServerVersionResponse(
	struct soap *soap,
	ns1__SoapServerVersion *server)
{
	_ns1__getSoapServerVersionResponse *_p = soap_new__ns1__getSoapServerVersionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getSoapServerVersionResponse::server = server;
	}
	return _p;
}

inline int soap_write__ns1__getSoapServerVersionResponse(struct soap *soap, _ns1__getSoapServerVersionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSoapServerVersionResponse", p->soap_type() == SOAP_TYPE__ns1__getSoapServerVersionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getSoapServerVersionResponse(struct soap *soap, const char *URL, _ns1__getSoapServerVersionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSoapServerVersionResponse", p->soap_type() == SOAP_TYPE__ns1__getSoapServerVersionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getSoapServerVersionResponse(struct soap *soap, const char *URL, _ns1__getSoapServerVersionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSoapServerVersionResponse", p->soap_type() == SOAP_TYPE__ns1__getSoapServerVersionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getSoapServerVersionResponse * SOAP_FMAC4 soap_get__ns1__getSoapServerVersionResponse(struct soap*, _ns1__getSoapServerVersionResponse *, const char*, const char*);

inline int soap_read__ns1__getSoapServerVersionResponse(struct soap *soap, _ns1__getSoapServerVersionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getSoapServerVersionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getSoapServerVersionResponse(struct soap *soap, const char *URL, _ns1__getSoapServerVersionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getSoapServerVersionResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getSoapServerVersionResponse(struct soap *soap, _ns1__getSoapServerVersionResponse *p)
{
	if (soap_read__ns1__getSoapServerVersionResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getSoapServerVersion_DEFINED
#define SOAP_TYPE__ns1__getSoapServerVersion_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSoapServerVersion(struct soap*, const char*, int, const _ns1__getSoapServerVersion *, const char*);
SOAP_FMAC3 _ns1__getSoapServerVersion * SOAP_FMAC4 soap_in__ns1__getSoapServerVersion(struct soap*, const char*, _ns1__getSoapServerVersion *, const char*);
SOAP_FMAC1 _ns1__getSoapServerVersion * SOAP_FMAC2 soap_instantiate__ns1__getSoapServerVersion(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getSoapServerVersion * soap_new__ns1__getSoapServerVersion(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getSoapServerVersion(soap, n, NULL, NULL, NULL);
}

inline _ns1__getSoapServerVersion * soap_new_req__ns1__getSoapServerVersion(
	struct soap *soap)
{
	_ns1__getSoapServerVersion *_p = soap_new__ns1__getSoapServerVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getSoapServerVersion * soap_new_set__ns1__getSoapServerVersion(
	struct soap *soap,
	std::string *cltName,
	std::string *cltVersion)
{
	_ns1__getSoapServerVersion *_p = soap_new__ns1__getSoapServerVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getSoapServerVersion::cltName = cltName;
		_p->_ns1__getSoapServerVersion::cltVersion = cltVersion;
	}
	return _p;
}

inline int soap_write__ns1__getSoapServerVersion(struct soap *soap, _ns1__getSoapServerVersion const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSoapServerVersion", p->soap_type() == SOAP_TYPE__ns1__getSoapServerVersion ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getSoapServerVersion(struct soap *soap, const char *URL, _ns1__getSoapServerVersion const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSoapServerVersion", p->soap_type() == SOAP_TYPE__ns1__getSoapServerVersion ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getSoapServerVersion(struct soap *soap, const char *URL, _ns1__getSoapServerVersion const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSoapServerVersion", p->soap_type() == SOAP_TYPE__ns1__getSoapServerVersion ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getSoapServerVersion * SOAP_FMAC4 soap_get__ns1__getSoapServerVersion(struct soap*, _ns1__getSoapServerVersion *, const char*, const char*);

inline int soap_read__ns1__getSoapServerVersion(struct soap *soap, _ns1__getSoapServerVersion *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getSoapServerVersion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getSoapServerVersion(struct soap *soap, const char *URL, _ns1__getSoapServerVersion *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__getSoapServerVersion(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getSoapServerVersion(struct soap *soap, _ns1__getSoapServerVersion *p)
{
	if (soap_read__ns1__getSoapServerVersion(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__Robots_DEFINED
#define SOAP_TYPE_ns1__Robots_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Robots(struct soap*, const char*, int, const ns1__Robots *, const char*);
SOAP_FMAC3 ns1__Robots * SOAP_FMAC4 soap_in_ns1__Robots(struct soap*, const char*, ns1__Robots *, const char*);
SOAP_FMAC1 ns1__Robots * SOAP_FMAC2 soap_instantiate_ns1__Robots(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Robots * soap_new_ns1__Robots(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Robots(soap, n, NULL, NULL, NULL);
}

inline ns1__Robots * soap_new_req_ns1__Robots(
	struct soap *soap)
{
	ns1__Robots *_p = soap_new_ns1__Robots(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__Robots * soap_new_set_ns1__Robots(
	struct soap *soap,
	const std::vector<ns1__Robot *> & Robots)
{
	ns1__Robots *_p = soap_new_ns1__Robots(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Robots::Robots = Robots;
	}
	return _p;
}

inline int soap_write_ns1__Robots(struct soap *soap, ns1__Robots const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Robots", p->soap_type() == SOAP_TYPE_ns1__Robots ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Robots(struct soap *soap, const char *URL, ns1__Robots const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Robots", p->soap_type() == SOAP_TYPE_ns1__Robots ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Robots(struct soap *soap, const char *URL, ns1__Robots const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Robots", p->soap_type() == SOAP_TYPE_ns1__Robots ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Robots * SOAP_FMAC4 soap_get_ns1__Robots(struct soap*, ns1__Robots *, const char*, const char*);

inline int soap_read_ns1__Robots(struct soap *soap, ns1__Robots *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__Robots(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Robots(struct soap *soap, const char *URL, ns1__Robots *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__Robots(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__Robots(struct soap *soap, ns1__Robots *p)
{
	if (soap_read_ns1__Robots(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SoapServerVersion_DEFINED
#define SOAP_TYPE_ns1__SoapServerVersion_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SoapServerVersion(struct soap*, const char*, int, const ns1__SoapServerVersion *, const char*);
SOAP_FMAC3 ns1__SoapServerVersion * SOAP_FMAC4 soap_in_ns1__SoapServerVersion(struct soap*, const char*, ns1__SoapServerVersion *, const char*);
SOAP_FMAC1 ns1__SoapServerVersion * SOAP_FMAC2 soap_instantiate_ns1__SoapServerVersion(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SoapServerVersion * soap_new_ns1__SoapServerVersion(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SoapServerVersion(soap, n, NULL, NULL, NULL);
}

inline ns1__SoapServerVersion * soap_new_req_ns1__SoapServerVersion(
	struct soap *soap)
{
	ns1__SoapServerVersion *_p = soap_new_ns1__SoapServerVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__SoapServerVersion * soap_new_set_ns1__SoapServerVersion(
	struct soap *soap,
	std::string *version)
{
	ns1__SoapServerVersion *_p = soap_new_ns1__SoapServerVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SoapServerVersion::version = version;
	}
	return _p;
}

inline int soap_write_ns1__SoapServerVersion(struct soap *soap, ns1__SoapServerVersion const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SoapServerVersion", p->soap_type() == SOAP_TYPE_ns1__SoapServerVersion ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SoapServerVersion(struct soap *soap, const char *URL, ns1__SoapServerVersion const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SoapServerVersion", p->soap_type() == SOAP_TYPE_ns1__SoapServerVersion ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SoapServerVersion(struct soap *soap, const char *URL, ns1__SoapServerVersion const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SoapServerVersion", p->soap_type() == SOAP_TYPE_ns1__SoapServerVersion ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SoapServerVersion * SOAP_FMAC4 soap_get_ns1__SoapServerVersion(struct soap*, ns1__SoapServerVersion *, const char*, const char*);

inline int soap_read_ns1__SoapServerVersion(struct soap *soap, ns1__SoapServerVersion *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SoapServerVersion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SoapServerVersion(struct soap *soap, const char *URL, ns1__SoapServerVersion *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SoapServerVersion(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SoapServerVersion(struct soap *soap, ns1__SoapServerVersion *p)
{
	if (soap_read_ns1__SoapServerVersion(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__Versions_DEFINED
#define SOAP_TYPE_ns1__Versions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Versions(struct soap*, const char*, int, const ns1__Versions *, const char*);
SOAP_FMAC3 ns1__Versions * SOAP_FMAC4 soap_in_ns1__Versions(struct soap*, const char*, ns1__Versions *, const char*);
SOAP_FMAC1 ns1__Versions * SOAP_FMAC2 soap_instantiate_ns1__Versions(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Versions * soap_new_ns1__Versions(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Versions(soap, n, NULL, NULL, NULL);
}

inline ns1__Versions * soap_new_req_ns1__Versions(
	struct soap *soap)
{
	ns1__Versions *_p = soap_new_ns1__Versions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__Versions * soap_new_set_ns1__Versions(
	struct soap *soap,
	const std::vector<ns1__Version *> & Versions)
{
	ns1__Versions *_p = soap_new_ns1__Versions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Versions::Versions = Versions;
	}
	return _p;
}

inline int soap_write_ns1__Versions(struct soap *soap, ns1__Versions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Versions", p->soap_type() == SOAP_TYPE_ns1__Versions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Versions(struct soap *soap, const char *URL, ns1__Versions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Versions", p->soap_type() == SOAP_TYPE_ns1__Versions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Versions(struct soap *soap, const char *URL, ns1__Versions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Versions", p->soap_type() == SOAP_TYPE_ns1__Versions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Versions * SOAP_FMAC4 soap_get_ns1__Versions(struct soap*, ns1__Versions *, const char*, const char*);

inline int soap_read_ns1__Versions(struct soap *soap, ns1__Versions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__Versions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Versions(struct soap *soap, const char *URL, ns1__Versions *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__Versions(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__Versions(struct soap *soap, ns1__Versions *p)
{
	if (soap_read_ns1__Versions(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__Parameters_DEFINED
#define SOAP_TYPE_ns1__Parameters_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Parameters(struct soap*, const char*, int, const ns1__Parameters *, const char*);
SOAP_FMAC3 ns1__Parameters * SOAP_FMAC4 soap_in_ns1__Parameters(struct soap*, const char*, ns1__Parameters *, const char*);
SOAP_FMAC1 ns1__Parameters * SOAP_FMAC2 soap_instantiate_ns1__Parameters(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Parameters * soap_new_ns1__Parameters(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Parameters(soap, n, NULL, NULL, NULL);
}

inline ns1__Parameters * soap_new_req_ns1__Parameters(
	struct soap *soap)
{
	ns1__Parameters *_p = soap_new_ns1__Parameters(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__Parameters * soap_new_set_ns1__Parameters(
	struct soap *soap,
	const std::vector<ns1__Parameter *> & Parameters)
{
	ns1__Parameters *_p = soap_new_ns1__Parameters(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Parameters::Parameters = Parameters;
	}
	return _p;
}

inline int soap_write_ns1__Parameters(struct soap *soap, ns1__Parameters const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Parameters", p->soap_type() == SOAP_TYPE_ns1__Parameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Parameters(struct soap *soap, const char *URL, ns1__Parameters const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Parameters", p->soap_type() == SOAP_TYPE_ns1__Parameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Parameters(struct soap *soap, const char *URL, ns1__Parameters const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Parameters", p->soap_type() == SOAP_TYPE_ns1__Parameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Parameters * SOAP_FMAC4 soap_get_ns1__Parameters(struct soap*, ns1__Parameters *, const char*, const char*);

inline int soap_read_ns1__Parameters(struct soap *soap, ns1__Parameters *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__Parameters(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Parameters(struct soap *soap, const char *URL, ns1__Parameters *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__Parameters(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__Parameters(struct soap *soap, ns1__Parameters *p)
{
	if (soap_read_ns1__Parameters(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__Parameter_DEFINED
#define SOAP_TYPE_ns1__Parameter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Parameter(struct soap*, const char*, int, const ns1__Parameter *, const char*);
SOAP_FMAC3 ns1__Parameter * SOAP_FMAC4 soap_in_ns1__Parameter(struct soap*, const char*, ns1__Parameter *, const char*);
SOAP_FMAC1 ns1__Parameter * SOAP_FMAC2 soap_instantiate_ns1__Parameter(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Parameter * soap_new_ns1__Parameter(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Parameter(soap, n, NULL, NULL, NULL);
}

inline ns1__Parameter * soap_new_req_ns1__Parameter(
	struct soap *soap)
{
	ns1__Parameter *_p = soap_new_ns1__Parameter(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__Parameter * soap_new_set_ns1__Parameter(
	struct soap *soap,
	std::string *key,
	std::string *name,
	std::string *value)
{
	ns1__Parameter *_p = soap_new_ns1__Parameter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Parameter::key = key;
		_p->ns1__Parameter::name = name;
		_p->ns1__Parameter::value = value;
	}
	return _p;
}

inline int soap_write_ns1__Parameter(struct soap *soap, ns1__Parameter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Parameter", p->soap_type() == SOAP_TYPE_ns1__Parameter ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Parameter(struct soap *soap, const char *URL, ns1__Parameter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Parameter", p->soap_type() == SOAP_TYPE_ns1__Parameter ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Parameter(struct soap *soap, const char *URL, ns1__Parameter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Parameter", p->soap_type() == SOAP_TYPE_ns1__Parameter ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Parameter * SOAP_FMAC4 soap_get_ns1__Parameter(struct soap*, ns1__Parameter *, const char*, const char*);

inline int soap_read_ns1__Parameter(struct soap *soap, ns1__Parameter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__Parameter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Parameter(struct soap *soap, const char *URL, ns1__Parameter *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__Parameter(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__Parameter(struct soap *soap, ns1__Parameter *p)
{
	if (soap_read_ns1__Parameter(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__Version_DEFINED
#define SOAP_TYPE_ns1__Version_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Version(struct soap*, const char*, int, const ns1__Version *, const char*);
SOAP_FMAC3 ns1__Version * SOAP_FMAC4 soap_in_ns1__Version(struct soap*, const char*, ns1__Version *, const char*);
SOAP_FMAC1 ns1__Version * SOAP_FMAC2 soap_instantiate_ns1__Version(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Version * soap_new_ns1__Version(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Version(soap, n, NULL, NULL, NULL);
}

inline ns1__Version * soap_new_req_ns1__Version(
	struct soap *soap)
{
	ns1__Version *_p = soap_new_ns1__Version(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__Version * soap_new_set_ns1__Version(
	struct soap *soap,
	std::string *name,
	std::string *version)
{
	ns1__Version *_p = soap_new_ns1__Version(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Version::name = name;
		_p->ns1__Version::version = version;
	}
	return _p;
}

inline int soap_write_ns1__Version(struct soap *soap, ns1__Version const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Version", p->soap_type() == SOAP_TYPE_ns1__Version ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Version(struct soap *soap, const char *URL, ns1__Version const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Version", p->soap_type() == SOAP_TYPE_ns1__Version ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Version(struct soap *soap, const char *URL, ns1__Version const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Version", p->soap_type() == SOAP_TYPE_ns1__Version ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Version * SOAP_FMAC4 soap_get_ns1__Version(struct soap*, ns1__Version *, const char*, const char*);

inline int soap_read_ns1__Version(struct soap *soap, ns1__Version *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__Version(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Version(struct soap *soap, const char *URL, ns1__Version *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__Version(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__Version(struct soap *soap, ns1__Version *p)
{
	if (soap_read_ns1__Version(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__Robot_DEFINED
#define SOAP_TYPE_ns1__Robot_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Robot(struct soap*, const char*, int, const ns1__Robot *, const char*);
SOAP_FMAC3 ns1__Robot * SOAP_FMAC4 soap_in_ns1__Robot(struct soap*, const char*, ns1__Robot *, const char*);
SOAP_FMAC1 ns1__Robot * SOAP_FMAC2 soap_instantiate_ns1__Robot(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Robot * soap_new_ns1__Robot(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Robot(soap, n, NULL, NULL, NULL);
}

inline ns1__Robot * soap_new_req_ns1__Robot(
	struct soap *soap,
	enum ns1__Kinematic kinematic,
	enum ns1__MountType mountType,
	enum ns1__LengthAxis3 lengthAxis3,
	enum ns1__DiameterAxis3 diameterAxis3)
{
	ns1__Robot *_p = soap_new_ns1__Robot(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Robot::kinematic = kinematic;
		_p->ns1__Robot::mountType = mountType;
		_p->ns1__Robot::lengthAxis3 = lengthAxis3;
		_p->ns1__Robot::diameterAxis3 = diameterAxis3;
	}
	return _p;
}

inline ns1__Robot * soap_new_set_ns1__Robot(
	struct soap *soap,
	enum ns1__Kinematic kinematic,
	std::string *arm,
	std::string *tuning,
	enum ns1__MountType mountType,
	enum ns1__LengthAxis3 lengthAxis3,
	enum ns1__DiameterAxis3 diameterAxis3)
{
	ns1__Robot *_p = soap_new_ns1__Robot(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Robot::kinematic = kinematic;
		_p->ns1__Robot::arm = arm;
		_p->ns1__Robot::tuning = tuning;
		_p->ns1__Robot::mountType = mountType;
		_p->ns1__Robot::lengthAxis3 = lengthAxis3;
		_p->ns1__Robot::diameterAxis3 = diameterAxis3;
	}
	return _p;
}

inline int soap_write_ns1__Robot(struct soap *soap, ns1__Robot const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Robot", p->soap_type() == SOAP_TYPE_ns1__Robot ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Robot(struct soap *soap, const char *URL, ns1__Robot const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Robot", p->soap_type() == SOAP_TYPE_ns1__Robot ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Robot(struct soap *soap, const char *URL, ns1__Robot const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Robot", p->soap_type() == SOAP_TYPE_ns1__Robot ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Robot * SOAP_FMAC4 soap_get_ns1__Robot(struct soap*, ns1__Robot *, const char*, const char*);

inline int soap_read_ns1__Robot(struct soap *soap, ns1__Robot *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__Robot(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Robot(struct soap *soap, const char *URL, ns1__Robot *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__Robot(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__Robot(struct soap *soap, ns1__Robot *p)
{
	if (soap_read_ns1__Robot(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CartesianPos_DEFINED
#define SOAP_TYPE_ns1__CartesianPos_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CartesianPos(struct soap*, const char*, int, const ns1__CartesianPos *, const char*);
SOAP_FMAC3 ns1__CartesianPos * SOAP_FMAC4 soap_in_ns1__CartesianPos(struct soap*, const char*, ns1__CartesianPos *, const char*);
SOAP_FMAC1 ns1__CartesianPos * SOAP_FMAC2 soap_instantiate_ns1__CartesianPos(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CartesianPos * soap_new_ns1__CartesianPos(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CartesianPos(soap, n, NULL, NULL, NULL);
}

inline ns1__CartesianPos * soap_new_req_ns1__CartesianPos(
	struct soap *soap,
	double x,
	double y,
	double z,
	double rx,
	double ry,
	double rz)
{
	ns1__CartesianPos *_p = soap_new_ns1__CartesianPos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CartesianPos::x = x;
		_p->ns1__CartesianPos::y = y;
		_p->ns1__CartesianPos::z = z;
		_p->ns1__CartesianPos::rx = rx;
		_p->ns1__CartesianPos::ry = ry;
		_p->ns1__CartesianPos::rz = rz;
	}
	return _p;
}

inline ns1__CartesianPos * soap_new_set_ns1__CartesianPos(
	struct soap *soap,
	double x,
	double y,
	double z,
	double rx,
	double ry,
	double rz)
{
	ns1__CartesianPos *_p = soap_new_ns1__CartesianPos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CartesianPos::x = x;
		_p->ns1__CartesianPos::y = y;
		_p->ns1__CartesianPos::z = z;
		_p->ns1__CartesianPos::rx = rx;
		_p->ns1__CartesianPos::ry = ry;
		_p->ns1__CartesianPos::rz = rz;
	}
	return _p;
}

inline int soap_write_ns1__CartesianPos(struct soap *soap, ns1__CartesianPos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CartesianPos", p->soap_type() == SOAP_TYPE_ns1__CartesianPos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CartesianPos(struct soap *soap, const char *URL, ns1__CartesianPos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CartesianPos", p->soap_type() == SOAP_TYPE_ns1__CartesianPos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CartesianPos(struct soap *soap, const char *URL, ns1__CartesianPos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CartesianPos", p->soap_type() == SOAP_TYPE_ns1__CartesianPos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CartesianPos * SOAP_FMAC4 soap_get_ns1__CartesianPos(struct soap*, ns1__CartesianPos *, const char*, const char*);

inline int soap_read_ns1__CartesianPos(struct soap *soap, ns1__CartesianPos *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CartesianPos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CartesianPos(struct soap *soap, const char *URL, ns1__CartesianPos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CartesianPos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CartesianPos(struct soap *soap, ns1__CartesianPos *p)
{
	if (soap_read_ns1__CartesianPos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__JointPos_DEFINED
#define SOAP_TYPE_ns1__JointPos_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__JointPos(struct soap*, const char*, int, const ns1__JointPos *, const char*);
SOAP_FMAC3 ns1__JointPos * SOAP_FMAC4 soap_in_ns1__JointPos(struct soap*, const char*, ns1__JointPos *, const char*);
SOAP_FMAC1 ns1__JointPos * SOAP_FMAC2 soap_instantiate_ns1__JointPos(struct soap*, int, const char*, const char*, size_t*);

inline ns1__JointPos * soap_new_ns1__JointPos(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__JointPos(soap, n, NULL, NULL, NULL);
}

inline ns1__JointPos * soap_new_req_ns1__JointPos(
	struct soap *soap,
	const std::vector<double> & item)
{
	ns1__JointPos *_p = soap_new_ns1__JointPos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__JointPos::item = item;
	}
	return _p;
}

inline ns1__JointPos * soap_new_set_ns1__JointPos(
	struct soap *soap,
	const std::vector<double> & item)
{
	ns1__JointPos *_p = soap_new_ns1__JointPos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__JointPos::item = item;
	}
	return _p;
}

inline int soap_write_ns1__JointPos(struct soap *soap, ns1__JointPos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:JointPos", p->soap_type() == SOAP_TYPE_ns1__JointPos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__JointPos(struct soap *soap, const char *URL, ns1__JointPos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:JointPos", p->soap_type() == SOAP_TYPE_ns1__JointPos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__JointPos(struct soap *soap, const char *URL, ns1__JointPos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:JointPos", p->soap_type() == SOAP_TYPE_ns1__JointPos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__JointPos * SOAP_FMAC4 soap_get_ns1__JointPos(struct soap*, ns1__JointPos *, const char*, const char*);

inline int soap_read_ns1__JointPos(struct soap *soap, ns1__JointPos *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__JointPos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__JointPos(struct soap *soap, const char *URL, ns1__JointPos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__JointPos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__JointPos(struct soap *soap, ns1__JointPos *p)
{
	if (soap_read_ns1__JointPos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ServerException_DEFINED
#define SOAP_TYPE_ns1__ServerException_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ServerException(struct soap*, const char*, int, const ns1__ServerException *, const char*);
SOAP_FMAC3 ns1__ServerException * SOAP_FMAC4 soap_in_ns1__ServerException(struct soap*, const char*, ns1__ServerException *, const char*);
SOAP_FMAC1 ns1__ServerException * SOAP_FMAC2 soap_instantiate_ns1__ServerException(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ServerException * soap_new_ns1__ServerException(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ServerException(soap, n, NULL, NULL, NULL);
}

inline ns1__ServerException * soap_new_req_ns1__ServerException(
	struct soap *soap,
	enum ns1__ServerExceptionCode code)
{
	ns1__ServerException *_p = soap_new_ns1__ServerException(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ServerException::code = code;
	}
	return _p;
}

inline ns1__ServerException * soap_new_set_ns1__ServerException(
	struct soap *soap,
	enum ns1__ServerExceptionCode code,
	std::string *description)
{
	ns1__ServerException *_p = soap_new_ns1__ServerException(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ServerException::code = code;
		_p->ns1__ServerException::description = description;
	}
	return _p;
}

inline int soap_write_ns1__ServerException(struct soap *soap, ns1__ServerException const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ServerException", p->soap_type() == SOAP_TYPE_ns1__ServerException ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ServerException(struct soap *soap, const char *URL, ns1__ServerException const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ServerException", p->soap_type() == SOAP_TYPE_ns1__ServerException ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ServerException(struct soap *soap, const char *URL, ns1__ServerException const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ServerException", p->soap_type() == SOAP_TYPE_ns1__ServerException ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ServerException * SOAP_FMAC4 soap_get_ns1__ServerException(struct soap*, ns1__ServerException *, const char*, const char*);

inline int soap_read_ns1__ServerException(struct soap *soap, ns1__ServerException *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ServerException(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ServerException(struct soap *soap, const char *URL, ns1__ServerException *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ServerException(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ServerException(struct soap *soap, ns1__ServerException *p)
{
	if (soap_read_ns1__ServerException(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__hexBinary_DEFINED
#define SOAP_TYPE_xsd__hexBinary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__hexBinary(struct soap*, const char*, int, const xsd__hexBinary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__hexBinary2s(struct soap*, xsd__hexBinary);
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_in_xsd__hexBinary(struct soap*, const char*, xsd__hexBinary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__hexBinary(struct soap*, const char*, xsd__hexBinary *);
SOAP_FMAC1 xsd__hexBinary * SOAP_FMAC2 soap_instantiate_xsd__hexBinary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__hexBinary * soap_new_xsd__hexBinary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__hexBinary(soap, n, NULL, NULL, NULL);
}

inline xsd__hexBinary * soap_new_req_xsd__hexBinary(
	struct soap *soap)
{
	xsd__hexBinary *_p = soap_new_xsd__hexBinary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__hexBinary * soap_new_set_xsd__hexBinary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size)
{
	xsd__hexBinary *_p = soap_new_xsd__hexBinary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__hexBinary::__ptr = __ptr;
		_p->xsd__hexBinary::__size = __size;
	}
	return _p;
}

inline int soap_write_xsd__hexBinary(struct soap *soap, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_get_xsd__hexBinary(struct soap*, xsd__hexBinary *, const char*, const char*);

inline int soap_read_xsd__hexBinary(struct soap *soap, xsd__hexBinary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__hexBinary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__hexBinary(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__hexBinary(struct soap *soap, xsd__hexBinary *p)
{
	if (soap_read_xsd__hexBinary(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_DEFINED
#define SOAP_TYPE_xsd__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *);
SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(
	struct soap *soap)
{
	xsd__base64Binary *_p = soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	xsd__base64Binary *_p = soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary::__ptr = __ptr;
		_p->xsd__base64Binary::__size = __size;
		_p->xsd__base64Binary::id = id;
		_p->xsd__base64Binary::type = type;
		_p->xsd__base64Binary::options = options;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__base64Binary(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (soap_read_xsd__base64Binary(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anyURI_DEFINED
#define SOAP_TYPE_xsd__anyURI_DEFINED

inline void soap_default_xsd__anyURI(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::string *);

#define soap_xsd__anyURI2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__anyURI(soap, s, a) soap_s2stdchar((soap), (s), (a), 4, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__anyURI soap_instantiate_std__string


#define soap_new_xsd__anyURI soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__anyURI(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__anyURI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyURI(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__anyURI(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (soap_read_xsd__anyURI(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_std__string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___ns7__getProject_DEFINED
#define SOAP_TYPE___ns7__getProject_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__getProject(struct soap*, struct __ns7__getProject *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__getProject(struct soap*, const struct __ns7__getProject *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__getProject(struct soap*, const char*, int, const struct __ns7__getProject *, const char*);
SOAP_FMAC3 struct __ns7__getProject * SOAP_FMAC4 soap_in___ns7__getProject(struct soap*, const char*, struct __ns7__getProject *, const char*);
SOAP_FMAC1 struct __ns7__getProject * SOAP_FMAC2 soap_instantiate___ns7__getProject(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__getProject * soap_new___ns7__getProject(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__getProject(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__getProject * soap_new_req___ns7__getProject(
	struct soap *soap)
{
	struct __ns7__getProject *_p = soap_new___ns7__getProject(soap);
	if (_p)
	{	soap_default___ns7__getProject(soap, _p);
	}
	return _p;
}

inline struct __ns7__getProject * soap_new_set___ns7__getProject(
	struct soap *soap,
	_ns7__getProject *ns7__getProject)
{
	struct __ns7__getProject *_p = soap_new___ns7__getProject(soap);
	if (_p)
	{	soap_default___ns7__getProject(soap, _p);
		_p->ns7__getProject = ns7__getProject;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__getProject(struct soap*, const struct __ns7__getProject *, const char*, const char*);

inline int soap_write___ns7__getProject(struct soap *soap, struct __ns7__getProject const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__getProject(soap, p), 0) || soap_put___ns7__getProject(soap, p, "-ns7:getProject", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__getProject(struct soap *soap, const char *URL, struct __ns7__getProject const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__getProject(soap, p), 0) || soap_put___ns7__getProject(soap, p, "-ns7:getProject", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__getProject(struct soap *soap, const char *URL, struct __ns7__getProject const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__getProject(soap, p), 0) || soap_put___ns7__getProject(soap, p, "-ns7:getProject", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__getProject * SOAP_FMAC4 soap_get___ns7__getProject(struct soap*, struct __ns7__getProject *, const char*, const char*);

inline int soap_read___ns7__getProject(struct soap *soap, struct __ns7__getProject *p)
{
	if (p)
	{	soap_default___ns7__getProject(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__getProject(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__getProject(struct soap *soap, const char *URL, struct __ns7__getProject *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__getProject(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__getProject(struct soap *soap, struct __ns7__getProject *p)
{
	if (soap_read___ns7__getProject(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__getRobotDhParameters_DEFINED
#define SOAP_TYPE___ns7__getRobotDhParameters_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__getRobotDhParameters(struct soap*, struct __ns7__getRobotDhParameters *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__getRobotDhParameters(struct soap*, const struct __ns7__getRobotDhParameters *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__getRobotDhParameters(struct soap*, const char*, int, const struct __ns7__getRobotDhParameters *, const char*);
SOAP_FMAC3 struct __ns7__getRobotDhParameters * SOAP_FMAC4 soap_in___ns7__getRobotDhParameters(struct soap*, const char*, struct __ns7__getRobotDhParameters *, const char*);
SOAP_FMAC1 struct __ns7__getRobotDhParameters * SOAP_FMAC2 soap_instantiate___ns7__getRobotDhParameters(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__getRobotDhParameters * soap_new___ns7__getRobotDhParameters(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__getRobotDhParameters(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__getRobotDhParameters * soap_new_req___ns7__getRobotDhParameters(
	struct soap *soap)
{
	struct __ns7__getRobotDhParameters *_p = soap_new___ns7__getRobotDhParameters(soap);
	if (_p)
	{	soap_default___ns7__getRobotDhParameters(soap, _p);
	}
	return _p;
}

inline struct __ns7__getRobotDhParameters * soap_new_set___ns7__getRobotDhParameters(
	struct soap *soap,
	_ns7__getRobotDhParameters *ns7__getRobotDhParameters)
{
	struct __ns7__getRobotDhParameters *_p = soap_new___ns7__getRobotDhParameters(soap);
	if (_p)
	{	soap_default___ns7__getRobotDhParameters(soap, _p);
		_p->ns7__getRobotDhParameters = ns7__getRobotDhParameters;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__getRobotDhParameters(struct soap*, const struct __ns7__getRobotDhParameters *, const char*, const char*);

inline int soap_write___ns7__getRobotDhParameters(struct soap *soap, struct __ns7__getRobotDhParameters const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__getRobotDhParameters(soap, p), 0) || soap_put___ns7__getRobotDhParameters(soap, p, "-ns7:getRobotDhParameters", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__getRobotDhParameters(struct soap *soap, const char *URL, struct __ns7__getRobotDhParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__getRobotDhParameters(soap, p), 0) || soap_put___ns7__getRobotDhParameters(soap, p, "-ns7:getRobotDhParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__getRobotDhParameters(struct soap *soap, const char *URL, struct __ns7__getRobotDhParameters const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__getRobotDhParameters(soap, p), 0) || soap_put___ns7__getRobotDhParameters(soap, p, "-ns7:getRobotDhParameters", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__getRobotDhParameters * SOAP_FMAC4 soap_get___ns7__getRobotDhParameters(struct soap*, struct __ns7__getRobotDhParameters *, const char*, const char*);

inline int soap_read___ns7__getRobotDhParameters(struct soap *soap, struct __ns7__getRobotDhParameters *p)
{
	if (p)
	{	soap_default___ns7__getRobotDhParameters(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__getRobotDhParameters(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__getRobotDhParameters(struct soap *soap, const char *URL, struct __ns7__getRobotDhParameters *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__getRobotDhParameters(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__getRobotDhParameters(struct soap *soap, struct __ns7__getRobotDhParameters *p)
{
	if (soap_read___ns7__getRobotDhParameters(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__getAllPhysicalIos_DEFINED
#define SOAP_TYPE___ns7__getAllPhysicalIos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__getAllPhysicalIos(struct soap*, struct __ns7__getAllPhysicalIos *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__getAllPhysicalIos(struct soap*, const struct __ns7__getAllPhysicalIos *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__getAllPhysicalIos(struct soap*, const char*, int, const struct __ns7__getAllPhysicalIos *, const char*);
SOAP_FMAC3 struct __ns7__getAllPhysicalIos * SOAP_FMAC4 soap_in___ns7__getAllPhysicalIos(struct soap*, const char*, struct __ns7__getAllPhysicalIos *, const char*);
SOAP_FMAC1 struct __ns7__getAllPhysicalIos * SOAP_FMAC2 soap_instantiate___ns7__getAllPhysicalIos(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__getAllPhysicalIos * soap_new___ns7__getAllPhysicalIos(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__getAllPhysicalIos(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__getAllPhysicalIos * soap_new_req___ns7__getAllPhysicalIos(
	struct soap *soap)
{
	struct __ns7__getAllPhysicalIos *_p = soap_new___ns7__getAllPhysicalIos(soap);
	if (_p)
	{	soap_default___ns7__getAllPhysicalIos(soap, _p);
	}
	return _p;
}

inline struct __ns7__getAllPhysicalIos * soap_new_set___ns7__getAllPhysicalIos(
	struct soap *soap,
	_ns7__getAllPhysicalIos *ns7__getAllPhysicalIos)
{
	struct __ns7__getAllPhysicalIos *_p = soap_new___ns7__getAllPhysicalIos(soap);
	if (_p)
	{	soap_default___ns7__getAllPhysicalIos(soap, _p);
		_p->ns7__getAllPhysicalIos = ns7__getAllPhysicalIos;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__getAllPhysicalIos(struct soap*, const struct __ns7__getAllPhysicalIos *, const char*, const char*);

inline int soap_write___ns7__getAllPhysicalIos(struct soap *soap, struct __ns7__getAllPhysicalIos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__getAllPhysicalIos(soap, p), 0) || soap_put___ns7__getAllPhysicalIos(soap, p, "-ns7:getAllPhysicalIos", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__getAllPhysicalIos(struct soap *soap, const char *URL, struct __ns7__getAllPhysicalIos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__getAllPhysicalIos(soap, p), 0) || soap_put___ns7__getAllPhysicalIos(soap, p, "-ns7:getAllPhysicalIos", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__getAllPhysicalIos(struct soap *soap, const char *URL, struct __ns7__getAllPhysicalIos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__getAllPhysicalIos(soap, p), 0) || soap_put___ns7__getAllPhysicalIos(soap, p, "-ns7:getAllPhysicalIos", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__getAllPhysicalIos * SOAP_FMAC4 soap_get___ns7__getAllPhysicalIos(struct soap*, struct __ns7__getAllPhysicalIos *, const char*, const char*);

inline int soap_read___ns7__getAllPhysicalIos(struct soap *soap, struct __ns7__getAllPhysicalIos *p)
{
	if (p)
	{	soap_default___ns7__getAllPhysicalIos(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__getAllPhysicalIos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__getAllPhysicalIos(struct soap *soap, const char *URL, struct __ns7__getAllPhysicalIos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__getAllPhysicalIos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__getAllPhysicalIos(struct soap *soap, struct __ns7__getAllPhysicalIos *p)
{
	if (soap_read___ns7__getAllPhysicalIos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__unlockAllIos_DEFINED
#define SOAP_TYPE___ns7__unlockAllIos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__unlockAllIos(struct soap*, struct __ns7__unlockAllIos *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__unlockAllIos(struct soap*, const struct __ns7__unlockAllIos *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__unlockAllIos(struct soap*, const char*, int, const struct __ns7__unlockAllIos *, const char*);
SOAP_FMAC3 struct __ns7__unlockAllIos * SOAP_FMAC4 soap_in___ns7__unlockAllIos(struct soap*, const char*, struct __ns7__unlockAllIos *, const char*);
SOAP_FMAC1 struct __ns7__unlockAllIos * SOAP_FMAC2 soap_instantiate___ns7__unlockAllIos(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__unlockAllIos * soap_new___ns7__unlockAllIos(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__unlockAllIos(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__unlockAllIos * soap_new_req___ns7__unlockAllIos(
	struct soap *soap)
{
	struct __ns7__unlockAllIos *_p = soap_new___ns7__unlockAllIos(soap);
	if (_p)
	{	soap_default___ns7__unlockAllIos(soap, _p);
	}
	return _p;
}

inline struct __ns7__unlockAllIos * soap_new_set___ns7__unlockAllIos(
	struct soap *soap,
	_ns7__unlockAllIos *ns7__unlockAllIos)
{
	struct __ns7__unlockAllIos *_p = soap_new___ns7__unlockAllIos(soap);
	if (_p)
	{	soap_default___ns7__unlockAllIos(soap, _p);
		_p->ns7__unlockAllIos = ns7__unlockAllIos;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__unlockAllIos(struct soap*, const struct __ns7__unlockAllIos *, const char*, const char*);

inline int soap_write___ns7__unlockAllIos(struct soap *soap, struct __ns7__unlockAllIos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__unlockAllIos(soap, p), 0) || soap_put___ns7__unlockAllIos(soap, p, "-ns7:unlockAllIos", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__unlockAllIos(struct soap *soap, const char *URL, struct __ns7__unlockAllIos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__unlockAllIos(soap, p), 0) || soap_put___ns7__unlockAllIos(soap, p, "-ns7:unlockAllIos", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__unlockAllIos(struct soap *soap, const char *URL, struct __ns7__unlockAllIos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__unlockAllIos(soap, p), 0) || soap_put___ns7__unlockAllIos(soap, p, "-ns7:unlockAllIos", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__unlockAllIos * SOAP_FMAC4 soap_get___ns7__unlockAllIos(struct soap*, struct __ns7__unlockAllIos *, const char*, const char*);

inline int soap_read___ns7__unlockAllIos(struct soap *soap, struct __ns7__unlockAllIos *p)
{
	if (p)
	{	soap_default___ns7__unlockAllIos(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__unlockAllIos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__unlockAllIos(struct soap *soap, const char *URL, struct __ns7__unlockAllIos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__unlockAllIos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__unlockAllIos(struct soap *soap, struct __ns7__unlockAllIos *p)
{
	if (soap_read___ns7__unlockAllIos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__lockAllIos_DEFINED
#define SOAP_TYPE___ns7__lockAllIos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__lockAllIos(struct soap*, struct __ns7__lockAllIos *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__lockAllIos(struct soap*, const struct __ns7__lockAllIos *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__lockAllIos(struct soap*, const char*, int, const struct __ns7__lockAllIos *, const char*);
SOAP_FMAC3 struct __ns7__lockAllIos * SOAP_FMAC4 soap_in___ns7__lockAllIos(struct soap*, const char*, struct __ns7__lockAllIos *, const char*);
SOAP_FMAC1 struct __ns7__lockAllIos * SOAP_FMAC2 soap_instantiate___ns7__lockAllIos(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__lockAllIos * soap_new___ns7__lockAllIos(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__lockAllIos(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__lockAllIos * soap_new_req___ns7__lockAllIos(
	struct soap *soap)
{
	struct __ns7__lockAllIos *_p = soap_new___ns7__lockAllIos(soap);
	if (_p)
	{	soap_default___ns7__lockAllIos(soap, _p);
	}
	return _p;
}

inline struct __ns7__lockAllIos * soap_new_set___ns7__lockAllIos(
	struct soap *soap,
	_ns7__lockAllIos *ns7__lockAllIos)
{
	struct __ns7__lockAllIos *_p = soap_new___ns7__lockAllIos(soap);
	if (_p)
	{	soap_default___ns7__lockAllIos(soap, _p);
		_p->ns7__lockAllIos = ns7__lockAllIos;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__lockAllIos(struct soap*, const struct __ns7__lockAllIos *, const char*, const char*);

inline int soap_write___ns7__lockAllIos(struct soap *soap, struct __ns7__lockAllIos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__lockAllIos(soap, p), 0) || soap_put___ns7__lockAllIos(soap, p, "-ns7:lockAllIos", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__lockAllIos(struct soap *soap, const char *URL, struct __ns7__lockAllIos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__lockAllIos(soap, p), 0) || soap_put___ns7__lockAllIos(soap, p, "-ns7:lockAllIos", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__lockAllIos(struct soap *soap, const char *URL, struct __ns7__lockAllIos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__lockAllIos(soap, p), 0) || soap_put___ns7__lockAllIos(soap, p, "-ns7:lockAllIos", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__lockAllIos * SOAP_FMAC4 soap_get___ns7__lockAllIos(struct soap*, struct __ns7__lockAllIos *, const char*, const char*);

inline int soap_read___ns7__lockAllIos(struct soap *soap, struct __ns7__lockAllIos *p)
{
	if (p)
	{	soap_default___ns7__lockAllIos(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__lockAllIos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__lockAllIos(struct soap *soap, const char *URL, struct __ns7__lockAllIos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__lockAllIos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__lockAllIos(struct soap *soap, struct __ns7__lockAllIos *p)
{
	if (soap_read___ns7__lockAllIos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__unlockIos_DEFINED
#define SOAP_TYPE___ns7__unlockIos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__unlockIos(struct soap*, struct __ns7__unlockIos *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__unlockIos(struct soap*, const struct __ns7__unlockIos *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__unlockIos(struct soap*, const char*, int, const struct __ns7__unlockIos *, const char*);
SOAP_FMAC3 struct __ns7__unlockIos * SOAP_FMAC4 soap_in___ns7__unlockIos(struct soap*, const char*, struct __ns7__unlockIos *, const char*);
SOAP_FMAC1 struct __ns7__unlockIos * SOAP_FMAC2 soap_instantiate___ns7__unlockIos(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__unlockIos * soap_new___ns7__unlockIos(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__unlockIos(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__unlockIos * soap_new_req___ns7__unlockIos(
	struct soap *soap)
{
	struct __ns7__unlockIos *_p = soap_new___ns7__unlockIos(soap);
	if (_p)
	{	soap_default___ns7__unlockIos(soap, _p);
	}
	return _p;
}

inline struct __ns7__unlockIos * soap_new_set___ns7__unlockIos(
	struct soap *soap,
	_ns7__unlockIos *ns7__unlockIos)
{
	struct __ns7__unlockIos *_p = soap_new___ns7__unlockIos(soap);
	if (_p)
	{	soap_default___ns7__unlockIos(soap, _p);
		_p->ns7__unlockIos = ns7__unlockIos;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__unlockIos(struct soap*, const struct __ns7__unlockIos *, const char*, const char*);

inline int soap_write___ns7__unlockIos(struct soap *soap, struct __ns7__unlockIos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__unlockIos(soap, p), 0) || soap_put___ns7__unlockIos(soap, p, "-ns7:unlockIos", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__unlockIos(struct soap *soap, const char *URL, struct __ns7__unlockIos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__unlockIos(soap, p), 0) || soap_put___ns7__unlockIos(soap, p, "-ns7:unlockIos", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__unlockIos(struct soap *soap, const char *URL, struct __ns7__unlockIos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__unlockIos(soap, p), 0) || soap_put___ns7__unlockIos(soap, p, "-ns7:unlockIos", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__unlockIos * SOAP_FMAC4 soap_get___ns7__unlockIos(struct soap*, struct __ns7__unlockIos *, const char*, const char*);

inline int soap_read___ns7__unlockIos(struct soap *soap, struct __ns7__unlockIos *p)
{
	if (p)
	{	soap_default___ns7__unlockIos(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__unlockIos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__unlockIos(struct soap *soap, const char *URL, struct __ns7__unlockIos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__unlockIos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__unlockIos(struct soap *soap, struct __ns7__unlockIos *p)
{
	if (soap_read___ns7__unlockIos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__lockIos_DEFINED
#define SOAP_TYPE___ns7__lockIos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__lockIos(struct soap*, struct __ns7__lockIos *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__lockIos(struct soap*, const struct __ns7__lockIos *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__lockIos(struct soap*, const char*, int, const struct __ns7__lockIos *, const char*);
SOAP_FMAC3 struct __ns7__lockIos * SOAP_FMAC4 soap_in___ns7__lockIos(struct soap*, const char*, struct __ns7__lockIos *, const char*);
SOAP_FMAC1 struct __ns7__lockIos * SOAP_FMAC2 soap_instantiate___ns7__lockIos(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__lockIos * soap_new___ns7__lockIos(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__lockIos(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__lockIos * soap_new_req___ns7__lockIos(
	struct soap *soap)
{
	struct __ns7__lockIos *_p = soap_new___ns7__lockIos(soap);
	if (_p)
	{	soap_default___ns7__lockIos(soap, _p);
	}
	return _p;
}

inline struct __ns7__lockIos * soap_new_set___ns7__lockIos(
	struct soap *soap,
	_ns7__lockIos *ns7__lockIos)
{
	struct __ns7__lockIos *_p = soap_new___ns7__lockIos(soap);
	if (_p)
	{	soap_default___ns7__lockIos(soap, _p);
		_p->ns7__lockIos = ns7__lockIos;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__lockIos(struct soap*, const struct __ns7__lockIos *, const char*, const char*);

inline int soap_write___ns7__lockIos(struct soap *soap, struct __ns7__lockIos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__lockIos(soap, p), 0) || soap_put___ns7__lockIos(soap, p, "-ns7:lockIos", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__lockIos(struct soap *soap, const char *URL, struct __ns7__lockIos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__lockIos(soap, p), 0) || soap_put___ns7__lockIos(soap, p, "-ns7:lockIos", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__lockIos(struct soap *soap, const char *URL, struct __ns7__lockIos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__lockIos(soap, p), 0) || soap_put___ns7__lockIos(soap, p, "-ns7:lockIos", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__lockIos * SOAP_FMAC4 soap_get___ns7__lockIos(struct soap*, struct __ns7__lockIos *, const char*, const char*);

inline int soap_read___ns7__lockIos(struct soap *soap, struct __ns7__lockIos *p)
{
	if (p)
	{	soap_default___ns7__lockIos(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__lockIos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__lockIos(struct soap *soap, const char *URL, struct __ns7__lockIos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__lockIos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__lockIos(struct soap *soap, struct __ns7__lockIos *p)
{
	if (soap_read___ns7__lockIos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__writeIos_DEFINED
#define SOAP_TYPE___ns7__writeIos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__writeIos(struct soap*, struct __ns7__writeIos *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__writeIos(struct soap*, const struct __ns7__writeIos *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__writeIos(struct soap*, const char*, int, const struct __ns7__writeIos *, const char*);
SOAP_FMAC3 struct __ns7__writeIos * SOAP_FMAC4 soap_in___ns7__writeIos(struct soap*, const char*, struct __ns7__writeIos *, const char*);
SOAP_FMAC1 struct __ns7__writeIos * SOAP_FMAC2 soap_instantiate___ns7__writeIos(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__writeIos * soap_new___ns7__writeIos(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__writeIos(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__writeIos * soap_new_req___ns7__writeIos(
	struct soap *soap)
{
	struct __ns7__writeIos *_p = soap_new___ns7__writeIos(soap);
	if (_p)
	{	soap_default___ns7__writeIos(soap, _p);
	}
	return _p;
}

inline struct __ns7__writeIos * soap_new_set___ns7__writeIos(
	struct soap *soap,
	_ns7__writeIos *ns7__writeIos)
{
	struct __ns7__writeIos *_p = soap_new___ns7__writeIos(soap);
	if (_p)
	{	soap_default___ns7__writeIos(soap, _p);
		_p->ns7__writeIos = ns7__writeIos;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__writeIos(struct soap*, const struct __ns7__writeIos *, const char*, const char*);

inline int soap_write___ns7__writeIos(struct soap *soap, struct __ns7__writeIos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__writeIos(soap, p), 0) || soap_put___ns7__writeIos(soap, p, "-ns7:writeIos", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__writeIos(struct soap *soap, const char *URL, struct __ns7__writeIos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__writeIos(soap, p), 0) || soap_put___ns7__writeIos(soap, p, "-ns7:writeIos", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__writeIos(struct soap *soap, const char *URL, struct __ns7__writeIos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__writeIos(soap, p), 0) || soap_put___ns7__writeIos(soap, p, "-ns7:writeIos", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__writeIos * SOAP_FMAC4 soap_get___ns7__writeIos(struct soap*, struct __ns7__writeIos *, const char*, const char*);

inline int soap_read___ns7__writeIos(struct soap *soap, struct __ns7__writeIos *p)
{
	if (p)
	{	soap_default___ns7__writeIos(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__writeIos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__writeIos(struct soap *soap, const char *URL, struct __ns7__writeIos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__writeIos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__writeIos(struct soap *soap, struct __ns7__writeIos *p)
{
	if (soap_read___ns7__writeIos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__readIos_DEFINED
#define SOAP_TYPE___ns7__readIos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__readIos(struct soap*, struct __ns7__readIos *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__readIos(struct soap*, const struct __ns7__readIos *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__readIos(struct soap*, const char*, int, const struct __ns7__readIos *, const char*);
SOAP_FMAC3 struct __ns7__readIos * SOAP_FMAC4 soap_in___ns7__readIos(struct soap*, const char*, struct __ns7__readIos *, const char*);
SOAP_FMAC1 struct __ns7__readIos * SOAP_FMAC2 soap_instantiate___ns7__readIos(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__readIos * soap_new___ns7__readIos(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__readIos(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__readIos * soap_new_req___ns7__readIos(
	struct soap *soap)
{
	struct __ns7__readIos *_p = soap_new___ns7__readIos(soap);
	if (_p)
	{	soap_default___ns7__readIos(soap, _p);
	}
	return _p;
}

inline struct __ns7__readIos * soap_new_set___ns7__readIos(
	struct soap *soap,
	_ns7__readIos *ns7__readIos)
{
	struct __ns7__readIos *_p = soap_new___ns7__readIos(soap);
	if (_p)
	{	soap_default___ns7__readIos(soap, _p);
		_p->ns7__readIos = ns7__readIos;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__readIos(struct soap*, const struct __ns7__readIos *, const char*, const char*);

inline int soap_write___ns7__readIos(struct soap *soap, struct __ns7__readIos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__readIos(soap, p), 0) || soap_put___ns7__readIos(soap, p, "-ns7:readIos", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__readIos(struct soap *soap, const char *URL, struct __ns7__readIos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__readIos(soap, p), 0) || soap_put___ns7__readIos(soap, p, "-ns7:readIos", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__readIos(struct soap *soap, const char *URL, struct __ns7__readIos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__readIos(soap, p), 0) || soap_put___ns7__readIos(soap, p, "-ns7:readIos", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__readIos * SOAP_FMAC4 soap_get___ns7__readIos(struct soap*, struct __ns7__readIos *, const char*, const char*);

inline int soap_read___ns7__readIos(struct soap *soap, struct __ns7__readIos *p)
{
	if (p)
	{	soap_default___ns7__readIos(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__readIos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__readIos(struct soap *soap, const char *URL, struct __ns7__readIos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__readIos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__readIos(struct soap *soap, struct __ns7__readIos *p)
{
	if (soap_read___ns7__readIos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__replaceLine_DEFINED
#define SOAP_TYPE___ns7__replaceLine_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__replaceLine(struct soap*, struct __ns7__replaceLine *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__replaceLine(struct soap*, const struct __ns7__replaceLine *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__replaceLine(struct soap*, const char*, int, const struct __ns7__replaceLine *, const char*);
SOAP_FMAC3 struct __ns7__replaceLine * SOAP_FMAC4 soap_in___ns7__replaceLine(struct soap*, const char*, struct __ns7__replaceLine *, const char*);
SOAP_FMAC1 struct __ns7__replaceLine * SOAP_FMAC2 soap_instantiate___ns7__replaceLine(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__replaceLine * soap_new___ns7__replaceLine(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__replaceLine(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__replaceLine * soap_new_req___ns7__replaceLine(
	struct soap *soap)
{
	struct __ns7__replaceLine *_p = soap_new___ns7__replaceLine(soap);
	if (_p)
	{	soap_default___ns7__replaceLine(soap, _p);
	}
	return _p;
}

inline struct __ns7__replaceLine * soap_new_set___ns7__replaceLine(
	struct soap *soap,
	_ns7__replaceLine *ns7__replaceLine)
{
	struct __ns7__replaceLine *_p = soap_new___ns7__replaceLine(soap);
	if (_p)
	{	soap_default___ns7__replaceLine(soap, _p);
		_p->ns7__replaceLine = ns7__replaceLine;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__replaceLine(struct soap*, const struct __ns7__replaceLine *, const char*, const char*);

inline int soap_write___ns7__replaceLine(struct soap *soap, struct __ns7__replaceLine const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__replaceLine(soap, p), 0) || soap_put___ns7__replaceLine(soap, p, "-ns7:replaceLine", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__replaceLine(struct soap *soap, const char *URL, struct __ns7__replaceLine const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__replaceLine(soap, p), 0) || soap_put___ns7__replaceLine(soap, p, "-ns7:replaceLine", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__replaceLine(struct soap *soap, const char *URL, struct __ns7__replaceLine const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__replaceLine(soap, p), 0) || soap_put___ns7__replaceLine(soap, p, "-ns7:replaceLine", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__replaceLine * SOAP_FMAC4 soap_get___ns7__replaceLine(struct soap*, struct __ns7__replaceLine *, const char*, const char*);

inline int soap_read___ns7__replaceLine(struct soap *soap, struct __ns7__replaceLine *p)
{
	if (p)
	{	soap_default___ns7__replaceLine(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__replaceLine(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__replaceLine(struct soap *soap, const char *URL, struct __ns7__replaceLine *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__replaceLine(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__replaceLine(struct soap *soap, struct __ns7__replaceLine *p)
{
	if (soap_read___ns7__replaceLine(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__setCurrentInstruction_DEFINED
#define SOAP_TYPE___ns7__setCurrentInstruction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__setCurrentInstruction(struct soap*, struct __ns7__setCurrentInstruction *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__setCurrentInstruction(struct soap*, const struct __ns7__setCurrentInstruction *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__setCurrentInstruction(struct soap*, const char*, int, const struct __ns7__setCurrentInstruction *, const char*);
SOAP_FMAC3 struct __ns7__setCurrentInstruction * SOAP_FMAC4 soap_in___ns7__setCurrentInstruction(struct soap*, const char*, struct __ns7__setCurrentInstruction *, const char*);
SOAP_FMAC1 struct __ns7__setCurrentInstruction * SOAP_FMAC2 soap_instantiate___ns7__setCurrentInstruction(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__setCurrentInstruction * soap_new___ns7__setCurrentInstruction(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__setCurrentInstruction(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__setCurrentInstruction * soap_new_req___ns7__setCurrentInstruction(
	struct soap *soap)
{
	struct __ns7__setCurrentInstruction *_p = soap_new___ns7__setCurrentInstruction(soap);
	if (_p)
	{	soap_default___ns7__setCurrentInstruction(soap, _p);
	}
	return _p;
}

inline struct __ns7__setCurrentInstruction * soap_new_set___ns7__setCurrentInstruction(
	struct soap *soap,
	_ns7__setCurrentInstruction *ns7__setCurrentInstruction)
{
	struct __ns7__setCurrentInstruction *_p = soap_new___ns7__setCurrentInstruction(soap);
	if (_p)
	{	soap_default___ns7__setCurrentInstruction(soap, _p);
		_p->ns7__setCurrentInstruction = ns7__setCurrentInstruction;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__setCurrentInstruction(struct soap*, const struct __ns7__setCurrentInstruction *, const char*, const char*);

inline int soap_write___ns7__setCurrentInstruction(struct soap *soap, struct __ns7__setCurrentInstruction const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__setCurrentInstruction(soap, p), 0) || soap_put___ns7__setCurrentInstruction(soap, p, "-ns7:setCurrentInstruction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__setCurrentInstruction(struct soap *soap, const char *URL, struct __ns7__setCurrentInstruction const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__setCurrentInstruction(soap, p), 0) || soap_put___ns7__setCurrentInstruction(soap, p, "-ns7:setCurrentInstruction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__setCurrentInstruction(struct soap *soap, const char *URL, struct __ns7__setCurrentInstruction const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__setCurrentInstruction(soap, p), 0) || soap_put___ns7__setCurrentInstruction(soap, p, "-ns7:setCurrentInstruction", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__setCurrentInstruction * SOAP_FMAC4 soap_get___ns7__setCurrentInstruction(struct soap*, struct __ns7__setCurrentInstruction *, const char*, const char*);

inline int soap_read___ns7__setCurrentInstruction(struct soap *soap, struct __ns7__setCurrentInstruction *p)
{
	if (p)
	{	soap_default___ns7__setCurrentInstruction(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__setCurrentInstruction(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__setCurrentInstruction(struct soap *soap, const char *URL, struct __ns7__setCurrentInstruction *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__setCurrentInstruction(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__setCurrentInstruction(struct soap *soap, struct __ns7__setCurrentInstruction *p)
{
	if (soap_read___ns7__setCurrentInstruction(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__setProjectAsModified_DEFINED
#define SOAP_TYPE___ns7__setProjectAsModified_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__setProjectAsModified(struct soap*, struct __ns7__setProjectAsModified *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__setProjectAsModified(struct soap*, const struct __ns7__setProjectAsModified *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__setProjectAsModified(struct soap*, const char*, int, const struct __ns7__setProjectAsModified *, const char*);
SOAP_FMAC3 struct __ns7__setProjectAsModified * SOAP_FMAC4 soap_in___ns7__setProjectAsModified(struct soap*, const char*, struct __ns7__setProjectAsModified *, const char*);
SOAP_FMAC1 struct __ns7__setProjectAsModified * SOAP_FMAC2 soap_instantiate___ns7__setProjectAsModified(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__setProjectAsModified * soap_new___ns7__setProjectAsModified(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__setProjectAsModified(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__setProjectAsModified * soap_new_req___ns7__setProjectAsModified(
	struct soap *soap)
{
	struct __ns7__setProjectAsModified *_p = soap_new___ns7__setProjectAsModified(soap);
	if (_p)
	{	soap_default___ns7__setProjectAsModified(soap, _p);
	}
	return _p;
}

inline struct __ns7__setProjectAsModified * soap_new_set___ns7__setProjectAsModified(
	struct soap *soap,
	_ns7__setProjectAsModified *ns7__setProjectAsModified)
{
	struct __ns7__setProjectAsModified *_p = soap_new___ns7__setProjectAsModified(soap);
	if (_p)
	{	soap_default___ns7__setProjectAsModified(soap, _p);
		_p->ns7__setProjectAsModified = ns7__setProjectAsModified;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__setProjectAsModified(struct soap*, const struct __ns7__setProjectAsModified *, const char*, const char*);

inline int soap_write___ns7__setProjectAsModified(struct soap *soap, struct __ns7__setProjectAsModified const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__setProjectAsModified(soap, p), 0) || soap_put___ns7__setProjectAsModified(soap, p, "-ns7:setProjectAsModified", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__setProjectAsModified(struct soap *soap, const char *URL, struct __ns7__setProjectAsModified const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__setProjectAsModified(soap, p), 0) || soap_put___ns7__setProjectAsModified(soap, p, "-ns7:setProjectAsModified", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__setProjectAsModified(struct soap *soap, const char *URL, struct __ns7__setProjectAsModified const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__setProjectAsModified(soap, p), 0) || soap_put___ns7__setProjectAsModified(soap, p, "-ns7:setProjectAsModified", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__setProjectAsModified * SOAP_FMAC4 soap_get___ns7__setProjectAsModified(struct soap*, struct __ns7__setProjectAsModified *, const char*, const char*);

inline int soap_read___ns7__setProjectAsModified(struct soap *soap, struct __ns7__setProjectAsModified *p)
{
	if (p)
	{	soap_default___ns7__setProjectAsModified(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__setProjectAsModified(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__setProjectAsModified(struct soap *soap, const char *URL, struct __ns7__setProjectAsModified *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__setProjectAsModified(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__setProjectAsModified(struct soap *soap, struct __ns7__setProjectAsModified *p)
{
	if (soap_read___ns7__setProjectAsModified(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__execVal3_DEFINED
#define SOAP_TYPE___ns7__execVal3_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__execVal3(struct soap*, struct __ns7__execVal3 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__execVal3(struct soap*, const struct __ns7__execVal3 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__execVal3(struct soap*, const char*, int, const struct __ns7__execVal3 *, const char*);
SOAP_FMAC3 struct __ns7__execVal3 * SOAP_FMAC4 soap_in___ns7__execVal3(struct soap*, const char*, struct __ns7__execVal3 *, const char*);
SOAP_FMAC1 struct __ns7__execVal3 * SOAP_FMAC2 soap_instantiate___ns7__execVal3(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__execVal3 * soap_new___ns7__execVal3(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__execVal3(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__execVal3 * soap_new_req___ns7__execVal3(
	struct soap *soap)
{
	struct __ns7__execVal3 *_p = soap_new___ns7__execVal3(soap);
	if (_p)
	{	soap_default___ns7__execVal3(soap, _p);
	}
	return _p;
}

inline struct __ns7__execVal3 * soap_new_set___ns7__execVal3(
	struct soap *soap,
	_ns7__execVal3 *ns7__execVal3)
{
	struct __ns7__execVal3 *_p = soap_new___ns7__execVal3(soap);
	if (_p)
	{	soap_default___ns7__execVal3(soap, _p);
		_p->ns7__execVal3 = ns7__execVal3;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__execVal3(struct soap*, const struct __ns7__execVal3 *, const char*, const char*);

inline int soap_write___ns7__execVal3(struct soap *soap, struct __ns7__execVal3 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__execVal3(soap, p), 0) || soap_put___ns7__execVal3(soap, p, "-ns7:execVal3", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__execVal3(struct soap *soap, const char *URL, struct __ns7__execVal3 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__execVal3(soap, p), 0) || soap_put___ns7__execVal3(soap, p, "-ns7:execVal3", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__execVal3(struct soap *soap, const char *URL, struct __ns7__execVal3 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__execVal3(soap, p), 0) || soap_put___ns7__execVal3(soap, p, "-ns7:execVal3", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__execVal3 * SOAP_FMAC4 soap_get___ns7__execVal3(struct soap*, struct __ns7__execVal3 *, const char*, const char*);

inline int soap_read___ns7__execVal3(struct soap *soap, struct __ns7__execVal3 *p)
{
	if (p)
	{	soap_default___ns7__execVal3(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__execVal3(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__execVal3(struct soap *soap, const char *URL, struct __ns7__execVal3 *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__execVal3(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__execVal3(struct soap *soap, struct __ns7__execVal3 *p)
{
	if (soap_read___ns7__execVal3(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__getWatches_DEFINED
#define SOAP_TYPE___ns7__getWatches_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__getWatches(struct soap*, struct __ns7__getWatches *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__getWatches(struct soap*, const struct __ns7__getWatches *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__getWatches(struct soap*, const char*, int, const struct __ns7__getWatches *, const char*);
SOAP_FMAC3 struct __ns7__getWatches * SOAP_FMAC4 soap_in___ns7__getWatches(struct soap*, const char*, struct __ns7__getWatches *, const char*);
SOAP_FMAC1 struct __ns7__getWatches * SOAP_FMAC2 soap_instantiate___ns7__getWatches(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__getWatches * soap_new___ns7__getWatches(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__getWatches(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__getWatches * soap_new_req___ns7__getWatches(
	struct soap *soap)
{
	struct __ns7__getWatches *_p = soap_new___ns7__getWatches(soap);
	if (_p)
	{	soap_default___ns7__getWatches(soap, _p);
	}
	return _p;
}

inline struct __ns7__getWatches * soap_new_set___ns7__getWatches(
	struct soap *soap,
	_ns7__getWatches *ns7__getWatches)
{
	struct __ns7__getWatches *_p = soap_new___ns7__getWatches(soap);
	if (_p)
	{	soap_default___ns7__getWatches(soap, _p);
		_p->ns7__getWatches = ns7__getWatches;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__getWatches(struct soap*, const struct __ns7__getWatches *, const char*, const char*);

inline int soap_write___ns7__getWatches(struct soap *soap, struct __ns7__getWatches const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__getWatches(soap, p), 0) || soap_put___ns7__getWatches(soap, p, "-ns7:getWatches", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__getWatches(struct soap *soap, const char *URL, struct __ns7__getWatches const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__getWatches(soap, p), 0) || soap_put___ns7__getWatches(soap, p, "-ns7:getWatches", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__getWatches(struct soap *soap, const char *URL, struct __ns7__getWatches const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__getWatches(soap, p), 0) || soap_put___ns7__getWatches(soap, p, "-ns7:getWatches", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__getWatches * SOAP_FMAC4 soap_get___ns7__getWatches(struct soap*, struct __ns7__getWatches *, const char*, const char*);

inline int soap_read___ns7__getWatches(struct soap *soap, struct __ns7__getWatches *p)
{
	if (p)
	{	soap_default___ns7__getWatches(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__getWatches(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__getWatches(struct soap *soap, const char *URL, struct __ns7__getWatches *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__getWatches(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__getWatches(struct soap *soap, struct __ns7__getWatches *p)
{
	if (soap_read___ns7__getWatches(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__getStackFrame_DEFINED
#define SOAP_TYPE___ns7__getStackFrame_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__getStackFrame(struct soap*, struct __ns7__getStackFrame *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__getStackFrame(struct soap*, const struct __ns7__getStackFrame *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__getStackFrame(struct soap*, const char*, int, const struct __ns7__getStackFrame *, const char*);
SOAP_FMAC3 struct __ns7__getStackFrame * SOAP_FMAC4 soap_in___ns7__getStackFrame(struct soap*, const char*, struct __ns7__getStackFrame *, const char*);
SOAP_FMAC1 struct __ns7__getStackFrame * SOAP_FMAC2 soap_instantiate___ns7__getStackFrame(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__getStackFrame * soap_new___ns7__getStackFrame(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__getStackFrame(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__getStackFrame * soap_new_req___ns7__getStackFrame(
	struct soap *soap)
{
	struct __ns7__getStackFrame *_p = soap_new___ns7__getStackFrame(soap);
	if (_p)
	{	soap_default___ns7__getStackFrame(soap, _p);
	}
	return _p;
}

inline struct __ns7__getStackFrame * soap_new_set___ns7__getStackFrame(
	struct soap *soap,
	_ns7__getStackFrame *ns7__getStackFrame)
{
	struct __ns7__getStackFrame *_p = soap_new___ns7__getStackFrame(soap);
	if (_p)
	{	soap_default___ns7__getStackFrame(soap, _p);
		_p->ns7__getStackFrame = ns7__getStackFrame;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__getStackFrame(struct soap*, const struct __ns7__getStackFrame *, const char*, const char*);

inline int soap_write___ns7__getStackFrame(struct soap *soap, struct __ns7__getStackFrame const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__getStackFrame(soap, p), 0) || soap_put___ns7__getStackFrame(soap, p, "-ns7:getStackFrame", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__getStackFrame(struct soap *soap, const char *URL, struct __ns7__getStackFrame const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__getStackFrame(soap, p), 0) || soap_put___ns7__getStackFrame(soap, p, "-ns7:getStackFrame", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__getStackFrame(struct soap *soap, const char *URL, struct __ns7__getStackFrame const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__getStackFrame(soap, p), 0) || soap_put___ns7__getStackFrame(soap, p, "-ns7:getStackFrame", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__getStackFrame * SOAP_FMAC4 soap_get___ns7__getStackFrame(struct soap*, struct __ns7__getStackFrame *, const char*, const char*);

inline int soap_read___ns7__getStackFrame(struct soap *soap, struct __ns7__getStackFrame *p)
{
	if (p)
	{	soap_default___ns7__getStackFrame(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__getStackFrame(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__getStackFrame(struct soap *soap, const char *URL, struct __ns7__getStackFrame *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__getStackFrame(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__getStackFrame(struct soap *soap, struct __ns7__getStackFrame *p)
{
	if (soap_read___ns7__getStackFrame(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__getCallStack_DEFINED
#define SOAP_TYPE___ns7__getCallStack_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__getCallStack(struct soap*, struct __ns7__getCallStack *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__getCallStack(struct soap*, const struct __ns7__getCallStack *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__getCallStack(struct soap*, const char*, int, const struct __ns7__getCallStack *, const char*);
SOAP_FMAC3 struct __ns7__getCallStack * SOAP_FMAC4 soap_in___ns7__getCallStack(struct soap*, const char*, struct __ns7__getCallStack *, const char*);
SOAP_FMAC1 struct __ns7__getCallStack * SOAP_FMAC2 soap_instantiate___ns7__getCallStack(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__getCallStack * soap_new___ns7__getCallStack(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__getCallStack(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__getCallStack * soap_new_req___ns7__getCallStack(
	struct soap *soap)
{
	struct __ns7__getCallStack *_p = soap_new___ns7__getCallStack(soap);
	if (_p)
	{	soap_default___ns7__getCallStack(soap, _p);
	}
	return _p;
}

inline struct __ns7__getCallStack * soap_new_set___ns7__getCallStack(
	struct soap *soap,
	_ns7__getCallStack *ns7__getCallStack)
{
	struct __ns7__getCallStack *_p = soap_new___ns7__getCallStack(soap);
	if (_p)
	{	soap_default___ns7__getCallStack(soap, _p);
		_p->ns7__getCallStack = ns7__getCallStack;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__getCallStack(struct soap*, const struct __ns7__getCallStack *, const char*, const char*);

inline int soap_write___ns7__getCallStack(struct soap *soap, struct __ns7__getCallStack const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__getCallStack(soap, p), 0) || soap_put___ns7__getCallStack(soap, p, "-ns7:getCallStack", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__getCallStack(struct soap *soap, const char *URL, struct __ns7__getCallStack const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__getCallStack(soap, p), 0) || soap_put___ns7__getCallStack(soap, p, "-ns7:getCallStack", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__getCallStack(struct soap *soap, const char *URL, struct __ns7__getCallStack const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__getCallStack(soap, p), 0) || soap_put___ns7__getCallStack(soap, p, "-ns7:getCallStack", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__getCallStack * SOAP_FMAC4 soap_get___ns7__getCallStack(struct soap*, struct __ns7__getCallStack *, const char*, const char*);

inline int soap_read___ns7__getCallStack(struct soap *soap, struct __ns7__getCallStack *p)
{
	if (p)
	{	soap_default___ns7__getCallStack(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__getCallStack(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__getCallStack(struct soap *soap, const char *URL, struct __ns7__getCallStack *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__getCallStack(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__getCallStack(struct soap *soap, struct __ns7__getCallStack *p)
{
	if (soap_read___ns7__getCallStack(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__unsubscribeToControllerEvents_DEFINED
#define SOAP_TYPE___ns7__unsubscribeToControllerEvents_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__unsubscribeToControllerEvents(struct soap*, struct __ns7__unsubscribeToControllerEvents *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__unsubscribeToControllerEvents(struct soap*, const struct __ns7__unsubscribeToControllerEvents *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__unsubscribeToControllerEvents(struct soap*, const char*, int, const struct __ns7__unsubscribeToControllerEvents *, const char*);
SOAP_FMAC3 struct __ns7__unsubscribeToControllerEvents * SOAP_FMAC4 soap_in___ns7__unsubscribeToControllerEvents(struct soap*, const char*, struct __ns7__unsubscribeToControllerEvents *, const char*);
SOAP_FMAC1 struct __ns7__unsubscribeToControllerEvents * SOAP_FMAC2 soap_instantiate___ns7__unsubscribeToControllerEvents(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__unsubscribeToControllerEvents * soap_new___ns7__unsubscribeToControllerEvents(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__unsubscribeToControllerEvents(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__unsubscribeToControllerEvents * soap_new_req___ns7__unsubscribeToControllerEvents(
	struct soap *soap)
{
	struct __ns7__unsubscribeToControllerEvents *_p = soap_new___ns7__unsubscribeToControllerEvents(soap);
	if (_p)
	{	soap_default___ns7__unsubscribeToControllerEvents(soap, _p);
	}
	return _p;
}

inline struct __ns7__unsubscribeToControllerEvents * soap_new_set___ns7__unsubscribeToControllerEvents(
	struct soap *soap,
	_ns7__unsubscribeToControllerEvents *ns7__unsubscribeToControllerEvents)
{
	struct __ns7__unsubscribeToControllerEvents *_p = soap_new___ns7__unsubscribeToControllerEvents(soap);
	if (_p)
	{	soap_default___ns7__unsubscribeToControllerEvents(soap, _p);
		_p->ns7__unsubscribeToControllerEvents = ns7__unsubscribeToControllerEvents;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__unsubscribeToControllerEvents(struct soap*, const struct __ns7__unsubscribeToControllerEvents *, const char*, const char*);

inline int soap_write___ns7__unsubscribeToControllerEvents(struct soap *soap, struct __ns7__unsubscribeToControllerEvents const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__unsubscribeToControllerEvents(soap, p), 0) || soap_put___ns7__unsubscribeToControllerEvents(soap, p, "-ns7:unsubscribeToControllerEvents", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__unsubscribeToControllerEvents(struct soap *soap, const char *URL, struct __ns7__unsubscribeToControllerEvents const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__unsubscribeToControllerEvents(soap, p), 0) || soap_put___ns7__unsubscribeToControllerEvents(soap, p, "-ns7:unsubscribeToControllerEvents", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__unsubscribeToControllerEvents(struct soap *soap, const char *URL, struct __ns7__unsubscribeToControllerEvents const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__unsubscribeToControllerEvents(soap, p), 0) || soap_put___ns7__unsubscribeToControllerEvents(soap, p, "-ns7:unsubscribeToControllerEvents", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__unsubscribeToControllerEvents * SOAP_FMAC4 soap_get___ns7__unsubscribeToControllerEvents(struct soap*, struct __ns7__unsubscribeToControllerEvents *, const char*, const char*);

inline int soap_read___ns7__unsubscribeToControllerEvents(struct soap *soap, struct __ns7__unsubscribeToControllerEvents *p)
{
	if (p)
	{	soap_default___ns7__unsubscribeToControllerEvents(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__unsubscribeToControllerEvents(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__unsubscribeToControllerEvents(struct soap *soap, const char *URL, struct __ns7__unsubscribeToControllerEvents *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__unsubscribeToControllerEvents(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__unsubscribeToControllerEvents(struct soap *soap, struct __ns7__unsubscribeToControllerEvents *p)
{
	if (soap_read___ns7__unsubscribeToControllerEvents(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__subscribeToControllerEvents_DEFINED
#define SOAP_TYPE___ns7__subscribeToControllerEvents_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__subscribeToControllerEvents(struct soap*, struct __ns7__subscribeToControllerEvents *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__subscribeToControllerEvents(struct soap*, const struct __ns7__subscribeToControllerEvents *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__subscribeToControllerEvents(struct soap*, const char*, int, const struct __ns7__subscribeToControllerEvents *, const char*);
SOAP_FMAC3 struct __ns7__subscribeToControllerEvents * SOAP_FMAC4 soap_in___ns7__subscribeToControllerEvents(struct soap*, const char*, struct __ns7__subscribeToControllerEvents *, const char*);
SOAP_FMAC1 struct __ns7__subscribeToControllerEvents * SOAP_FMAC2 soap_instantiate___ns7__subscribeToControllerEvents(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__subscribeToControllerEvents * soap_new___ns7__subscribeToControllerEvents(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__subscribeToControllerEvents(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__subscribeToControllerEvents * soap_new_req___ns7__subscribeToControllerEvents(
	struct soap *soap)
{
	struct __ns7__subscribeToControllerEvents *_p = soap_new___ns7__subscribeToControllerEvents(soap);
	if (_p)
	{	soap_default___ns7__subscribeToControllerEvents(soap, _p);
	}
	return _p;
}

inline struct __ns7__subscribeToControllerEvents * soap_new_set___ns7__subscribeToControllerEvents(
	struct soap *soap,
	_ns7__subscribeToControllerEvents *ns7__subscribeToControllerEvents)
{
	struct __ns7__subscribeToControllerEvents *_p = soap_new___ns7__subscribeToControllerEvents(soap);
	if (_p)
	{	soap_default___ns7__subscribeToControllerEvents(soap, _p);
		_p->ns7__subscribeToControllerEvents = ns7__subscribeToControllerEvents;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__subscribeToControllerEvents(struct soap*, const struct __ns7__subscribeToControllerEvents *, const char*, const char*);

inline int soap_write___ns7__subscribeToControllerEvents(struct soap *soap, struct __ns7__subscribeToControllerEvents const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__subscribeToControllerEvents(soap, p), 0) || soap_put___ns7__subscribeToControllerEvents(soap, p, "-ns7:subscribeToControllerEvents", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__subscribeToControllerEvents(struct soap *soap, const char *URL, struct __ns7__subscribeToControllerEvents const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__subscribeToControllerEvents(soap, p), 0) || soap_put___ns7__subscribeToControllerEvents(soap, p, "-ns7:subscribeToControllerEvents", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__subscribeToControllerEvents(struct soap *soap, const char *URL, struct __ns7__subscribeToControllerEvents const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__subscribeToControllerEvents(soap, p), 0) || soap_put___ns7__subscribeToControllerEvents(soap, p, "-ns7:subscribeToControllerEvents", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__subscribeToControllerEvents * SOAP_FMAC4 soap_get___ns7__subscribeToControllerEvents(struct soap*, struct __ns7__subscribeToControllerEvents *, const char*, const char*);

inline int soap_read___ns7__subscribeToControllerEvents(struct soap *soap, struct __ns7__subscribeToControllerEvents *p)
{
	if (p)
	{	soap_default___ns7__subscribeToControllerEvents(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__subscribeToControllerEvents(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__subscribeToControllerEvents(struct soap *soap, const char *URL, struct __ns7__subscribeToControllerEvents *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__subscribeToControllerEvents(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__subscribeToControllerEvents(struct soap *soap, struct __ns7__subscribeToControllerEvents *p)
{
	if (soap_read___ns7__subscribeToControllerEvents(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__taskStep_DEFINED
#define SOAP_TYPE___ns7__taskStep_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__taskStep(struct soap*, struct __ns7__taskStep *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__taskStep(struct soap*, const struct __ns7__taskStep *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__taskStep(struct soap*, const char*, int, const struct __ns7__taskStep *, const char*);
SOAP_FMAC3 struct __ns7__taskStep * SOAP_FMAC4 soap_in___ns7__taskStep(struct soap*, const char*, struct __ns7__taskStep *, const char*);
SOAP_FMAC1 struct __ns7__taskStep * SOAP_FMAC2 soap_instantiate___ns7__taskStep(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__taskStep * soap_new___ns7__taskStep(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__taskStep(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__taskStep * soap_new_req___ns7__taskStep(
	struct soap *soap)
{
	struct __ns7__taskStep *_p = soap_new___ns7__taskStep(soap);
	if (_p)
	{	soap_default___ns7__taskStep(soap, _p);
	}
	return _p;
}

inline struct __ns7__taskStep * soap_new_set___ns7__taskStep(
	struct soap *soap,
	_ns7__taskStep *ns7__taskStep)
{
	struct __ns7__taskStep *_p = soap_new___ns7__taskStep(soap);
	if (_p)
	{	soap_default___ns7__taskStep(soap, _p);
		_p->ns7__taskStep = ns7__taskStep;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__taskStep(struct soap*, const struct __ns7__taskStep *, const char*, const char*);

inline int soap_write___ns7__taskStep(struct soap *soap, struct __ns7__taskStep const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__taskStep(soap, p), 0) || soap_put___ns7__taskStep(soap, p, "-ns7:taskStep", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__taskStep(struct soap *soap, const char *URL, struct __ns7__taskStep const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__taskStep(soap, p), 0) || soap_put___ns7__taskStep(soap, p, "-ns7:taskStep", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__taskStep(struct soap *soap, const char *URL, struct __ns7__taskStep const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__taskStep(soap, p), 0) || soap_put___ns7__taskStep(soap, p, "-ns7:taskStep", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__taskStep * SOAP_FMAC4 soap_get___ns7__taskStep(struct soap*, struct __ns7__taskStep *, const char*, const char*);

inline int soap_read___ns7__taskStep(struct soap *soap, struct __ns7__taskStep *p)
{
	if (p)
	{	soap_default___ns7__taskStep(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__taskStep(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__taskStep(struct soap *soap, const char *URL, struct __ns7__taskStep *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__taskStep(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__taskStep(struct soap *soap, struct __ns7__taskStep *p)
{
	if (soap_read___ns7__taskStep(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__taskKill_DEFINED
#define SOAP_TYPE___ns7__taskKill_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__taskKill(struct soap*, struct __ns7__taskKill *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__taskKill(struct soap*, const struct __ns7__taskKill *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__taskKill(struct soap*, const char*, int, const struct __ns7__taskKill *, const char*);
SOAP_FMAC3 struct __ns7__taskKill * SOAP_FMAC4 soap_in___ns7__taskKill(struct soap*, const char*, struct __ns7__taskKill *, const char*);
SOAP_FMAC1 struct __ns7__taskKill * SOAP_FMAC2 soap_instantiate___ns7__taskKill(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__taskKill * soap_new___ns7__taskKill(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__taskKill(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__taskKill * soap_new_req___ns7__taskKill(
	struct soap *soap)
{
	struct __ns7__taskKill *_p = soap_new___ns7__taskKill(soap);
	if (_p)
	{	soap_default___ns7__taskKill(soap, _p);
	}
	return _p;
}

inline struct __ns7__taskKill * soap_new_set___ns7__taskKill(
	struct soap *soap,
	_ns7__taskKill *ns7__taskKill)
{
	struct __ns7__taskKill *_p = soap_new___ns7__taskKill(soap);
	if (_p)
	{	soap_default___ns7__taskKill(soap, _p);
		_p->ns7__taskKill = ns7__taskKill;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__taskKill(struct soap*, const struct __ns7__taskKill *, const char*, const char*);

inline int soap_write___ns7__taskKill(struct soap *soap, struct __ns7__taskKill const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__taskKill(soap, p), 0) || soap_put___ns7__taskKill(soap, p, "-ns7:taskKill", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__taskKill(struct soap *soap, const char *URL, struct __ns7__taskKill const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__taskKill(soap, p), 0) || soap_put___ns7__taskKill(soap, p, "-ns7:taskKill", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__taskKill(struct soap *soap, const char *URL, struct __ns7__taskKill const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__taskKill(soap, p), 0) || soap_put___ns7__taskKill(soap, p, "-ns7:taskKill", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__taskKill * SOAP_FMAC4 soap_get___ns7__taskKill(struct soap*, struct __ns7__taskKill *, const char*, const char*);

inline int soap_read___ns7__taskKill(struct soap *soap, struct __ns7__taskKill *p)
{
	if (p)
	{	soap_default___ns7__taskKill(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__taskKill(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__taskKill(struct soap *soap, const char *URL, struct __ns7__taskKill *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__taskKill(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__taskKill(struct soap *soap, struct __ns7__taskKill *p)
{
	if (soap_read___ns7__taskKill(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__taskResume_DEFINED
#define SOAP_TYPE___ns7__taskResume_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__taskResume(struct soap*, struct __ns7__taskResume *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__taskResume(struct soap*, const struct __ns7__taskResume *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__taskResume(struct soap*, const char*, int, const struct __ns7__taskResume *, const char*);
SOAP_FMAC3 struct __ns7__taskResume * SOAP_FMAC4 soap_in___ns7__taskResume(struct soap*, const char*, struct __ns7__taskResume *, const char*);
SOAP_FMAC1 struct __ns7__taskResume * SOAP_FMAC2 soap_instantiate___ns7__taskResume(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__taskResume * soap_new___ns7__taskResume(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__taskResume(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__taskResume * soap_new_req___ns7__taskResume(
	struct soap *soap)
{
	struct __ns7__taskResume *_p = soap_new___ns7__taskResume(soap);
	if (_p)
	{	soap_default___ns7__taskResume(soap, _p);
	}
	return _p;
}

inline struct __ns7__taskResume * soap_new_set___ns7__taskResume(
	struct soap *soap,
	_ns7__taskResume *ns7__taskResume)
{
	struct __ns7__taskResume *_p = soap_new___ns7__taskResume(soap);
	if (_p)
	{	soap_default___ns7__taskResume(soap, _p);
		_p->ns7__taskResume = ns7__taskResume;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__taskResume(struct soap*, const struct __ns7__taskResume *, const char*, const char*);

inline int soap_write___ns7__taskResume(struct soap *soap, struct __ns7__taskResume const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__taskResume(soap, p), 0) || soap_put___ns7__taskResume(soap, p, "-ns7:taskResume", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__taskResume(struct soap *soap, const char *URL, struct __ns7__taskResume const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__taskResume(soap, p), 0) || soap_put___ns7__taskResume(soap, p, "-ns7:taskResume", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__taskResume(struct soap *soap, const char *URL, struct __ns7__taskResume const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__taskResume(soap, p), 0) || soap_put___ns7__taskResume(soap, p, "-ns7:taskResume", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__taskResume * SOAP_FMAC4 soap_get___ns7__taskResume(struct soap*, struct __ns7__taskResume *, const char*, const char*);

inline int soap_read___ns7__taskResume(struct soap *soap, struct __ns7__taskResume *p)
{
	if (p)
	{	soap_default___ns7__taskResume(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__taskResume(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__taskResume(struct soap *soap, const char *URL, struct __ns7__taskResume *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__taskResume(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__taskResume(struct soap *soap, struct __ns7__taskResume *p)
{
	if (soap_read___ns7__taskResume(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__taskSuspend_DEFINED
#define SOAP_TYPE___ns7__taskSuspend_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__taskSuspend(struct soap*, struct __ns7__taskSuspend *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__taskSuspend(struct soap*, const struct __ns7__taskSuspend *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__taskSuspend(struct soap*, const char*, int, const struct __ns7__taskSuspend *, const char*);
SOAP_FMAC3 struct __ns7__taskSuspend * SOAP_FMAC4 soap_in___ns7__taskSuspend(struct soap*, const char*, struct __ns7__taskSuspend *, const char*);
SOAP_FMAC1 struct __ns7__taskSuspend * SOAP_FMAC2 soap_instantiate___ns7__taskSuspend(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__taskSuspend * soap_new___ns7__taskSuspend(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__taskSuspend(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__taskSuspend * soap_new_req___ns7__taskSuspend(
	struct soap *soap)
{
	struct __ns7__taskSuspend *_p = soap_new___ns7__taskSuspend(soap);
	if (_p)
	{	soap_default___ns7__taskSuspend(soap, _p);
	}
	return _p;
}

inline struct __ns7__taskSuspend * soap_new_set___ns7__taskSuspend(
	struct soap *soap,
	_ns7__taskSuspend *ns7__taskSuspend)
{
	struct __ns7__taskSuspend *_p = soap_new___ns7__taskSuspend(soap);
	if (_p)
	{	soap_default___ns7__taskSuspend(soap, _p);
		_p->ns7__taskSuspend = ns7__taskSuspend;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__taskSuspend(struct soap*, const struct __ns7__taskSuspend *, const char*, const char*);

inline int soap_write___ns7__taskSuspend(struct soap *soap, struct __ns7__taskSuspend const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__taskSuspend(soap, p), 0) || soap_put___ns7__taskSuspend(soap, p, "-ns7:taskSuspend", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__taskSuspend(struct soap *soap, const char *URL, struct __ns7__taskSuspend const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__taskSuspend(soap, p), 0) || soap_put___ns7__taskSuspend(soap, p, "-ns7:taskSuspend", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__taskSuspend(struct soap *soap, const char *URL, struct __ns7__taskSuspend const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__taskSuspend(soap, p), 0) || soap_put___ns7__taskSuspend(soap, p, "-ns7:taskSuspend", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__taskSuspend * SOAP_FMAC4 soap_get___ns7__taskSuspend(struct soap*, struct __ns7__taskSuspend *, const char*, const char*);

inline int soap_read___ns7__taskSuspend(struct soap *soap, struct __ns7__taskSuspend *p)
{
	if (p)
	{	soap_default___ns7__taskSuspend(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__taskSuspend(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__taskSuspend(struct soap *soap, const char *URL, struct __ns7__taskSuspend *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__taskSuspend(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__taskSuspend(struct soap *soap, struct __ns7__taskSuspend *p)
{
	if (soap_read___ns7__taskSuspend(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__getTasks_DEFINED
#define SOAP_TYPE___ns7__getTasks_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__getTasks(struct soap*, struct __ns7__getTasks *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__getTasks(struct soap*, const struct __ns7__getTasks *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__getTasks(struct soap*, const char*, int, const struct __ns7__getTasks *, const char*);
SOAP_FMAC3 struct __ns7__getTasks * SOAP_FMAC4 soap_in___ns7__getTasks(struct soap*, const char*, struct __ns7__getTasks *, const char*);
SOAP_FMAC1 struct __ns7__getTasks * SOAP_FMAC2 soap_instantiate___ns7__getTasks(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__getTasks * soap_new___ns7__getTasks(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__getTasks(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__getTasks * soap_new_req___ns7__getTasks(
	struct soap *soap)
{
	struct __ns7__getTasks *_p = soap_new___ns7__getTasks(soap);
	if (_p)
	{	soap_default___ns7__getTasks(soap, _p);
	}
	return _p;
}

inline struct __ns7__getTasks * soap_new_set___ns7__getTasks(
	struct soap *soap,
	_ns7__getTasks *ns7__getTasks)
{
	struct __ns7__getTasks *_p = soap_new___ns7__getTasks(soap);
	if (_p)
	{	soap_default___ns7__getTasks(soap, _p);
		_p->ns7__getTasks = ns7__getTasks;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__getTasks(struct soap*, const struct __ns7__getTasks *, const char*, const char*);

inline int soap_write___ns7__getTasks(struct soap *soap, struct __ns7__getTasks const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__getTasks(soap, p), 0) || soap_put___ns7__getTasks(soap, p, "-ns7:getTasks", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__getTasks(struct soap *soap, const char *URL, struct __ns7__getTasks const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__getTasks(soap, p), 0) || soap_put___ns7__getTasks(soap, p, "-ns7:getTasks", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__getTasks(struct soap *soap, const char *URL, struct __ns7__getTasks const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__getTasks(soap, p), 0) || soap_put___ns7__getTasks(soap, p, "-ns7:getTasks", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__getTasks * SOAP_FMAC4 soap_get___ns7__getTasks(struct soap*, struct __ns7__getTasks *, const char*, const char*);

inline int soap_read___ns7__getTasks(struct soap *soap, struct __ns7__getTasks *p)
{
	if (p)
	{	soap_default___ns7__getTasks(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__getTasks(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__getTasks(struct soap *soap, const char *URL, struct __ns7__getTasks *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__getTasks(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__getTasks(struct soap *soap, struct __ns7__getTasks *p)
{
	if (soap_read___ns7__getTasks(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__clearAllBreakpoints_DEFINED
#define SOAP_TYPE___ns7__clearAllBreakpoints_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__clearAllBreakpoints(struct soap*, struct __ns7__clearAllBreakpoints *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__clearAllBreakpoints(struct soap*, const struct __ns7__clearAllBreakpoints *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__clearAllBreakpoints(struct soap*, const char*, int, const struct __ns7__clearAllBreakpoints *, const char*);
SOAP_FMAC3 struct __ns7__clearAllBreakpoints * SOAP_FMAC4 soap_in___ns7__clearAllBreakpoints(struct soap*, const char*, struct __ns7__clearAllBreakpoints *, const char*);
SOAP_FMAC1 struct __ns7__clearAllBreakpoints * SOAP_FMAC2 soap_instantiate___ns7__clearAllBreakpoints(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__clearAllBreakpoints * soap_new___ns7__clearAllBreakpoints(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__clearAllBreakpoints(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__clearAllBreakpoints * soap_new_req___ns7__clearAllBreakpoints(
	struct soap *soap)
{
	struct __ns7__clearAllBreakpoints *_p = soap_new___ns7__clearAllBreakpoints(soap);
	if (_p)
	{	soap_default___ns7__clearAllBreakpoints(soap, _p);
	}
	return _p;
}

inline struct __ns7__clearAllBreakpoints * soap_new_set___ns7__clearAllBreakpoints(
	struct soap *soap,
	_ns7__clearAllBreakpoints *ns7__clearAllBreakpoints)
{
	struct __ns7__clearAllBreakpoints *_p = soap_new___ns7__clearAllBreakpoints(soap);
	if (_p)
	{	soap_default___ns7__clearAllBreakpoints(soap, _p);
		_p->ns7__clearAllBreakpoints = ns7__clearAllBreakpoints;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__clearAllBreakpoints(struct soap*, const struct __ns7__clearAllBreakpoints *, const char*, const char*);

inline int soap_write___ns7__clearAllBreakpoints(struct soap *soap, struct __ns7__clearAllBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__clearAllBreakpoints(soap, p), 0) || soap_put___ns7__clearAllBreakpoints(soap, p, "-ns7:clearAllBreakpoints", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__clearAllBreakpoints(struct soap *soap, const char *URL, struct __ns7__clearAllBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__clearAllBreakpoints(soap, p), 0) || soap_put___ns7__clearAllBreakpoints(soap, p, "-ns7:clearAllBreakpoints", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__clearAllBreakpoints(struct soap *soap, const char *URL, struct __ns7__clearAllBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__clearAllBreakpoints(soap, p), 0) || soap_put___ns7__clearAllBreakpoints(soap, p, "-ns7:clearAllBreakpoints", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__clearAllBreakpoints * SOAP_FMAC4 soap_get___ns7__clearAllBreakpoints(struct soap*, struct __ns7__clearAllBreakpoints *, const char*, const char*);

inline int soap_read___ns7__clearAllBreakpoints(struct soap *soap, struct __ns7__clearAllBreakpoints *p)
{
	if (p)
	{	soap_default___ns7__clearAllBreakpoints(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__clearAllBreakpoints(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__clearAllBreakpoints(struct soap *soap, const char *URL, struct __ns7__clearAllBreakpoints *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__clearAllBreakpoints(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__clearAllBreakpoints(struct soap *soap, struct __ns7__clearAllBreakpoints *p)
{
	if (soap_read___ns7__clearAllBreakpoints(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__clearBreakpoints_DEFINED
#define SOAP_TYPE___ns7__clearBreakpoints_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__clearBreakpoints(struct soap*, struct __ns7__clearBreakpoints *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__clearBreakpoints(struct soap*, const struct __ns7__clearBreakpoints *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__clearBreakpoints(struct soap*, const char*, int, const struct __ns7__clearBreakpoints *, const char*);
SOAP_FMAC3 struct __ns7__clearBreakpoints * SOAP_FMAC4 soap_in___ns7__clearBreakpoints(struct soap*, const char*, struct __ns7__clearBreakpoints *, const char*);
SOAP_FMAC1 struct __ns7__clearBreakpoints * SOAP_FMAC2 soap_instantiate___ns7__clearBreakpoints(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__clearBreakpoints * soap_new___ns7__clearBreakpoints(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__clearBreakpoints(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__clearBreakpoints * soap_new_req___ns7__clearBreakpoints(
	struct soap *soap)
{
	struct __ns7__clearBreakpoints *_p = soap_new___ns7__clearBreakpoints(soap);
	if (_p)
	{	soap_default___ns7__clearBreakpoints(soap, _p);
	}
	return _p;
}

inline struct __ns7__clearBreakpoints * soap_new_set___ns7__clearBreakpoints(
	struct soap *soap,
	_ns7__clearBreakpoints *ns7__clearBreakpoints)
{
	struct __ns7__clearBreakpoints *_p = soap_new___ns7__clearBreakpoints(soap);
	if (_p)
	{	soap_default___ns7__clearBreakpoints(soap, _p);
		_p->ns7__clearBreakpoints = ns7__clearBreakpoints;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__clearBreakpoints(struct soap*, const struct __ns7__clearBreakpoints *, const char*, const char*);

inline int soap_write___ns7__clearBreakpoints(struct soap *soap, struct __ns7__clearBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__clearBreakpoints(soap, p), 0) || soap_put___ns7__clearBreakpoints(soap, p, "-ns7:clearBreakpoints", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__clearBreakpoints(struct soap *soap, const char *URL, struct __ns7__clearBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__clearBreakpoints(soap, p), 0) || soap_put___ns7__clearBreakpoints(soap, p, "-ns7:clearBreakpoints", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__clearBreakpoints(struct soap *soap, const char *URL, struct __ns7__clearBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__clearBreakpoints(soap, p), 0) || soap_put___ns7__clearBreakpoints(soap, p, "-ns7:clearBreakpoints", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__clearBreakpoints * SOAP_FMAC4 soap_get___ns7__clearBreakpoints(struct soap*, struct __ns7__clearBreakpoints *, const char*, const char*);

inline int soap_read___ns7__clearBreakpoints(struct soap *soap, struct __ns7__clearBreakpoints *p)
{
	if (p)
	{	soap_default___ns7__clearBreakpoints(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__clearBreakpoints(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__clearBreakpoints(struct soap *soap, const char *URL, struct __ns7__clearBreakpoints *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__clearBreakpoints(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__clearBreakpoints(struct soap *soap, struct __ns7__clearBreakpoints *p)
{
	if (soap_read___ns7__clearBreakpoints(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__getBreakpoints_DEFINED
#define SOAP_TYPE___ns7__getBreakpoints_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__getBreakpoints(struct soap*, struct __ns7__getBreakpoints *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__getBreakpoints(struct soap*, const struct __ns7__getBreakpoints *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__getBreakpoints(struct soap*, const char*, int, const struct __ns7__getBreakpoints *, const char*);
SOAP_FMAC3 struct __ns7__getBreakpoints * SOAP_FMAC4 soap_in___ns7__getBreakpoints(struct soap*, const char*, struct __ns7__getBreakpoints *, const char*);
SOAP_FMAC1 struct __ns7__getBreakpoints * SOAP_FMAC2 soap_instantiate___ns7__getBreakpoints(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__getBreakpoints * soap_new___ns7__getBreakpoints(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__getBreakpoints(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__getBreakpoints * soap_new_req___ns7__getBreakpoints(
	struct soap *soap)
{
	struct __ns7__getBreakpoints *_p = soap_new___ns7__getBreakpoints(soap);
	if (_p)
	{	soap_default___ns7__getBreakpoints(soap, _p);
	}
	return _p;
}

inline struct __ns7__getBreakpoints * soap_new_set___ns7__getBreakpoints(
	struct soap *soap,
	_ns7__getBreakpoints *ns7__getBreakpoints)
{
	struct __ns7__getBreakpoints *_p = soap_new___ns7__getBreakpoints(soap);
	if (_p)
	{	soap_default___ns7__getBreakpoints(soap, _p);
		_p->ns7__getBreakpoints = ns7__getBreakpoints;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__getBreakpoints(struct soap*, const struct __ns7__getBreakpoints *, const char*, const char*);

inline int soap_write___ns7__getBreakpoints(struct soap *soap, struct __ns7__getBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__getBreakpoints(soap, p), 0) || soap_put___ns7__getBreakpoints(soap, p, "-ns7:getBreakpoints", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__getBreakpoints(struct soap *soap, const char *URL, struct __ns7__getBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__getBreakpoints(soap, p), 0) || soap_put___ns7__getBreakpoints(soap, p, "-ns7:getBreakpoints", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__getBreakpoints(struct soap *soap, const char *URL, struct __ns7__getBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__getBreakpoints(soap, p), 0) || soap_put___ns7__getBreakpoints(soap, p, "-ns7:getBreakpoints", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__getBreakpoints * SOAP_FMAC4 soap_get___ns7__getBreakpoints(struct soap*, struct __ns7__getBreakpoints *, const char*, const char*);

inline int soap_read___ns7__getBreakpoints(struct soap *soap, struct __ns7__getBreakpoints *p)
{
	if (p)
	{	soap_default___ns7__getBreakpoints(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__getBreakpoints(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__getBreakpoints(struct soap *soap, const char *URL, struct __ns7__getBreakpoints *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__getBreakpoints(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__getBreakpoints(struct soap *soap, struct __ns7__getBreakpoints *p)
{
	if (soap_read___ns7__getBreakpoints(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns7__setBreakpoints_DEFINED
#define SOAP_TYPE___ns7__setBreakpoints_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns7__setBreakpoints(struct soap*, struct __ns7__setBreakpoints *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns7__setBreakpoints(struct soap*, const struct __ns7__setBreakpoints *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns7__setBreakpoints(struct soap*, const char*, int, const struct __ns7__setBreakpoints *, const char*);
SOAP_FMAC3 struct __ns7__setBreakpoints * SOAP_FMAC4 soap_in___ns7__setBreakpoints(struct soap*, const char*, struct __ns7__setBreakpoints *, const char*);
SOAP_FMAC1 struct __ns7__setBreakpoints * SOAP_FMAC2 soap_instantiate___ns7__setBreakpoints(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns7__setBreakpoints * soap_new___ns7__setBreakpoints(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns7__setBreakpoints(soap, n, NULL, NULL, NULL);
}

inline struct __ns7__setBreakpoints * soap_new_req___ns7__setBreakpoints(
	struct soap *soap)
{
	struct __ns7__setBreakpoints *_p = soap_new___ns7__setBreakpoints(soap);
	if (_p)
	{	soap_default___ns7__setBreakpoints(soap, _p);
	}
	return _p;
}

inline struct __ns7__setBreakpoints * soap_new_set___ns7__setBreakpoints(
	struct soap *soap,
	_ns7__setBreakpoints *ns7__setBreakpoints)
{
	struct __ns7__setBreakpoints *_p = soap_new___ns7__setBreakpoints(soap);
	if (_p)
	{	soap_default___ns7__setBreakpoints(soap, _p);
		_p->ns7__setBreakpoints = ns7__setBreakpoints;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns7__setBreakpoints(struct soap*, const struct __ns7__setBreakpoints *, const char*, const char*);

inline int soap_write___ns7__setBreakpoints(struct soap *soap, struct __ns7__setBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns7__setBreakpoints(soap, p), 0) || soap_put___ns7__setBreakpoints(soap, p, "-ns7:setBreakpoints", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns7__setBreakpoints(struct soap *soap, const char *URL, struct __ns7__setBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__setBreakpoints(soap, p), 0) || soap_put___ns7__setBreakpoints(soap, p, "-ns7:setBreakpoints", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns7__setBreakpoints(struct soap *soap, const char *URL, struct __ns7__setBreakpoints const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns7__setBreakpoints(soap, p), 0) || soap_put___ns7__setBreakpoints(soap, p, "-ns7:setBreakpoints", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns7__setBreakpoints * SOAP_FMAC4 soap_get___ns7__setBreakpoints(struct soap*, struct __ns7__setBreakpoints *, const char*, const char*);

inline int soap_read___ns7__setBreakpoints(struct soap *soap, struct __ns7__setBreakpoints *p)
{
	if (p)
	{	soap_default___ns7__setBreakpoints(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns7__setBreakpoints(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns7__setBreakpoints(struct soap *soap, const char *URL, struct __ns7__setBreakpoints *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns7__setBreakpoints(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns7__setBreakpoints(struct soap *soap, struct __ns7__setBreakpoints *p)
{
	if (soap_read___ns7__setBreakpoints(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__setRobotJointPos_DEFINED
#define SOAP_TYPE___ns1__setRobotJointPos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setRobotJointPos(struct soap*, struct __ns1__setRobotJointPos *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setRobotJointPos(struct soap*, const struct __ns1__setRobotJointPos *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setRobotJointPos(struct soap*, const char*, int, const struct __ns1__setRobotJointPos *, const char*);
SOAP_FMAC3 struct __ns1__setRobotJointPos * SOAP_FMAC4 soap_in___ns1__setRobotJointPos(struct soap*, const char*, struct __ns1__setRobotJointPos *, const char*);
SOAP_FMAC1 struct __ns1__setRobotJointPos * SOAP_FMAC2 soap_instantiate___ns1__setRobotJointPos(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setRobotJointPos * soap_new___ns1__setRobotJointPos(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__setRobotJointPos(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__setRobotJointPos * soap_new_req___ns1__setRobotJointPos(
	struct soap *soap)
{
	struct __ns1__setRobotJointPos *_p = soap_new___ns1__setRobotJointPos(soap);
	if (_p)
	{	soap_default___ns1__setRobotJointPos(soap, _p);
	}
	return _p;
}

inline struct __ns1__setRobotJointPos * soap_new_set___ns1__setRobotJointPos(
	struct soap *soap,
	_ns1__setRobotJointPos *ns1__setRobotJointPos)
{
	struct __ns1__setRobotJointPos *_p = soap_new___ns1__setRobotJointPos(soap);
	if (_p)
	{	soap_default___ns1__setRobotJointPos(soap, _p);
		_p->ns1__setRobotJointPos = ns1__setRobotJointPos;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setRobotJointPos(struct soap*, const struct __ns1__setRobotJointPos *, const char*, const char*);

inline int soap_write___ns1__setRobotJointPos(struct soap *soap, struct __ns1__setRobotJointPos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__setRobotJointPos(soap, p), 0) || soap_put___ns1__setRobotJointPos(soap, p, "-ns1:setRobotJointPos", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__setRobotJointPos(struct soap *soap, const char *URL, struct __ns1__setRobotJointPos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__setRobotJointPos(soap, p), 0) || soap_put___ns1__setRobotJointPos(soap, p, "-ns1:setRobotJointPos", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__setRobotJointPos(struct soap *soap, const char *URL, struct __ns1__setRobotJointPos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__setRobotJointPos(soap, p), 0) || soap_put___ns1__setRobotJointPos(soap, p, "-ns1:setRobotJointPos", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__setRobotJointPos * SOAP_FMAC4 soap_get___ns1__setRobotJointPos(struct soap*, struct __ns1__setRobotJointPos *, const char*, const char*);

inline int soap_read___ns1__setRobotJointPos(struct soap *soap, struct __ns1__setRobotJointPos *p)
{
	if (p)
	{	soap_default___ns1__setRobotJointPos(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__setRobotJointPos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__setRobotJointPos(struct soap *soap, const char *URL, struct __ns1__setRobotJointPos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__setRobotJointPos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__setRobotJointPos(struct soap *soap, struct __ns1__setRobotJointPos *p)
{
	if (soap_read___ns1__setRobotJointPos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getRobotJntCartPos_DEFINED
#define SOAP_TYPE___ns1__getRobotJntCartPos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getRobotJntCartPos(struct soap*, struct __ns1__getRobotJntCartPos *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getRobotJntCartPos(struct soap*, const struct __ns1__getRobotJntCartPos *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getRobotJntCartPos(struct soap*, const char*, int, const struct __ns1__getRobotJntCartPos *, const char*);
SOAP_FMAC3 struct __ns1__getRobotJntCartPos * SOAP_FMAC4 soap_in___ns1__getRobotJntCartPos(struct soap*, const char*, struct __ns1__getRobotJntCartPos *, const char*);
SOAP_FMAC1 struct __ns1__getRobotJntCartPos * SOAP_FMAC2 soap_instantiate___ns1__getRobotJntCartPos(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getRobotJntCartPos * soap_new___ns1__getRobotJntCartPos(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getRobotJntCartPos(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getRobotJntCartPos * soap_new_req___ns1__getRobotJntCartPos(
	struct soap *soap)
{
	struct __ns1__getRobotJntCartPos *_p = soap_new___ns1__getRobotJntCartPos(soap);
	if (_p)
	{	soap_default___ns1__getRobotJntCartPos(soap, _p);
	}
	return _p;
}

inline struct __ns1__getRobotJntCartPos * soap_new_set___ns1__getRobotJntCartPos(
	struct soap *soap,
	_ns1__getRobotJntCartPos *ns1__getRobotJntCartPos)
{
	struct __ns1__getRobotJntCartPos *_p = soap_new___ns1__getRobotJntCartPos(soap);
	if (_p)
	{	soap_default___ns1__getRobotJntCartPos(soap, _p);
		_p->ns1__getRobotJntCartPos = ns1__getRobotJntCartPos;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getRobotJntCartPos(struct soap*, const struct __ns1__getRobotJntCartPos *, const char*, const char*);

inline int soap_write___ns1__getRobotJntCartPos(struct soap *soap, struct __ns1__getRobotJntCartPos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getRobotJntCartPos(soap, p), 0) || soap_put___ns1__getRobotJntCartPos(soap, p, "-ns1:getRobotJntCartPos", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getRobotJntCartPos(struct soap *soap, const char *URL, struct __ns1__getRobotJntCartPos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getRobotJntCartPos(soap, p), 0) || soap_put___ns1__getRobotJntCartPos(soap, p, "-ns1:getRobotJntCartPos", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getRobotJntCartPos(struct soap *soap, const char *URL, struct __ns1__getRobotJntCartPos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getRobotJntCartPos(soap, p), 0) || soap_put___ns1__getRobotJntCartPos(soap, p, "-ns1:getRobotJntCartPos", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getRobotJntCartPos * SOAP_FMAC4 soap_get___ns1__getRobotJntCartPos(struct soap*, struct __ns1__getRobotJntCartPos *, const char*, const char*);

inline int soap_read___ns1__getRobotJntCartPos(struct soap *soap, struct __ns1__getRobotJntCartPos *p)
{
	if (p)
	{	soap_default___ns1__getRobotJntCartPos(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getRobotJntCartPos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getRobotJntCartPos(struct soap *soap, const char *URL, struct __ns1__getRobotJntCartPos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getRobotJntCartPos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getRobotJntCartPos(struct soap *soap, struct __ns1__getRobotJntCartPos *p)
{
	if (soap_read___ns1__getRobotJntCartPos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getRobotJointPos_DEFINED
#define SOAP_TYPE___ns1__getRobotJointPos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getRobotJointPos(struct soap*, struct __ns1__getRobotJointPos *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getRobotJointPos(struct soap*, const struct __ns1__getRobotJointPos *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getRobotJointPos(struct soap*, const char*, int, const struct __ns1__getRobotJointPos *, const char*);
SOAP_FMAC3 struct __ns1__getRobotJointPos * SOAP_FMAC4 soap_in___ns1__getRobotJointPos(struct soap*, const char*, struct __ns1__getRobotJointPos *, const char*);
SOAP_FMAC1 struct __ns1__getRobotJointPos * SOAP_FMAC2 soap_instantiate___ns1__getRobotJointPos(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getRobotJointPos * soap_new___ns1__getRobotJointPos(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getRobotJointPos(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getRobotJointPos * soap_new_req___ns1__getRobotJointPos(
	struct soap *soap)
{
	struct __ns1__getRobotJointPos *_p = soap_new___ns1__getRobotJointPos(soap);
	if (_p)
	{	soap_default___ns1__getRobotJointPos(soap, _p);
	}
	return _p;
}

inline struct __ns1__getRobotJointPos * soap_new_set___ns1__getRobotJointPos(
	struct soap *soap,
	_ns1__getRobotJointPos *ns1__getRobotJointPos)
{
	struct __ns1__getRobotJointPos *_p = soap_new___ns1__getRobotJointPos(soap);
	if (_p)
	{	soap_default___ns1__getRobotJointPos(soap, _p);
		_p->ns1__getRobotJointPos = ns1__getRobotJointPos;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getRobotJointPos(struct soap*, const struct __ns1__getRobotJointPos *, const char*, const char*);

inline int soap_write___ns1__getRobotJointPos(struct soap *soap, struct __ns1__getRobotJointPos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getRobotJointPos(soap, p), 0) || soap_put___ns1__getRobotJointPos(soap, p, "-ns1:getRobotJointPos", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getRobotJointPos(struct soap *soap, const char *URL, struct __ns1__getRobotJointPos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getRobotJointPos(soap, p), 0) || soap_put___ns1__getRobotJointPos(soap, p, "-ns1:getRobotJointPos", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getRobotJointPos(struct soap *soap, const char *URL, struct __ns1__getRobotJointPos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getRobotJointPos(soap, p), 0) || soap_put___ns1__getRobotJointPos(soap, p, "-ns1:getRobotJointPos", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getRobotJointPos * SOAP_FMAC4 soap_get___ns1__getRobotJointPos(struct soap*, struct __ns1__getRobotJointPos *, const char*, const char*);

inline int soap_read___ns1__getRobotJointPos(struct soap *soap, struct __ns1__getRobotJointPos *p)
{
	if (p)
	{	soap_default___ns1__getRobotJointPos(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getRobotJointPos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getRobotJointPos(struct soap *soap, const char *URL, struct __ns1__getRobotJointPos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getRobotJointPos(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getRobotJointPos(struct soap *soap, struct __ns1__getRobotJointPos *p)
{
	if (soap_read___ns1__getRobotJointPos(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getRobots_DEFINED
#define SOAP_TYPE___ns1__getRobots_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getRobots(struct soap*, struct __ns1__getRobots *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getRobots(struct soap*, const struct __ns1__getRobots *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getRobots(struct soap*, const char*, int, const struct __ns1__getRobots *, const char*);
SOAP_FMAC3 struct __ns1__getRobots * SOAP_FMAC4 soap_in___ns1__getRobots(struct soap*, const char*, struct __ns1__getRobots *, const char*);
SOAP_FMAC1 struct __ns1__getRobots * SOAP_FMAC2 soap_instantiate___ns1__getRobots(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getRobots * soap_new___ns1__getRobots(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getRobots(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getRobots * soap_new_req___ns1__getRobots(
	struct soap *soap)
{
	struct __ns1__getRobots *_p = soap_new___ns1__getRobots(soap);
	if (_p)
	{	soap_default___ns1__getRobots(soap, _p);
	}
	return _p;
}

inline struct __ns1__getRobots * soap_new_set___ns1__getRobots(
	struct soap *soap,
	_ns1__getRobots *ns1__getRobots)
{
	struct __ns1__getRobots *_p = soap_new___ns1__getRobots(soap);
	if (_p)
	{	soap_default___ns1__getRobots(soap, _p);
		_p->ns1__getRobots = ns1__getRobots;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getRobots(struct soap*, const struct __ns1__getRobots *, const char*, const char*);

inline int soap_write___ns1__getRobots(struct soap *soap, struct __ns1__getRobots const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getRobots(soap, p), 0) || soap_put___ns1__getRobots(soap, p, "-ns1:getRobots", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getRobots(struct soap *soap, const char *URL, struct __ns1__getRobots const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getRobots(soap, p), 0) || soap_put___ns1__getRobots(soap, p, "-ns1:getRobots", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getRobots(struct soap *soap, const char *URL, struct __ns1__getRobots const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getRobots(soap, p), 0) || soap_put___ns1__getRobots(soap, p, "-ns1:getRobots", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getRobots * SOAP_FMAC4 soap_get___ns1__getRobots(struct soap*, struct __ns1__getRobots *, const char*, const char*);

inline int soap_read___ns1__getRobots(struct soap *soap, struct __ns1__getRobots *p)
{
	if (p)
	{	soap_default___ns1__getRobots(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getRobots(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getRobots(struct soap *soap, const char *URL, struct __ns1__getRobots *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getRobots(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getRobots(struct soap *soap, struct __ns1__getRobots *p)
{
	if (soap_read___ns1__getRobots(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__logout_DEFINED
#define SOAP_TYPE___ns1__logout_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__logout(struct soap*, struct __ns1__logout *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__logout(struct soap*, const struct __ns1__logout *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__logout(struct soap*, const char*, int, const struct __ns1__logout *, const char*);
SOAP_FMAC3 struct __ns1__logout * SOAP_FMAC4 soap_in___ns1__logout(struct soap*, const char*, struct __ns1__logout *, const char*);
SOAP_FMAC1 struct __ns1__logout * SOAP_FMAC2 soap_instantiate___ns1__logout(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__logout * soap_new___ns1__logout(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__logout(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__logout * soap_new_req___ns1__logout(
	struct soap *soap)
{
	struct __ns1__logout *_p = soap_new___ns1__logout(soap);
	if (_p)
	{	soap_default___ns1__logout(soap, _p);
	}
	return _p;
}

inline struct __ns1__logout * soap_new_set___ns1__logout(
	struct soap *soap,
	_ns1__logout *ns1__logout)
{
	struct __ns1__logout *_p = soap_new___ns1__logout(soap);
	if (_p)
	{	soap_default___ns1__logout(soap, _p);
		_p->ns1__logout = ns1__logout;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__logout(struct soap*, const struct __ns1__logout *, const char*, const char*);

inline int soap_write___ns1__logout(struct soap *soap, struct __ns1__logout const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__logout(soap, p), 0) || soap_put___ns1__logout(soap, p, "-ns1:logout", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__logout(struct soap *soap, const char *URL, struct __ns1__logout const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__logout(soap, p), 0) || soap_put___ns1__logout(soap, p, "-ns1:logout", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__logout(struct soap *soap, const char *URL, struct __ns1__logout const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__logout(soap, p), 0) || soap_put___ns1__logout(soap, p, "-ns1:logout", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__logout * SOAP_FMAC4 soap_get___ns1__logout(struct soap*, struct __ns1__logout *, const char*, const char*);

inline int soap_read___ns1__logout(struct soap *soap, struct __ns1__logout *p)
{
	if (p)
	{	soap_default___ns1__logout(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__logout(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__logout(struct soap *soap, const char *URL, struct __ns1__logout *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__logout(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__logout(struct soap *soap, struct __ns1__logout *p)
{
	if (soap_read___ns1__logout(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__login_DEFINED
#define SOAP_TYPE___ns1__login_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__login(struct soap*, struct __ns1__login *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__login(struct soap*, const struct __ns1__login *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__login(struct soap*, const char*, int, const struct __ns1__login *, const char*);
SOAP_FMAC3 struct __ns1__login * SOAP_FMAC4 soap_in___ns1__login(struct soap*, const char*, struct __ns1__login *, const char*);
SOAP_FMAC1 struct __ns1__login * SOAP_FMAC2 soap_instantiate___ns1__login(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__login * soap_new___ns1__login(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__login(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__login * soap_new_req___ns1__login(
	struct soap *soap)
{
	struct __ns1__login *_p = soap_new___ns1__login(soap);
	if (_p)
	{	soap_default___ns1__login(soap, _p);
	}
	return _p;
}

inline struct __ns1__login * soap_new_set___ns1__login(
	struct soap *soap,
	_ns1__login *ns1__login)
{
	struct __ns1__login *_p = soap_new___ns1__login(soap);
	if (_p)
	{	soap_default___ns1__login(soap, _p);
		_p->ns1__login = ns1__login;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__login(struct soap*, const struct __ns1__login *, const char*, const char*);

inline int soap_write___ns1__login(struct soap *soap, struct __ns1__login const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__login(soap, p), 0) || soap_put___ns1__login(soap, p, "-ns1:login", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__login(struct soap *soap, const char *URL, struct __ns1__login const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__login(soap, p), 0) || soap_put___ns1__login(soap, p, "-ns1:login", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__login(struct soap *soap, const char *URL, struct __ns1__login const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__login(soap, p), 0) || soap_put___ns1__login(soap, p, "-ns1:login", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__login * SOAP_FMAC4 soap_get___ns1__login(struct soap*, struct __ns1__login *, const char*, const char*);

inline int soap_read___ns1__login(struct soap *soap, struct __ns1__login *p)
{
	if (p)
	{	soap_default___ns1__login(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__login(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__login(struct soap *soap, const char *URL, struct __ns1__login *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__login(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__login(struct soap *soap, struct __ns1__login *p)
{
	if (soap_read___ns1__login(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getCS8Compatibility_DEFINED
#define SOAP_TYPE___ns1__getCS8Compatibility_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getCS8Compatibility(struct soap*, struct __ns1__getCS8Compatibility *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getCS8Compatibility(struct soap*, const struct __ns1__getCS8Compatibility *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getCS8Compatibility(struct soap*, const char*, int, const struct __ns1__getCS8Compatibility *, const char*);
SOAP_FMAC3 struct __ns1__getCS8Compatibility * SOAP_FMAC4 soap_in___ns1__getCS8Compatibility(struct soap*, const char*, struct __ns1__getCS8Compatibility *, const char*);
SOAP_FMAC1 struct __ns1__getCS8Compatibility * SOAP_FMAC2 soap_instantiate___ns1__getCS8Compatibility(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getCS8Compatibility * soap_new___ns1__getCS8Compatibility(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getCS8Compatibility(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getCS8Compatibility * soap_new_req___ns1__getCS8Compatibility(
	struct soap *soap)
{
	struct __ns1__getCS8Compatibility *_p = soap_new___ns1__getCS8Compatibility(soap);
	if (_p)
	{	soap_default___ns1__getCS8Compatibility(soap, _p);
	}
	return _p;
}

inline struct __ns1__getCS8Compatibility * soap_new_set___ns1__getCS8Compatibility(
	struct soap *soap,
	_ns1__getCS8Compatibility *ns1__getCS8Compatibility)
{
	struct __ns1__getCS8Compatibility *_p = soap_new___ns1__getCS8Compatibility(soap);
	if (_p)
	{	soap_default___ns1__getCS8Compatibility(soap, _p);
		_p->ns1__getCS8Compatibility = ns1__getCS8Compatibility;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getCS8Compatibility(struct soap*, const struct __ns1__getCS8Compatibility *, const char*, const char*);

inline int soap_write___ns1__getCS8Compatibility(struct soap *soap, struct __ns1__getCS8Compatibility const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getCS8Compatibility(soap, p), 0) || soap_put___ns1__getCS8Compatibility(soap, p, "-ns1:getCS8Compatibility", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getCS8Compatibility(struct soap *soap, const char *URL, struct __ns1__getCS8Compatibility const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getCS8Compatibility(soap, p), 0) || soap_put___ns1__getCS8Compatibility(soap, p, "-ns1:getCS8Compatibility", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getCS8Compatibility(struct soap *soap, const char *URL, struct __ns1__getCS8Compatibility const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getCS8Compatibility(soap, p), 0) || soap_put___ns1__getCS8Compatibility(soap, p, "-ns1:getCS8Compatibility", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getCS8Compatibility * SOAP_FMAC4 soap_get___ns1__getCS8Compatibility(struct soap*, struct __ns1__getCS8Compatibility *, const char*, const char*);

inline int soap_read___ns1__getCS8Compatibility(struct soap *soap, struct __ns1__getCS8Compatibility *p)
{
	if (p)
	{	soap_default___ns1__getCS8Compatibility(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getCS8Compatibility(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getCS8Compatibility(struct soap *soap, const char *URL, struct __ns1__getCS8Compatibility *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getCS8Compatibility(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getCS8Compatibility(struct soap *soap, struct __ns1__getCS8Compatibility *p)
{
	if (soap_read___ns1__getCS8Compatibility(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getControllerParameters_DEFINED
#define SOAP_TYPE___ns1__getControllerParameters_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getControllerParameters(struct soap*, struct __ns1__getControllerParameters *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getControllerParameters(struct soap*, const struct __ns1__getControllerParameters *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getControllerParameters(struct soap*, const char*, int, const struct __ns1__getControllerParameters *, const char*);
SOAP_FMAC3 struct __ns1__getControllerParameters * SOAP_FMAC4 soap_in___ns1__getControllerParameters(struct soap*, const char*, struct __ns1__getControllerParameters *, const char*);
SOAP_FMAC1 struct __ns1__getControllerParameters * SOAP_FMAC2 soap_instantiate___ns1__getControllerParameters(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getControllerParameters * soap_new___ns1__getControllerParameters(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getControllerParameters(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getControllerParameters * soap_new_req___ns1__getControllerParameters(
	struct soap *soap)
{
	struct __ns1__getControllerParameters *_p = soap_new___ns1__getControllerParameters(soap);
	if (_p)
	{	soap_default___ns1__getControllerParameters(soap, _p);
	}
	return _p;
}

inline struct __ns1__getControllerParameters * soap_new_set___ns1__getControllerParameters(
	struct soap *soap,
	_ns1__getControllerParameters *ns1__getControllerParameters)
{
	struct __ns1__getControllerParameters *_p = soap_new___ns1__getControllerParameters(soap);
	if (_p)
	{	soap_default___ns1__getControllerParameters(soap, _p);
		_p->ns1__getControllerParameters = ns1__getControllerParameters;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getControllerParameters(struct soap*, const struct __ns1__getControllerParameters *, const char*, const char*);

inline int soap_write___ns1__getControllerParameters(struct soap *soap, struct __ns1__getControllerParameters const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getControllerParameters(soap, p), 0) || soap_put___ns1__getControllerParameters(soap, p, "-ns1:getControllerParameters", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getControllerParameters(struct soap *soap, const char *URL, struct __ns1__getControllerParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getControllerParameters(soap, p), 0) || soap_put___ns1__getControllerParameters(soap, p, "-ns1:getControllerParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getControllerParameters(struct soap *soap, const char *URL, struct __ns1__getControllerParameters const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getControllerParameters(soap, p), 0) || soap_put___ns1__getControllerParameters(soap, p, "-ns1:getControllerParameters", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getControllerParameters * SOAP_FMAC4 soap_get___ns1__getControllerParameters(struct soap*, struct __ns1__getControllerParameters *, const char*, const char*);

inline int soap_read___ns1__getControllerParameters(struct soap *soap, struct __ns1__getControllerParameters *p)
{
	if (p)
	{	soap_default___ns1__getControllerParameters(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getControllerParameters(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getControllerParameters(struct soap *soap, const char *URL, struct __ns1__getControllerParameters *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getControllerParameters(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getControllerParameters(struct soap *soap, struct __ns1__getControllerParameters *p)
{
	if (soap_read___ns1__getControllerParameters(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getCS8Versions_DEFINED
#define SOAP_TYPE___ns1__getCS8Versions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getCS8Versions(struct soap*, struct __ns1__getCS8Versions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getCS8Versions(struct soap*, const struct __ns1__getCS8Versions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getCS8Versions(struct soap*, const char*, int, const struct __ns1__getCS8Versions *, const char*);
SOAP_FMAC3 struct __ns1__getCS8Versions * SOAP_FMAC4 soap_in___ns1__getCS8Versions(struct soap*, const char*, struct __ns1__getCS8Versions *, const char*);
SOAP_FMAC1 struct __ns1__getCS8Versions * SOAP_FMAC2 soap_instantiate___ns1__getCS8Versions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getCS8Versions * soap_new___ns1__getCS8Versions(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getCS8Versions(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getCS8Versions * soap_new_req___ns1__getCS8Versions(
	struct soap *soap)
{
	struct __ns1__getCS8Versions *_p = soap_new___ns1__getCS8Versions(soap);
	if (_p)
	{	soap_default___ns1__getCS8Versions(soap, _p);
	}
	return _p;
}

inline struct __ns1__getCS8Versions * soap_new_set___ns1__getCS8Versions(
	struct soap *soap,
	_ns1__getCS8Versions *ns1__getCS8Versions)
{
	struct __ns1__getCS8Versions *_p = soap_new___ns1__getCS8Versions(soap);
	if (_p)
	{	soap_default___ns1__getCS8Versions(soap, _p);
		_p->ns1__getCS8Versions = ns1__getCS8Versions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getCS8Versions(struct soap*, const struct __ns1__getCS8Versions *, const char*, const char*);

inline int soap_write___ns1__getCS8Versions(struct soap *soap, struct __ns1__getCS8Versions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getCS8Versions(soap, p), 0) || soap_put___ns1__getCS8Versions(soap, p, "-ns1:getCS8Versions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getCS8Versions(struct soap *soap, const char *URL, struct __ns1__getCS8Versions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getCS8Versions(soap, p), 0) || soap_put___ns1__getCS8Versions(soap, p, "-ns1:getCS8Versions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getCS8Versions(struct soap *soap, const char *URL, struct __ns1__getCS8Versions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getCS8Versions(soap, p), 0) || soap_put___ns1__getCS8Versions(soap, p, "-ns1:getCS8Versions", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getCS8Versions * SOAP_FMAC4 soap_get___ns1__getCS8Versions(struct soap*, struct __ns1__getCS8Versions *, const char*, const char*);

inline int soap_read___ns1__getCS8Versions(struct soap *soap, struct __ns1__getCS8Versions *p)
{
	if (p)
	{	soap_default___ns1__getCS8Versions(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getCS8Versions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getCS8Versions(struct soap *soap, const char *URL, struct __ns1__getCS8Versions *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getCS8Versions(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getCS8Versions(struct soap *soap, struct __ns1__getCS8Versions *p)
{
	if (soap_read___ns1__getCS8Versions(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ping_DEFINED
#define SOAP_TYPE___ns1__ping_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ping(struct soap*, struct __ns1__ping *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ping(struct soap*, const struct __ns1__ping *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ping(struct soap*, const char*, int, const struct __ns1__ping *, const char*);
SOAP_FMAC3 struct __ns1__ping * SOAP_FMAC4 soap_in___ns1__ping(struct soap*, const char*, struct __ns1__ping *, const char*);
SOAP_FMAC1 struct __ns1__ping * SOAP_FMAC2 soap_instantiate___ns1__ping(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ping * soap_new___ns1__ping(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ping(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ping * soap_new_req___ns1__ping(
	struct soap *soap)
{
	struct __ns1__ping *_p = soap_new___ns1__ping(soap);
	if (_p)
	{	soap_default___ns1__ping(soap, _p);
	}
	return _p;
}

inline struct __ns1__ping * soap_new_set___ns1__ping(
	struct soap *soap,
	_ns1__ping *ns1__ping)
{
	struct __ns1__ping *_p = soap_new___ns1__ping(soap);
	if (_p)
	{	soap_default___ns1__ping(soap, _p);
		_p->ns1__ping = ns1__ping;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ping(struct soap*, const struct __ns1__ping *, const char*, const char*);

inline int soap_write___ns1__ping(struct soap *soap, struct __ns1__ping const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ping(soap, p), 0) || soap_put___ns1__ping(soap, p, "-ns1:ping", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ping(struct soap *soap, const char *URL, struct __ns1__ping const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ping(soap, p), 0) || soap_put___ns1__ping(soap, p, "-ns1:ping", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ping(struct soap *soap, const char *URL, struct __ns1__ping const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ping(soap, p), 0) || soap_put___ns1__ping(soap, p, "-ns1:ping", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ping * SOAP_FMAC4 soap_get___ns1__ping(struct soap*, struct __ns1__ping *, const char*, const char*);

inline int soap_read___ns1__ping(struct soap *soap, struct __ns1__ping *p)
{
	if (p)
	{	soap_default___ns1__ping(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ping(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ping(struct soap *soap, const char *URL, struct __ns1__ping *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ping(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ping(struct soap *soap, struct __ns1__ping *p)
{
	if (soap_read___ns1__ping(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__findServer_DEFINED
#define SOAP_TYPE___ns1__findServer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__findServer(struct soap*, struct __ns1__findServer *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__findServer(struct soap*, const struct __ns1__findServer *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__findServer(struct soap*, const char*, int, const struct __ns1__findServer *, const char*);
SOAP_FMAC3 struct __ns1__findServer * SOAP_FMAC4 soap_in___ns1__findServer(struct soap*, const char*, struct __ns1__findServer *, const char*);
SOAP_FMAC1 struct __ns1__findServer * SOAP_FMAC2 soap_instantiate___ns1__findServer(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__findServer * soap_new___ns1__findServer(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__findServer(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__findServer * soap_new_req___ns1__findServer(
	struct soap *soap)
{
	struct __ns1__findServer *_p = soap_new___ns1__findServer(soap);
	if (_p)
	{	soap_default___ns1__findServer(soap, _p);
	}
	return _p;
}

inline struct __ns1__findServer * soap_new_set___ns1__findServer(
	struct soap *soap,
	_ns1__findServer *ns1__findServer)
{
	struct __ns1__findServer *_p = soap_new___ns1__findServer(soap);
	if (_p)
	{	soap_default___ns1__findServer(soap, _p);
		_p->ns1__findServer = ns1__findServer;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__findServer(struct soap*, const struct __ns1__findServer *, const char*, const char*);

inline int soap_write___ns1__findServer(struct soap *soap, struct __ns1__findServer const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__findServer(soap, p), 0) || soap_put___ns1__findServer(soap, p, "-ns1:findServer", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__findServer(struct soap *soap, const char *URL, struct __ns1__findServer const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__findServer(soap, p), 0) || soap_put___ns1__findServer(soap, p, "-ns1:findServer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__findServer(struct soap *soap, const char *URL, struct __ns1__findServer const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__findServer(soap, p), 0) || soap_put___ns1__findServer(soap, p, "-ns1:findServer", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__findServer * SOAP_FMAC4 soap_get___ns1__findServer(struct soap*, struct __ns1__findServer *, const char*, const char*);

inline int soap_read___ns1__findServer(struct soap *soap, struct __ns1__findServer *p)
{
	if (p)
	{	soap_default___ns1__findServer(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__findServer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__findServer(struct soap *soap, const char *URL, struct __ns1__findServer *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__findServer(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__findServer(struct soap *soap, struct __ns1__findServer *p)
{
	if (soap_read___ns1__findServer(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getSoapServerVersion_DEFINED
#define SOAP_TYPE___ns1__getSoapServerVersion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSoapServerVersion(struct soap*, struct __ns1__getSoapServerVersion *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSoapServerVersion(struct soap*, const struct __ns1__getSoapServerVersion *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSoapServerVersion(struct soap*, const char*, int, const struct __ns1__getSoapServerVersion *, const char*);
SOAP_FMAC3 struct __ns1__getSoapServerVersion * SOAP_FMAC4 soap_in___ns1__getSoapServerVersion(struct soap*, const char*, struct __ns1__getSoapServerVersion *, const char*);
SOAP_FMAC1 struct __ns1__getSoapServerVersion * SOAP_FMAC2 soap_instantiate___ns1__getSoapServerVersion(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getSoapServerVersion * soap_new___ns1__getSoapServerVersion(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getSoapServerVersion(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getSoapServerVersion * soap_new_req___ns1__getSoapServerVersion(
	struct soap *soap)
{
	struct __ns1__getSoapServerVersion *_p = soap_new___ns1__getSoapServerVersion(soap);
	if (_p)
	{	soap_default___ns1__getSoapServerVersion(soap, _p);
	}
	return _p;
}

inline struct __ns1__getSoapServerVersion * soap_new_set___ns1__getSoapServerVersion(
	struct soap *soap,
	_ns1__getSoapServerVersion *ns1__getSoapServerVersion)
{
	struct __ns1__getSoapServerVersion *_p = soap_new___ns1__getSoapServerVersion(soap);
	if (_p)
	{	soap_default___ns1__getSoapServerVersion(soap, _p);
		_p->ns1__getSoapServerVersion = ns1__getSoapServerVersion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSoapServerVersion(struct soap*, const struct __ns1__getSoapServerVersion *, const char*, const char*);

inline int soap_write___ns1__getSoapServerVersion(struct soap *soap, struct __ns1__getSoapServerVersion const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getSoapServerVersion(soap, p), 0) || soap_put___ns1__getSoapServerVersion(soap, p, "-ns1:getSoapServerVersion", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getSoapServerVersion(struct soap *soap, const char *URL, struct __ns1__getSoapServerVersion const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getSoapServerVersion(soap, p), 0) || soap_put___ns1__getSoapServerVersion(soap, p, "-ns1:getSoapServerVersion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getSoapServerVersion(struct soap *soap, const char *URL, struct __ns1__getSoapServerVersion const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getSoapServerVersion(soap, p), 0) || soap_put___ns1__getSoapServerVersion(soap, p, "-ns1:getSoapServerVersion", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getSoapServerVersion * SOAP_FMAC4 soap_get___ns1__getSoapServerVersion(struct soap*, struct __ns1__getSoapServerVersion *, const char*, const char*);

inline int soap_read___ns1__getSoapServerVersion(struct soap *soap, struct __ns1__getSoapServerVersion *p)
{
	if (p)
	{	soap_default___ns1__getSoapServerVersion(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getSoapServerVersion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getSoapServerVersion(struct soap *soap, const char *URL, struct __ns1__getSoapServerVersion *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getSoapServerVersion(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getSoapServerVersion(struct soap *soap, struct __ns1__getSoapServerVersion *p)
{
	if (soap_read___ns1__getSoapServerVersion(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	ns1__ServerException *ns1__ServerException_,
	int __type,
	void *fault,
	char *__any)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->ns1__ServerException_ = ns1__ServerException_;
		_p->__type = __type;
		_p->fault = fault;
		_p->__any = __any;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap,
	int *ns1__sessionId)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
		_p->ns1__sessionId = ns1__sessionId;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE__ns7__union_SoapPhysicalIoAttrib_DEFINED
#define SOAP_TYPE__ns7__union_SoapPhysicalIoAttrib_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns7__union_SoapPhysicalIoAttrib(struct soap*, int, const union _ns7__union_SoapPhysicalIoAttrib *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__union_SoapPhysicalIoAttrib(struct soap*, int, const union _ns7__union_SoapPhysicalIoAttrib *);
SOAP_FMAC3 union _ns7__union_SoapPhysicalIoAttrib * SOAP_FMAC4 soap_in__ns7__union_SoapPhysicalIoAttrib(struct soap*, int*, union _ns7__union_SoapPhysicalIoAttrib *);
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_ns7__getProjectResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__getProjectResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__getProjectResponse(struct soap*, _ns7__getProjectResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__getProjectResponse(struct soap*, const char *, int, _ns7__getProjectResponse *const*, const char *);
SOAP_FMAC3 _ns7__getProjectResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__getProjectResponse(struct soap*, const char*, _ns7__getProjectResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__getProjectResponse(struct soap*, _ns7__getProjectResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__getProjectResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__getProjectResponse(struct soap*, _ns7__getProjectResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__getProject_DEFINED
#define SOAP_TYPE_PointerTo_ns7__getProject_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__getProject(struct soap*, _ns7__getProject *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__getProject(struct soap*, const char *, int, _ns7__getProject *const*, const char *);
SOAP_FMAC3 _ns7__getProject ** SOAP_FMAC4 soap_in_PointerTo_ns7__getProject(struct soap*, const char*, _ns7__getProject **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__getProject(struct soap*, _ns7__getProject *const*, const char*, const char*);
SOAP_FMAC3 _ns7__getProject ** SOAP_FMAC4 soap_get_PointerTo_ns7__getProject(struct soap*, _ns7__getProject **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__SoapRobotDhParameters_DEFINED
#define SOAP_TYPE_PointerTo_ns7__SoapRobotDhParameters_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__SoapRobotDhParameters(struct soap*, _ns7__SoapRobotDhParameters *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__SoapRobotDhParameters(struct soap*, const char *, int, _ns7__SoapRobotDhParameters *const*, const char *);
SOAP_FMAC3 _ns7__SoapRobotDhParameters ** SOAP_FMAC4 soap_in_PointerTo_ns7__SoapRobotDhParameters(struct soap*, const char*, _ns7__SoapRobotDhParameters **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__SoapRobotDhParameters(struct soap*, _ns7__SoapRobotDhParameters *const*, const char*, const char*);
SOAP_FMAC3 _ns7__SoapRobotDhParameters ** SOAP_FMAC4 soap_get_PointerTo_ns7__SoapRobotDhParameters(struct soap*, _ns7__SoapRobotDhParameters **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__getRobotDhParameters_DEFINED
#define SOAP_TYPE_PointerTo_ns7__getRobotDhParameters_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__getRobotDhParameters(struct soap*, _ns7__getRobotDhParameters *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__getRobotDhParameters(struct soap*, const char *, int, _ns7__getRobotDhParameters *const*, const char *);
SOAP_FMAC3 _ns7__getRobotDhParameters ** SOAP_FMAC4 soap_in_PointerTo_ns7__getRobotDhParameters(struct soap*, const char*, _ns7__getRobotDhParameters **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__getRobotDhParameters(struct soap*, _ns7__getRobotDhParameters *const*, const char*, const char*);
SOAP_FMAC3 _ns7__getRobotDhParameters ** SOAP_FMAC4 soap_get_PointerTo_ns7__getRobotDhParameters(struct soap*, _ns7__getRobotDhParameters **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__getAllPhysicalIosResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__getAllPhysicalIosResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__getAllPhysicalIosResponse(struct soap*, _ns7__getAllPhysicalIosResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__getAllPhysicalIosResponse(struct soap*, const char *, int, _ns7__getAllPhysicalIosResponse *const*, const char *);
SOAP_FMAC3 _ns7__getAllPhysicalIosResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__getAllPhysicalIosResponse(struct soap*, const char*, _ns7__getAllPhysicalIosResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__getAllPhysicalIosResponse(struct soap*, _ns7__getAllPhysicalIosResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__getAllPhysicalIosResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__getAllPhysicalIosResponse(struct soap*, _ns7__getAllPhysicalIosResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__getAllPhysicalIos_DEFINED
#define SOAP_TYPE_PointerTo_ns7__getAllPhysicalIos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__getAllPhysicalIos(struct soap*, _ns7__getAllPhysicalIos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__getAllPhysicalIos(struct soap*, const char *, int, _ns7__getAllPhysicalIos *const*, const char *);
SOAP_FMAC3 _ns7__getAllPhysicalIos ** SOAP_FMAC4 soap_in_PointerTo_ns7__getAllPhysicalIos(struct soap*, const char*, _ns7__getAllPhysicalIos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__getAllPhysicalIos(struct soap*, _ns7__getAllPhysicalIos *const*, const char*, const char*);
SOAP_FMAC3 _ns7__getAllPhysicalIos ** SOAP_FMAC4 soap_get_PointerTo_ns7__getAllPhysicalIos(struct soap*, _ns7__getAllPhysicalIos **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__unlockAllIos_DEFINED
#define SOAP_TYPE_PointerTo_ns7__unlockAllIos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__unlockAllIos(struct soap*, _ns7__unlockAllIos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__unlockAllIos(struct soap*, const char *, int, _ns7__unlockAllIos *const*, const char *);
SOAP_FMAC3 _ns7__unlockAllIos ** SOAP_FMAC4 soap_in_PointerTo_ns7__unlockAllIos(struct soap*, const char*, _ns7__unlockAllIos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__unlockAllIos(struct soap*, _ns7__unlockAllIos *const*, const char*, const char*);
SOAP_FMAC3 _ns7__unlockAllIos ** SOAP_FMAC4 soap_get_PointerTo_ns7__unlockAllIos(struct soap*, _ns7__unlockAllIos **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__SoapAllPhysicalIoResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__SoapAllPhysicalIoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__SoapAllPhysicalIoResponse(struct soap*, _ns7__SoapAllPhysicalIoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__SoapAllPhysicalIoResponse(struct soap*, const char *, int, _ns7__SoapAllPhysicalIoResponse *const*, const char *);
SOAP_FMAC3 _ns7__SoapAllPhysicalIoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__SoapAllPhysicalIoResponse(struct soap*, const char*, _ns7__SoapAllPhysicalIoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__SoapAllPhysicalIoResponse(struct soap*, _ns7__SoapAllPhysicalIoResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__SoapAllPhysicalIoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__SoapAllPhysicalIoResponse(struct soap*, _ns7__SoapAllPhysicalIoResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__lockAllIos_DEFINED
#define SOAP_TYPE_PointerTo_ns7__lockAllIos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__lockAllIos(struct soap*, _ns7__lockAllIos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__lockAllIos(struct soap*, const char *, int, _ns7__lockAllIos *const*, const char *);
SOAP_FMAC3 _ns7__lockAllIos ** SOAP_FMAC4 soap_in_PointerTo_ns7__lockAllIos(struct soap*, const char*, _ns7__lockAllIos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__lockAllIos(struct soap*, _ns7__lockAllIos *const*, const char*, const char*);
SOAP_FMAC3 _ns7__lockAllIos ** SOAP_FMAC4 soap_get_PointerTo_ns7__lockAllIos(struct soap*, _ns7__lockAllIos **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__unlockIosResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__unlockIosResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__unlockIosResponse(struct soap*, _ns7__unlockIosResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__unlockIosResponse(struct soap*, const char *, int, _ns7__unlockIosResponse *const*, const char *);
SOAP_FMAC3 _ns7__unlockIosResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__unlockIosResponse(struct soap*, const char*, _ns7__unlockIosResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__unlockIosResponse(struct soap*, _ns7__unlockIosResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__unlockIosResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__unlockIosResponse(struct soap*, _ns7__unlockIosResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__unlockIos_DEFINED
#define SOAP_TYPE_PointerTo_ns7__unlockIos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__unlockIos(struct soap*, _ns7__unlockIos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__unlockIos(struct soap*, const char *, int, _ns7__unlockIos *const*, const char *);
SOAP_FMAC3 _ns7__unlockIos ** SOAP_FMAC4 soap_in_PointerTo_ns7__unlockIos(struct soap*, const char*, _ns7__unlockIos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__unlockIos(struct soap*, _ns7__unlockIos *const*, const char*, const char*);
SOAP_FMAC3 _ns7__unlockIos ** SOAP_FMAC4 soap_get_PointerTo_ns7__unlockIos(struct soap*, _ns7__unlockIos **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__lockIosResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__lockIosResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__lockIosResponse(struct soap*, _ns7__lockIosResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__lockIosResponse(struct soap*, const char *, int, _ns7__lockIosResponse *const*, const char *);
SOAP_FMAC3 _ns7__lockIosResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__lockIosResponse(struct soap*, const char*, _ns7__lockIosResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__lockIosResponse(struct soap*, _ns7__lockIosResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__lockIosResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__lockIosResponse(struct soap*, _ns7__lockIosResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__lockIos_DEFINED
#define SOAP_TYPE_PointerTo_ns7__lockIos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__lockIos(struct soap*, _ns7__lockIos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__lockIos(struct soap*, const char *, int, _ns7__lockIos *const*, const char *);
SOAP_FMAC3 _ns7__lockIos ** SOAP_FMAC4 soap_in_PointerTo_ns7__lockIos(struct soap*, const char*, _ns7__lockIos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__lockIos(struct soap*, _ns7__lockIos *const*, const char*, const char*);
SOAP_FMAC3 _ns7__lockIos ** SOAP_FMAC4 soap_get_PointerTo_ns7__lockIos(struct soap*, _ns7__lockIos **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__writeIosResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__writeIosResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__writeIosResponse(struct soap*, _ns7__writeIosResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__writeIosResponse(struct soap*, const char *, int, _ns7__writeIosResponse *const*, const char *);
SOAP_FMAC3 _ns7__writeIosResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__writeIosResponse(struct soap*, const char*, _ns7__writeIosResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__writeIosResponse(struct soap*, _ns7__writeIosResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__writeIosResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__writeIosResponse(struct soap*, _ns7__writeIosResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__writeIos_DEFINED
#define SOAP_TYPE_PointerTo_ns7__writeIos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__writeIos(struct soap*, _ns7__writeIos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__writeIos(struct soap*, const char *, int, _ns7__writeIos *const*, const char *);
SOAP_FMAC3 _ns7__writeIos ** SOAP_FMAC4 soap_in_PointerTo_ns7__writeIos(struct soap*, const char*, _ns7__writeIos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__writeIos(struct soap*, _ns7__writeIos *const*, const char*, const char*);
SOAP_FMAC3 _ns7__writeIos ** SOAP_FMAC4 soap_get_PointerTo_ns7__writeIos(struct soap*, _ns7__writeIos **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__readIosResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__readIosResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__readIosResponse(struct soap*, _ns7__readIosResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__readIosResponse(struct soap*, const char *, int, _ns7__readIosResponse *const*, const char *);
SOAP_FMAC3 _ns7__readIosResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__readIosResponse(struct soap*, const char*, _ns7__readIosResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__readIosResponse(struct soap*, _ns7__readIosResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__readIosResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__readIosResponse(struct soap*, _ns7__readIosResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__readIos_DEFINED
#define SOAP_TYPE_PointerTo_ns7__readIos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__readIos(struct soap*, _ns7__readIos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__readIos(struct soap*, const char *, int, _ns7__readIos *const*, const char *);
SOAP_FMAC3 _ns7__readIos ** SOAP_FMAC4 soap_in_PointerTo_ns7__readIos(struct soap*, const char*, _ns7__readIos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__readIos(struct soap*, _ns7__readIos *const*, const char*, const char*);
SOAP_FMAC3 _ns7__readIos ** SOAP_FMAC4 soap_get_PointerTo_ns7__readIos(struct soap*, _ns7__readIos **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__replaceLineResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__replaceLineResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__replaceLineResponse(struct soap*, _ns7__replaceLineResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__replaceLineResponse(struct soap*, const char *, int, _ns7__replaceLineResponse *const*, const char *);
SOAP_FMAC3 _ns7__replaceLineResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__replaceLineResponse(struct soap*, const char*, _ns7__replaceLineResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__replaceLineResponse(struct soap*, _ns7__replaceLineResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__replaceLineResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__replaceLineResponse(struct soap*, _ns7__replaceLineResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__replaceLine_DEFINED
#define SOAP_TYPE_PointerTo_ns7__replaceLine_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__replaceLine(struct soap*, _ns7__replaceLine *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__replaceLine(struct soap*, const char *, int, _ns7__replaceLine *const*, const char *);
SOAP_FMAC3 _ns7__replaceLine ** SOAP_FMAC4 soap_in_PointerTo_ns7__replaceLine(struct soap*, const char*, _ns7__replaceLine **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__replaceLine(struct soap*, _ns7__replaceLine *const*, const char*, const char*);
SOAP_FMAC3 _ns7__replaceLine ** SOAP_FMAC4 soap_get_PointerTo_ns7__replaceLine(struct soap*, _ns7__replaceLine **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__setCurrentInstructionResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__setCurrentInstructionResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__setCurrentInstructionResponse(struct soap*, _ns7__setCurrentInstructionResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__setCurrentInstructionResponse(struct soap*, const char *, int, _ns7__setCurrentInstructionResponse *const*, const char *);
SOAP_FMAC3 _ns7__setCurrentInstructionResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__setCurrentInstructionResponse(struct soap*, const char*, _ns7__setCurrentInstructionResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__setCurrentInstructionResponse(struct soap*, _ns7__setCurrentInstructionResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__setCurrentInstructionResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__setCurrentInstructionResponse(struct soap*, _ns7__setCurrentInstructionResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__setCurrentInstruction_DEFINED
#define SOAP_TYPE_PointerTo_ns7__setCurrentInstruction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__setCurrentInstruction(struct soap*, _ns7__setCurrentInstruction *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__setCurrentInstruction(struct soap*, const char *, int, _ns7__setCurrentInstruction *const*, const char *);
SOAP_FMAC3 _ns7__setCurrentInstruction ** SOAP_FMAC4 soap_in_PointerTo_ns7__setCurrentInstruction(struct soap*, const char*, _ns7__setCurrentInstruction **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__setCurrentInstruction(struct soap*, _ns7__setCurrentInstruction *const*, const char*, const char*);
SOAP_FMAC3 _ns7__setCurrentInstruction ** SOAP_FMAC4 soap_get_PointerTo_ns7__setCurrentInstruction(struct soap*, _ns7__setCurrentInstruction **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__setProjectAsModifiedResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__setProjectAsModifiedResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__setProjectAsModifiedResponse(struct soap*, _ns7__setProjectAsModifiedResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__setProjectAsModifiedResponse(struct soap*, const char *, int, _ns7__setProjectAsModifiedResponse *const*, const char *);
SOAP_FMAC3 _ns7__setProjectAsModifiedResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__setProjectAsModifiedResponse(struct soap*, const char*, _ns7__setProjectAsModifiedResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__setProjectAsModifiedResponse(struct soap*, _ns7__setProjectAsModifiedResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__setProjectAsModifiedResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__setProjectAsModifiedResponse(struct soap*, _ns7__setProjectAsModifiedResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__setProjectAsModified_DEFINED
#define SOAP_TYPE_PointerTo_ns7__setProjectAsModified_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__setProjectAsModified(struct soap*, _ns7__setProjectAsModified *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__setProjectAsModified(struct soap*, const char *, int, _ns7__setProjectAsModified *const*, const char *);
SOAP_FMAC3 _ns7__setProjectAsModified ** SOAP_FMAC4 soap_in_PointerTo_ns7__setProjectAsModified(struct soap*, const char*, _ns7__setProjectAsModified **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__setProjectAsModified(struct soap*, _ns7__setProjectAsModified *const*, const char*, const char*);
SOAP_FMAC3 _ns7__setProjectAsModified ** SOAP_FMAC4 soap_get_PointerTo_ns7__setProjectAsModified(struct soap*, _ns7__setProjectAsModified **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__execVal3Response_DEFINED
#define SOAP_TYPE_PointerTo_ns7__execVal3Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__execVal3Response(struct soap*, _ns7__execVal3Response *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__execVal3Response(struct soap*, const char *, int, _ns7__execVal3Response *const*, const char *);
SOAP_FMAC3 _ns7__execVal3Response ** SOAP_FMAC4 soap_in_PointerTo_ns7__execVal3Response(struct soap*, const char*, _ns7__execVal3Response **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__execVal3Response(struct soap*, _ns7__execVal3Response *const*, const char*, const char*);
SOAP_FMAC3 _ns7__execVal3Response ** SOAP_FMAC4 soap_get_PointerTo_ns7__execVal3Response(struct soap*, _ns7__execVal3Response **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__execVal3_DEFINED
#define SOAP_TYPE_PointerTo_ns7__execVal3_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__execVal3(struct soap*, _ns7__execVal3 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__execVal3(struct soap*, const char *, int, _ns7__execVal3 *const*, const char *);
SOAP_FMAC3 _ns7__execVal3 ** SOAP_FMAC4 soap_in_PointerTo_ns7__execVal3(struct soap*, const char*, _ns7__execVal3 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__execVal3(struct soap*, _ns7__execVal3 *const*, const char*, const char*);
SOAP_FMAC3 _ns7__execVal3 ** SOAP_FMAC4 soap_get_PointerTo_ns7__execVal3(struct soap*, _ns7__execVal3 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__getWatchResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__getWatchResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__getWatchResponse(struct soap*, _ns7__getWatchResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__getWatchResponse(struct soap*, const char *, int, _ns7__getWatchResponse *const*, const char *);
SOAP_FMAC3 _ns7__getWatchResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__getWatchResponse(struct soap*, const char*, _ns7__getWatchResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__getWatchResponse(struct soap*, _ns7__getWatchResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__getWatchResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__getWatchResponse(struct soap*, _ns7__getWatchResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__getWatches_DEFINED
#define SOAP_TYPE_PointerTo_ns7__getWatches_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__getWatches(struct soap*, _ns7__getWatches *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__getWatches(struct soap*, const char *, int, _ns7__getWatches *const*, const char *);
SOAP_FMAC3 _ns7__getWatches ** SOAP_FMAC4 soap_in_PointerTo_ns7__getWatches(struct soap*, const char*, _ns7__getWatches **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__getWatches(struct soap*, _ns7__getWatches *const*, const char*, const char*);
SOAP_FMAC3 _ns7__getWatches ** SOAP_FMAC4 soap_get_PointerTo_ns7__getWatches(struct soap*, _ns7__getWatches **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__getStackFrameResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__getStackFrameResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__getStackFrameResponse(struct soap*, _ns7__getStackFrameResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__getStackFrameResponse(struct soap*, const char *, int, _ns7__getStackFrameResponse *const*, const char *);
SOAP_FMAC3 _ns7__getStackFrameResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__getStackFrameResponse(struct soap*, const char*, _ns7__getStackFrameResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__getStackFrameResponse(struct soap*, _ns7__getStackFrameResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__getStackFrameResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__getStackFrameResponse(struct soap*, _ns7__getStackFrameResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__getStackFrame_DEFINED
#define SOAP_TYPE_PointerTo_ns7__getStackFrame_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__getStackFrame(struct soap*, _ns7__getStackFrame *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__getStackFrame(struct soap*, const char *, int, _ns7__getStackFrame *const*, const char *);
SOAP_FMAC3 _ns7__getStackFrame ** SOAP_FMAC4 soap_in_PointerTo_ns7__getStackFrame(struct soap*, const char*, _ns7__getStackFrame **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__getStackFrame(struct soap*, _ns7__getStackFrame *const*, const char*, const char*);
SOAP_FMAC3 _ns7__getStackFrame ** SOAP_FMAC4 soap_get_PointerTo_ns7__getStackFrame(struct soap*, _ns7__getStackFrame **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__getCallStackResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__getCallStackResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__getCallStackResponse(struct soap*, _ns7__getCallStackResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__getCallStackResponse(struct soap*, const char *, int, _ns7__getCallStackResponse *const*, const char *);
SOAP_FMAC3 _ns7__getCallStackResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__getCallStackResponse(struct soap*, const char*, _ns7__getCallStackResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__getCallStackResponse(struct soap*, _ns7__getCallStackResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__getCallStackResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__getCallStackResponse(struct soap*, _ns7__getCallStackResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__getCallStack_DEFINED
#define SOAP_TYPE_PointerTo_ns7__getCallStack_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__getCallStack(struct soap*, _ns7__getCallStack *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__getCallStack(struct soap*, const char *, int, _ns7__getCallStack *const*, const char *);
SOAP_FMAC3 _ns7__getCallStack ** SOAP_FMAC4 soap_in_PointerTo_ns7__getCallStack(struct soap*, const char*, _ns7__getCallStack **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__getCallStack(struct soap*, _ns7__getCallStack *const*, const char*, const char*);
SOAP_FMAC3 _ns7__getCallStack ** SOAP_FMAC4 soap_get_PointerTo_ns7__getCallStack(struct soap*, _ns7__getCallStack **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__unsubscribeResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__unsubscribeResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__unsubscribeResponse(struct soap*, _ns7__unsubscribeResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__unsubscribeResponse(struct soap*, const char *, int, _ns7__unsubscribeResponse *const*, const char *);
SOAP_FMAC3 _ns7__unsubscribeResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__unsubscribeResponse(struct soap*, const char*, _ns7__unsubscribeResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__unsubscribeResponse(struct soap*, _ns7__unsubscribeResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__unsubscribeResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__unsubscribeResponse(struct soap*, _ns7__unsubscribeResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__unsubscribeToControllerEvents_DEFINED
#define SOAP_TYPE_PointerTo_ns7__unsubscribeToControllerEvents_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__unsubscribeToControllerEvents(struct soap*, _ns7__unsubscribeToControllerEvents *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__unsubscribeToControllerEvents(struct soap*, const char *, int, _ns7__unsubscribeToControllerEvents *const*, const char *);
SOAP_FMAC3 _ns7__unsubscribeToControllerEvents ** SOAP_FMAC4 soap_in_PointerTo_ns7__unsubscribeToControllerEvents(struct soap*, const char*, _ns7__unsubscribeToControllerEvents **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__unsubscribeToControllerEvents(struct soap*, _ns7__unsubscribeToControllerEvents *const*, const char*, const char*);
SOAP_FMAC3 _ns7__unsubscribeToControllerEvents ** SOAP_FMAC4 soap_get_PointerTo_ns7__unsubscribeToControllerEvents(struct soap*, _ns7__unsubscribeToControllerEvents **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__subscribeResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__subscribeResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__subscribeResponse(struct soap*, _ns7__subscribeResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__subscribeResponse(struct soap*, const char *, int, _ns7__subscribeResponse *const*, const char *);
SOAP_FMAC3 _ns7__subscribeResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__subscribeResponse(struct soap*, const char*, _ns7__subscribeResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__subscribeResponse(struct soap*, _ns7__subscribeResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__subscribeResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__subscribeResponse(struct soap*, _ns7__subscribeResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__subscribeToControllerEvents_DEFINED
#define SOAP_TYPE_PointerTo_ns7__subscribeToControllerEvents_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__subscribeToControllerEvents(struct soap*, _ns7__subscribeToControllerEvents *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__subscribeToControllerEvents(struct soap*, const char *, int, _ns7__subscribeToControllerEvents *const*, const char *);
SOAP_FMAC3 _ns7__subscribeToControllerEvents ** SOAP_FMAC4 soap_in_PointerTo_ns7__subscribeToControllerEvents(struct soap*, const char*, _ns7__subscribeToControllerEvents **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__subscribeToControllerEvents(struct soap*, _ns7__subscribeToControllerEvents *const*, const char*, const char*);
SOAP_FMAC3 _ns7__subscribeToControllerEvents ** SOAP_FMAC4 soap_get_PointerTo_ns7__subscribeToControllerEvents(struct soap*, _ns7__subscribeToControllerEvents **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__taskStepResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__taskStepResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__taskStepResponse(struct soap*, _ns7__taskStepResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__taskStepResponse(struct soap*, const char *, int, _ns7__taskStepResponse *const*, const char *);
SOAP_FMAC3 _ns7__taskStepResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__taskStepResponse(struct soap*, const char*, _ns7__taskStepResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__taskStepResponse(struct soap*, _ns7__taskStepResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__taskStepResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__taskStepResponse(struct soap*, _ns7__taskStepResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__taskStep_DEFINED
#define SOAP_TYPE_PointerTo_ns7__taskStep_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__taskStep(struct soap*, _ns7__taskStep *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__taskStep(struct soap*, const char *, int, _ns7__taskStep *const*, const char *);
SOAP_FMAC3 _ns7__taskStep ** SOAP_FMAC4 soap_in_PointerTo_ns7__taskStep(struct soap*, const char*, _ns7__taskStep **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__taskStep(struct soap*, _ns7__taskStep *const*, const char*, const char*);
SOAP_FMAC3 _ns7__taskStep ** SOAP_FMAC4 soap_get_PointerTo_ns7__taskStep(struct soap*, _ns7__taskStep **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__taskKillResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__taskKillResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__taskKillResponse(struct soap*, _ns7__taskKillResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__taskKillResponse(struct soap*, const char *, int, _ns7__taskKillResponse *const*, const char *);
SOAP_FMAC3 _ns7__taskKillResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__taskKillResponse(struct soap*, const char*, _ns7__taskKillResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__taskKillResponse(struct soap*, _ns7__taskKillResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__taskKillResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__taskKillResponse(struct soap*, _ns7__taskKillResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__taskKill_DEFINED
#define SOAP_TYPE_PointerTo_ns7__taskKill_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__taskKill(struct soap*, _ns7__taskKill *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__taskKill(struct soap*, const char *, int, _ns7__taskKill *const*, const char *);
SOAP_FMAC3 _ns7__taskKill ** SOAP_FMAC4 soap_in_PointerTo_ns7__taskKill(struct soap*, const char*, _ns7__taskKill **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__taskKill(struct soap*, _ns7__taskKill *const*, const char*, const char*);
SOAP_FMAC3 _ns7__taskKill ** SOAP_FMAC4 soap_get_PointerTo_ns7__taskKill(struct soap*, _ns7__taskKill **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__taskResumeResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__taskResumeResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__taskResumeResponse(struct soap*, _ns7__taskResumeResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__taskResumeResponse(struct soap*, const char *, int, _ns7__taskResumeResponse *const*, const char *);
SOAP_FMAC3 _ns7__taskResumeResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__taskResumeResponse(struct soap*, const char*, _ns7__taskResumeResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__taskResumeResponse(struct soap*, _ns7__taskResumeResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__taskResumeResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__taskResumeResponse(struct soap*, _ns7__taskResumeResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__taskResume_DEFINED
#define SOAP_TYPE_PointerTo_ns7__taskResume_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__taskResume(struct soap*, _ns7__taskResume *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__taskResume(struct soap*, const char *, int, _ns7__taskResume *const*, const char *);
SOAP_FMAC3 _ns7__taskResume ** SOAP_FMAC4 soap_in_PointerTo_ns7__taskResume(struct soap*, const char*, _ns7__taskResume **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__taskResume(struct soap*, _ns7__taskResume *const*, const char*, const char*);
SOAP_FMAC3 _ns7__taskResume ** SOAP_FMAC4 soap_get_PointerTo_ns7__taskResume(struct soap*, _ns7__taskResume **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__taskSuspendResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__taskSuspendResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__taskSuspendResponse(struct soap*, _ns7__taskSuspendResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__taskSuspendResponse(struct soap*, const char *, int, _ns7__taskSuspendResponse *const*, const char *);
SOAP_FMAC3 _ns7__taskSuspendResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__taskSuspendResponse(struct soap*, const char*, _ns7__taskSuspendResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__taskSuspendResponse(struct soap*, _ns7__taskSuspendResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__taskSuspendResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__taskSuspendResponse(struct soap*, _ns7__taskSuspendResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__taskSuspend_DEFINED
#define SOAP_TYPE_PointerTo_ns7__taskSuspend_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__taskSuspend(struct soap*, _ns7__taskSuspend *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__taskSuspend(struct soap*, const char *, int, _ns7__taskSuspend *const*, const char *);
SOAP_FMAC3 _ns7__taskSuspend ** SOAP_FMAC4 soap_in_PointerTo_ns7__taskSuspend(struct soap*, const char*, _ns7__taskSuspend **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__taskSuspend(struct soap*, _ns7__taskSuspend *const*, const char*, const char*);
SOAP_FMAC3 _ns7__taskSuspend ** SOAP_FMAC4 soap_get_PointerTo_ns7__taskSuspend(struct soap*, _ns7__taskSuspend **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__getTasksResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__getTasksResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__getTasksResponse(struct soap*, _ns7__getTasksResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__getTasksResponse(struct soap*, const char *, int, _ns7__getTasksResponse *const*, const char *);
SOAP_FMAC3 _ns7__getTasksResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__getTasksResponse(struct soap*, const char*, _ns7__getTasksResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__getTasksResponse(struct soap*, _ns7__getTasksResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__getTasksResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__getTasksResponse(struct soap*, _ns7__getTasksResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__getTasks_DEFINED
#define SOAP_TYPE_PointerTo_ns7__getTasks_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__getTasks(struct soap*, _ns7__getTasks *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__getTasks(struct soap*, const char *, int, _ns7__getTasks *const*, const char *);
SOAP_FMAC3 _ns7__getTasks ** SOAP_FMAC4 soap_in_PointerTo_ns7__getTasks(struct soap*, const char*, _ns7__getTasks **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__getTasks(struct soap*, _ns7__getTasks *const*, const char*, const char*);
SOAP_FMAC3 _ns7__getTasks ** SOAP_FMAC4 soap_get_PointerTo_ns7__getTasks(struct soap*, _ns7__getTasks **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__clearAllBreakpointsResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__clearAllBreakpointsResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__clearAllBreakpointsResponse(struct soap*, _ns7__clearAllBreakpointsResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__clearAllBreakpointsResponse(struct soap*, const char *, int, _ns7__clearAllBreakpointsResponse *const*, const char *);
SOAP_FMAC3 _ns7__clearAllBreakpointsResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__clearAllBreakpointsResponse(struct soap*, const char*, _ns7__clearAllBreakpointsResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__clearAllBreakpointsResponse(struct soap*, _ns7__clearAllBreakpointsResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__clearAllBreakpointsResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__clearAllBreakpointsResponse(struct soap*, _ns7__clearAllBreakpointsResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__clearAllBreakpoints_DEFINED
#define SOAP_TYPE_PointerTo_ns7__clearAllBreakpoints_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__clearAllBreakpoints(struct soap*, _ns7__clearAllBreakpoints *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__clearAllBreakpoints(struct soap*, const char *, int, _ns7__clearAllBreakpoints *const*, const char *);
SOAP_FMAC3 _ns7__clearAllBreakpoints ** SOAP_FMAC4 soap_in_PointerTo_ns7__clearAllBreakpoints(struct soap*, const char*, _ns7__clearAllBreakpoints **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__clearAllBreakpoints(struct soap*, _ns7__clearAllBreakpoints *const*, const char*, const char*);
SOAP_FMAC3 _ns7__clearAllBreakpoints ** SOAP_FMAC4 soap_get_PointerTo_ns7__clearAllBreakpoints(struct soap*, _ns7__clearAllBreakpoints **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__clearBreakpointsResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__clearBreakpointsResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__clearBreakpointsResponse(struct soap*, _ns7__clearBreakpointsResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__clearBreakpointsResponse(struct soap*, const char *, int, _ns7__clearBreakpointsResponse *const*, const char *);
SOAP_FMAC3 _ns7__clearBreakpointsResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__clearBreakpointsResponse(struct soap*, const char*, _ns7__clearBreakpointsResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__clearBreakpointsResponse(struct soap*, _ns7__clearBreakpointsResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__clearBreakpointsResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__clearBreakpointsResponse(struct soap*, _ns7__clearBreakpointsResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__clearBreakpoints_DEFINED
#define SOAP_TYPE_PointerTo_ns7__clearBreakpoints_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__clearBreakpoints(struct soap*, _ns7__clearBreakpoints *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__clearBreakpoints(struct soap*, const char *, int, _ns7__clearBreakpoints *const*, const char *);
SOAP_FMAC3 _ns7__clearBreakpoints ** SOAP_FMAC4 soap_in_PointerTo_ns7__clearBreakpoints(struct soap*, const char*, _ns7__clearBreakpoints **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__clearBreakpoints(struct soap*, _ns7__clearBreakpoints *const*, const char*, const char*);
SOAP_FMAC3 _ns7__clearBreakpoints ** SOAP_FMAC4 soap_get_PointerTo_ns7__clearBreakpoints(struct soap*, _ns7__clearBreakpoints **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__getBreakpointsResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__getBreakpointsResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__getBreakpointsResponse(struct soap*, _ns7__getBreakpointsResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__getBreakpointsResponse(struct soap*, const char *, int, _ns7__getBreakpointsResponse *const*, const char *);
SOAP_FMAC3 _ns7__getBreakpointsResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__getBreakpointsResponse(struct soap*, const char*, _ns7__getBreakpointsResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__getBreakpointsResponse(struct soap*, _ns7__getBreakpointsResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__getBreakpointsResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__getBreakpointsResponse(struct soap*, _ns7__getBreakpointsResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__getBreakpoints_DEFINED
#define SOAP_TYPE_PointerTo_ns7__getBreakpoints_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__getBreakpoints(struct soap*, _ns7__getBreakpoints *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__getBreakpoints(struct soap*, const char *, int, _ns7__getBreakpoints *const*, const char *);
SOAP_FMAC3 _ns7__getBreakpoints ** SOAP_FMAC4 soap_in_PointerTo_ns7__getBreakpoints(struct soap*, const char*, _ns7__getBreakpoints **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__getBreakpoints(struct soap*, _ns7__getBreakpoints *const*, const char*, const char*);
SOAP_FMAC3 _ns7__getBreakpoints ** SOAP_FMAC4 soap_get_PointerTo_ns7__getBreakpoints(struct soap*, _ns7__getBreakpoints **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__setBreakpointsResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns7__setBreakpointsResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__setBreakpointsResponse(struct soap*, _ns7__setBreakpointsResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__setBreakpointsResponse(struct soap*, const char *, int, _ns7__setBreakpointsResponse *const*, const char *);
SOAP_FMAC3 _ns7__setBreakpointsResponse ** SOAP_FMAC4 soap_in_PointerTo_ns7__setBreakpointsResponse(struct soap*, const char*, _ns7__setBreakpointsResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__setBreakpointsResponse(struct soap*, _ns7__setBreakpointsResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns7__setBreakpointsResponse ** SOAP_FMAC4 soap_get_PointerTo_ns7__setBreakpointsResponse(struct soap*, _ns7__setBreakpointsResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns7__setBreakpoints_DEFINED
#define SOAP_TYPE_PointerTo_ns7__setBreakpoints_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns7__setBreakpoints(struct soap*, _ns7__setBreakpoints *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns7__setBreakpoints(struct soap*, const char *, int, _ns7__setBreakpoints *const*, const char *);
SOAP_FMAC3 _ns7__setBreakpoints ** SOAP_FMAC4 soap_in_PointerTo_ns7__setBreakpoints(struct soap*, const char*, _ns7__setBreakpoints **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns7__setBreakpoints(struct soap*, _ns7__setBreakpoints *const*, const char*, const char*);
SOAP_FMAC3 _ns7__setBreakpoints ** SOAP_FMAC4 soap_get_PointerTo_ns7__setBreakpoints(struct soap*, _ns7__setBreakpoints **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__setRobotPosResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns1__setRobotPosResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__setRobotPosResponse(struct soap*, _ns1__setRobotPosResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__setRobotPosResponse(struct soap*, const char *, int, _ns1__setRobotPosResponse *const*, const char *);
SOAP_FMAC3 _ns1__setRobotPosResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__setRobotPosResponse(struct soap*, const char*, _ns1__setRobotPosResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__setRobotPosResponse(struct soap*, _ns1__setRobotPosResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns1__setRobotPosResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__setRobotPosResponse(struct soap*, _ns1__setRobotPosResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__setRobotJointPos_DEFINED
#define SOAP_TYPE_PointerTo_ns1__setRobotJointPos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__setRobotJointPos(struct soap*, _ns1__setRobotJointPos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__setRobotJointPos(struct soap*, const char *, int, _ns1__setRobotJointPos *const*, const char *);
SOAP_FMAC3 _ns1__setRobotJointPos ** SOAP_FMAC4 soap_in_PointerTo_ns1__setRobotJointPos(struct soap*, const char*, _ns1__setRobotJointPos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__setRobotJointPos(struct soap*, _ns1__setRobotJointPos *const*, const char*, const char*);
SOAP_FMAC3 _ns1__setRobotJointPos ** SOAP_FMAC4 soap_get_PointerTo_ns1__setRobotJointPos(struct soap*, _ns1__setRobotJointPos **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getRobotJntCartPosResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getRobotJntCartPosResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getRobotJntCartPosResponse(struct soap*, _ns1__getRobotJntCartPosResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getRobotJntCartPosResponse(struct soap*, const char *, int, _ns1__getRobotJntCartPosResponse *const*, const char *);
SOAP_FMAC3 _ns1__getRobotJntCartPosResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__getRobotJntCartPosResponse(struct soap*, const char*, _ns1__getRobotJntCartPosResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getRobotJntCartPosResponse(struct soap*, _ns1__getRobotJntCartPosResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getRobotJntCartPosResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__getRobotJntCartPosResponse(struct soap*, _ns1__getRobotJntCartPosResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getRobotJntCartPos_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getRobotJntCartPos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getRobotJntCartPos(struct soap*, _ns1__getRobotJntCartPos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getRobotJntCartPos(struct soap*, const char *, int, _ns1__getRobotJntCartPos *const*, const char *);
SOAP_FMAC3 _ns1__getRobotJntCartPos ** SOAP_FMAC4 soap_in_PointerTo_ns1__getRobotJntCartPos(struct soap*, const char*, _ns1__getRobotJntCartPos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getRobotJntCartPos(struct soap*, _ns1__getRobotJntCartPos *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getRobotJntCartPos ** SOAP_FMAC4 soap_get_PointerTo_ns1__getRobotJntCartPos(struct soap*, _ns1__getRobotJntCartPos **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getRobotJointPosResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getRobotJointPosResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getRobotJointPosResponse(struct soap*, _ns1__getRobotJointPosResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getRobotJointPosResponse(struct soap*, const char *, int, _ns1__getRobotJointPosResponse *const*, const char *);
SOAP_FMAC3 _ns1__getRobotJointPosResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__getRobotJointPosResponse(struct soap*, const char*, _ns1__getRobotJointPosResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getRobotJointPosResponse(struct soap*, _ns1__getRobotJointPosResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getRobotJointPosResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__getRobotJointPosResponse(struct soap*, _ns1__getRobotJointPosResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getRobotJointPos_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getRobotJointPos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getRobotJointPos(struct soap*, _ns1__getRobotJointPos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getRobotJointPos(struct soap*, const char *, int, _ns1__getRobotJointPos *const*, const char *);
SOAP_FMAC3 _ns1__getRobotJointPos ** SOAP_FMAC4 soap_in_PointerTo_ns1__getRobotJointPos(struct soap*, const char*, _ns1__getRobotJointPos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getRobotJointPos(struct soap*, _ns1__getRobotJointPos *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getRobotJointPos ** SOAP_FMAC4 soap_get_PointerTo_ns1__getRobotJointPos(struct soap*, _ns1__getRobotJointPos **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getRobotsResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getRobotsResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getRobotsResponse(struct soap*, _ns1__getRobotsResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getRobotsResponse(struct soap*, const char *, int, _ns1__getRobotsResponse *const*, const char *);
SOAP_FMAC3 _ns1__getRobotsResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__getRobotsResponse(struct soap*, const char*, _ns1__getRobotsResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getRobotsResponse(struct soap*, _ns1__getRobotsResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getRobotsResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__getRobotsResponse(struct soap*, _ns1__getRobotsResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getRobots_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getRobots_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getRobots(struct soap*, _ns1__getRobots *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getRobots(struct soap*, const char *, int, _ns1__getRobots *const*, const char *);
SOAP_FMAC3 _ns1__getRobots ** SOAP_FMAC4 soap_in_PointerTo_ns1__getRobots(struct soap*, const char*, _ns1__getRobots **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getRobots(struct soap*, _ns1__getRobots *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getRobots ** SOAP_FMAC4 soap_get_PointerTo_ns1__getRobots(struct soap*, _ns1__getRobots **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__logoutResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns1__logoutResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__logoutResponse(struct soap*, _ns1__logoutResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__logoutResponse(struct soap*, const char *, int, _ns1__logoutResponse *const*, const char *);
SOAP_FMAC3 _ns1__logoutResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__logoutResponse(struct soap*, const char*, _ns1__logoutResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__logoutResponse(struct soap*, _ns1__logoutResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns1__logoutResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__logoutResponse(struct soap*, _ns1__logoutResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__logout_DEFINED
#define SOAP_TYPE_PointerTo_ns1__logout_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__logout(struct soap*, _ns1__logout *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__logout(struct soap*, const char *, int, _ns1__logout *const*, const char *);
SOAP_FMAC3 _ns1__logout ** SOAP_FMAC4 soap_in_PointerTo_ns1__logout(struct soap*, const char*, _ns1__logout **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__logout(struct soap*, _ns1__logout *const*, const char*, const char*);
SOAP_FMAC3 _ns1__logout ** SOAP_FMAC4 soap_get_PointerTo_ns1__logout(struct soap*, _ns1__logout **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__loginResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns1__loginResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__loginResponse(struct soap*, _ns1__loginResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__loginResponse(struct soap*, const char *, int, _ns1__loginResponse *const*, const char *);
SOAP_FMAC3 _ns1__loginResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__loginResponse(struct soap*, const char*, _ns1__loginResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__loginResponse(struct soap*, _ns1__loginResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns1__loginResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__loginResponse(struct soap*, _ns1__loginResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__login_DEFINED
#define SOAP_TYPE_PointerTo_ns1__login_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__login(struct soap*, _ns1__login *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__login(struct soap*, const char *, int, _ns1__login *const*, const char *);
SOAP_FMAC3 _ns1__login ** SOAP_FMAC4 soap_in_PointerTo_ns1__login(struct soap*, const char*, _ns1__login **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__login(struct soap*, _ns1__login *const*, const char*, const char*);
SOAP_FMAC3 _ns1__login ** SOAP_FMAC4 soap_get_PointerTo_ns1__login(struct soap*, _ns1__login **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getCS8CompatibilityResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getCS8CompatibilityResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getCS8CompatibilityResponse(struct soap*, _ns1__getCS8CompatibilityResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getCS8CompatibilityResponse(struct soap*, const char *, int, _ns1__getCS8CompatibilityResponse *const*, const char *);
SOAP_FMAC3 _ns1__getCS8CompatibilityResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__getCS8CompatibilityResponse(struct soap*, const char*, _ns1__getCS8CompatibilityResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getCS8CompatibilityResponse(struct soap*, _ns1__getCS8CompatibilityResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getCS8CompatibilityResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__getCS8CompatibilityResponse(struct soap*, _ns1__getCS8CompatibilityResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getCS8Compatibility_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getCS8Compatibility_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getCS8Compatibility(struct soap*, _ns1__getCS8Compatibility *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getCS8Compatibility(struct soap*, const char *, int, _ns1__getCS8Compatibility *const*, const char *);
SOAP_FMAC3 _ns1__getCS8Compatibility ** SOAP_FMAC4 soap_in_PointerTo_ns1__getCS8Compatibility(struct soap*, const char*, _ns1__getCS8Compatibility **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getCS8Compatibility(struct soap*, _ns1__getCS8Compatibility *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getCS8Compatibility ** SOAP_FMAC4 soap_get_PointerTo_ns1__getCS8Compatibility(struct soap*, _ns1__getCS8Compatibility **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getControllerParametersResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getControllerParametersResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getControllerParametersResponse(struct soap*, _ns1__getControllerParametersResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getControllerParametersResponse(struct soap*, const char *, int, _ns1__getControllerParametersResponse *const*, const char *);
SOAP_FMAC3 _ns1__getControllerParametersResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__getControllerParametersResponse(struct soap*, const char*, _ns1__getControllerParametersResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getControllerParametersResponse(struct soap*, _ns1__getControllerParametersResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getControllerParametersResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__getControllerParametersResponse(struct soap*, _ns1__getControllerParametersResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getControllerParameters_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getControllerParameters_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getControllerParameters(struct soap*, _ns1__getControllerParameters *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getControllerParameters(struct soap*, const char *, int, _ns1__getControllerParameters *const*, const char *);
SOAP_FMAC3 _ns1__getControllerParameters ** SOAP_FMAC4 soap_in_PointerTo_ns1__getControllerParameters(struct soap*, const char*, _ns1__getControllerParameters **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getControllerParameters(struct soap*, _ns1__getControllerParameters *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getControllerParameters ** SOAP_FMAC4 soap_get_PointerTo_ns1__getControllerParameters(struct soap*, _ns1__getControllerParameters **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getCS8VersionsResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getCS8VersionsResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getCS8VersionsResponse(struct soap*, _ns1__getCS8VersionsResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getCS8VersionsResponse(struct soap*, const char *, int, _ns1__getCS8VersionsResponse *const*, const char *);
SOAP_FMAC3 _ns1__getCS8VersionsResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__getCS8VersionsResponse(struct soap*, const char*, _ns1__getCS8VersionsResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getCS8VersionsResponse(struct soap*, _ns1__getCS8VersionsResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getCS8VersionsResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__getCS8VersionsResponse(struct soap*, _ns1__getCS8VersionsResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getCS8Versions_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getCS8Versions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getCS8Versions(struct soap*, _ns1__getCS8Versions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getCS8Versions(struct soap*, const char *, int, _ns1__getCS8Versions *const*, const char *);
SOAP_FMAC3 _ns1__getCS8Versions ** SOAP_FMAC4 soap_in_PointerTo_ns1__getCS8Versions(struct soap*, const char*, _ns1__getCS8Versions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getCS8Versions(struct soap*, _ns1__getCS8Versions *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getCS8Versions ** SOAP_FMAC4 soap_get_PointerTo_ns1__getCS8Versions(struct soap*, _ns1__getCS8Versions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__pingResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns1__pingResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__pingResponse(struct soap*, _ns1__pingResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__pingResponse(struct soap*, const char *, int, _ns1__pingResponse *const*, const char *);
SOAP_FMAC3 _ns1__pingResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__pingResponse(struct soap*, const char*, _ns1__pingResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__pingResponse(struct soap*, _ns1__pingResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns1__pingResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__pingResponse(struct soap*, _ns1__pingResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ping_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ping_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ping(struct soap*, _ns1__ping *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ping(struct soap*, const char *, int, _ns1__ping *const*, const char *);
SOAP_FMAC3 _ns1__ping ** SOAP_FMAC4 soap_in_PointerTo_ns1__ping(struct soap*, const char*, _ns1__ping **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ping(struct soap*, _ns1__ping *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ping ** SOAP_FMAC4 soap_get_PointerTo_ns1__ping(struct soap*, _ns1__ping **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__findServerResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns1__findServerResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__findServerResponse(struct soap*, _ns1__findServerResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__findServerResponse(struct soap*, const char *, int, _ns1__findServerResponse *const*, const char *);
SOAP_FMAC3 _ns1__findServerResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__findServerResponse(struct soap*, const char*, _ns1__findServerResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__findServerResponse(struct soap*, _ns1__findServerResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns1__findServerResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__findServerResponse(struct soap*, _ns1__findServerResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__findServer_DEFINED
#define SOAP_TYPE_PointerTo_ns1__findServer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__findServer(struct soap*, _ns1__findServer *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__findServer(struct soap*, const char *, int, _ns1__findServer *const*, const char *);
SOAP_FMAC3 _ns1__findServer ** SOAP_FMAC4 soap_in_PointerTo_ns1__findServer(struct soap*, const char*, _ns1__findServer **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__findServer(struct soap*, _ns1__findServer *const*, const char*, const char*);
SOAP_FMAC3 _ns1__findServer ** SOAP_FMAC4 soap_get_PointerTo_ns1__findServer(struct soap*, _ns1__findServer **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getSoapServerVersionResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getSoapServerVersionResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getSoapServerVersionResponse(struct soap*, _ns1__getSoapServerVersionResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getSoapServerVersionResponse(struct soap*, const char *, int, _ns1__getSoapServerVersionResponse *const*, const char *);
SOAP_FMAC3 _ns1__getSoapServerVersionResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__getSoapServerVersionResponse(struct soap*, const char*, _ns1__getSoapServerVersionResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getSoapServerVersionResponse(struct soap*, _ns1__getSoapServerVersionResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getSoapServerVersionResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__getSoapServerVersionResponse(struct soap*, _ns1__getSoapServerVersionResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getSoapServerVersion_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getSoapServerVersion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getSoapServerVersion(struct soap*, _ns1__getSoapServerVersion *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getSoapServerVersion(struct soap*, const char *, int, _ns1__getSoapServerVersion *const*, const char *);
SOAP_FMAC3 _ns1__getSoapServerVersion ** SOAP_FMAC4 soap_in_PointerTo_ns1__getSoapServerVersion(struct soap*, const char*, _ns1__getSoapServerVersion **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getSoapServerVersion(struct soap*, _ns1__getSoapServerVersion *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getSoapServerVersion ** SOAP_FMAC4 soap_get_PointerTo_ns1__getSoapServerVersion(struct soap*, _ns1__getSoapServerVersion **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ServerException_DEFINED
#define SOAP_TYPE_PointerTons1__ServerException_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ServerException(struct soap*, ns1__ServerException *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ServerException(struct soap*, const char *, int, ns1__ServerException *const*, const char *);
SOAP_FMAC3 ns1__ServerException ** SOAP_FMAC4 soap_in_PointerTons1__ServerException(struct soap*, const char*, ns1__ServerException **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ServerException(struct soap*, ns1__ServerException *const*, const char*, const char*);
SOAP_FMAC3 ns1__ServerException ** SOAP_FMAC4 soap_get_PointerTons1__ServerException(struct soap*, ns1__ServerException **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SessionId_DEFINED
#define SOAP_TYPE_PointerTons1__SessionId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SessionId(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SessionId(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerTons1__SessionId(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SessionId(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerTons1__SessionId(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__JointRange_DEFINED
#define SOAP_TYPE_PointerTons2__JointRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__JointRange(struct soap*, ns2__JointRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__JointRange(struct soap*, const char *, int, ns2__JointRange *const*, const char *);
SOAP_FMAC3 ns2__JointRange ** SOAP_FMAC4 soap_in_PointerTons2__JointRange(struct soap*, const char*, ns2__JointRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__JointRange(struct soap*, ns2__JointRange *const*, const char*, const char*);
SOAP_FMAC3 ns2__JointRange ** SOAP_FMAC4 soap_get_PointerTons2__JointRange(struct soap*, ns2__JointRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Records_DEFINED
#define SOAP_TYPE_PointerTons2__Records_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Records(struct soap*, ns2__Records *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Records(struct soap*, const char *, int, ns2__Records *const*, const char *);
SOAP_FMAC3 ns2__Records ** SOAP_FMAC4 soap_in_PointerTons2__Records(struct soap*, const char*, ns2__Records **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Records(struct soap*, ns2__Records *const*, const char*, const char*);
SOAP_FMAC3 ns2__Records ** SOAP_FMAC4 soap_get_PointerTons2__Records(struct soap*, ns2__Records **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Data_DEFINED
#define SOAP_TYPE_PointerTons2__Data_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Data(struct soap*, ns2__Data *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Data(struct soap*, const char *, int, ns2__Data *const*, const char *);
SOAP_FMAC3 ns2__Data ** SOAP_FMAC4 soap_in_PointerTons2__Data(struct soap*, const char*, ns2__Data **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Data(struct soap*, ns2__Data *const*, const char*, const char*);
SOAP_FMAC3 ns2__Data ** SOAP_FMAC4 soap_get_PointerTons2__Data(struct soap*, ns2__Data **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__VALApplications_DEFINED
#define SOAP_TYPE_PointerTons2__VALApplications_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VALApplications(struct soap*, ns2__VALApplications *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VALApplications(struct soap*, const char *, int, ns2__VALApplications *const*, const char *);
SOAP_FMAC3 ns2__VALApplications ** SOAP_FMAC4 soap_in_PointerTons2__VALApplications(struct soap*, const char*, ns2__VALApplications **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VALApplications(struct soap*, ns2__VALApplications *const*, const char*, const char*);
SOAP_FMAC3 ns2__VALApplications ** SOAP_FMAC4 soap_get_PointerTons2__VALApplications(struct soap*, ns2__VALApplications **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__Include_DEFINED
#define SOAP_TYPE_PointerTons3__Include_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__Include(struct soap*, ns3__Include *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__Include(struct soap*, const char *, int, ns3__Include *const*, const char *);
SOAP_FMAC3 ns3__Include ** SOAP_FMAC4 soap_in_PointerTons3__Include(struct soap*, const char*, ns3__Include **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__Include(struct soap*, ns3__Include *const*, const char*, const char*);
SOAP_FMAC3 ns3__Include ** SOAP_FMAC4 soap_get_PointerTons3__Include(struct soap*, ns3__Include **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SoapDhParametersArray_DEFINED
#define SOAP_TYPE_PointerTons7__SoapDhParametersArray_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SoapDhParametersArray(struct soap*, ns7__SoapDhParametersArray *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SoapDhParametersArray(struct soap*, const char *, int, ns7__SoapDhParametersArray *const*, const char *);
SOAP_FMAC3 ns7__SoapDhParametersArray ** SOAP_FMAC4 soap_in_PointerTons7__SoapDhParametersArray(struct soap*, const char*, ns7__SoapDhParametersArray **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SoapDhParametersArray(struct soap*, ns7__SoapDhParametersArray *const*, const char*, const char*);
SOAP_FMAC3 ns7__SoapDhParametersArray ** SOAP_FMAC4 soap_get_PointerTons7__SoapDhParametersArray(struct soap*, ns7__SoapDhParametersArray **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SoapPhysicalIoUnlockResponses_DEFINED
#define SOAP_TYPE_PointerTons7__SoapPhysicalIoUnlockResponses_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SoapPhysicalIoUnlockResponses(struct soap*, ns7__SoapPhysicalIoUnlockResponses *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SoapPhysicalIoUnlockResponses(struct soap*, const char *, int, ns7__SoapPhysicalIoUnlockResponses *const*, const char *);
SOAP_FMAC3 ns7__SoapPhysicalIoUnlockResponses ** SOAP_FMAC4 soap_in_PointerTons7__SoapPhysicalIoUnlockResponses(struct soap*, const char*, ns7__SoapPhysicalIoUnlockResponses **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SoapPhysicalIoUnlockResponses(struct soap*, ns7__SoapPhysicalIoUnlockResponses *const*, const char*, const char*);
SOAP_FMAC3 ns7__SoapPhysicalIoUnlockResponses ** SOAP_FMAC4 soap_get_PointerTons7__SoapPhysicalIoUnlockResponses(struct soap*, ns7__SoapPhysicalIoUnlockResponses **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SoapPhysicalIoResponses_DEFINED
#define SOAP_TYPE_PointerTons7__SoapPhysicalIoResponses_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SoapPhysicalIoResponses(struct soap*, ns7__SoapPhysicalIoResponses *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SoapPhysicalIoResponses(struct soap*, const char *, int, ns7__SoapPhysicalIoResponses *const*, const char *);
SOAP_FMAC3 ns7__SoapPhysicalIoResponses ** SOAP_FMAC4 soap_in_PointerTons7__SoapPhysicalIoResponses(struct soap*, const char*, ns7__SoapPhysicalIoResponses **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SoapPhysicalIoResponses(struct soap*, ns7__SoapPhysicalIoResponses *const*, const char*, const char*);
SOAP_FMAC3 ns7__SoapPhysicalIoResponses ** SOAP_FMAC4 soap_get_PointerTons7__SoapPhysicalIoResponses(struct soap*, ns7__SoapPhysicalIoResponses **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SoapPhysicalIoValues_DEFINED
#define SOAP_TYPE_PointerTons7__SoapPhysicalIoValues_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SoapPhysicalIoValues(struct soap*, ns7__SoapPhysicalIoValues *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SoapPhysicalIoValues(struct soap*, const char *, int, ns7__SoapPhysicalIoValues *const*, const char *);
SOAP_FMAC3 ns7__SoapPhysicalIoValues ** SOAP_FMAC4 soap_in_PointerTons7__SoapPhysicalIoValues(struct soap*, const char*, ns7__SoapPhysicalIoValues **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SoapPhysicalIoValues(struct soap*, ns7__SoapPhysicalIoValues *const*, const char*, const char*);
SOAP_FMAC3 ns7__SoapPhysicalIoValues ** SOAP_FMAC4 soap_get_PointerTons7__SoapPhysicalIoValues(struct soap*, ns7__SoapPhysicalIoValues **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SoapPhysicalIosStates_DEFINED
#define SOAP_TYPE_PointerTons7__SoapPhysicalIosStates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SoapPhysicalIosStates(struct soap*, ns7__SoapPhysicalIosStates *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SoapPhysicalIosStates(struct soap*, const char *, int, ns7__SoapPhysicalIosStates *const*, const char *);
SOAP_FMAC3 ns7__SoapPhysicalIosStates ** SOAP_FMAC4 soap_in_PointerTons7__SoapPhysicalIosStates(struct soap*, const char*, ns7__SoapPhysicalIosStates **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SoapPhysicalIosStates(struct soap*, ns7__SoapPhysicalIosStates *const*, const char*, const char*);
SOAP_FMAC3 ns7__SoapPhysicalIosStates ** SOAP_FMAC4 soap_get_PointerTons7__SoapPhysicalIosStates(struct soap*, ns7__SoapPhysicalIosStates **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SoapPhysicalIoLinks_DEFINED
#define SOAP_TYPE_PointerTons7__SoapPhysicalIoLinks_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SoapPhysicalIoLinks(struct soap*, ns7__SoapPhysicalIoLinks *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SoapPhysicalIoLinks(struct soap*, const char *, int, ns7__SoapPhysicalIoLinks *const*, const char *);
SOAP_FMAC3 ns7__SoapPhysicalIoLinks ** SOAP_FMAC4 soap_in_PointerTons7__SoapPhysicalIoLinks(struct soap*, const char*, ns7__SoapPhysicalIoLinks **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SoapPhysicalIoLinks(struct soap*, ns7__SoapPhysicalIoLinks *const*, const char*, const char*);
SOAP_FMAC3 ns7__SoapPhysicalIoLinks ** SOAP_FMAC4 soap_get_PointerTons7__SoapPhysicalIoLinks(struct soap*, ns7__SoapPhysicalIoLinks **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SoapWatches_DEFINED
#define SOAP_TYPE_PointerTons7__SoapWatches_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SoapWatches(struct soap*, ns7__SoapWatches *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SoapWatches(struct soap*, const char *, int, ns7__SoapWatches *const*, const char *);
SOAP_FMAC3 ns7__SoapWatches ** SOAP_FMAC4 soap_in_PointerTons7__SoapWatches(struct soap*, const char*, ns7__SoapWatches **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SoapWatches(struct soap*, ns7__SoapWatches *const*, const char*, const char*);
SOAP_FMAC3 ns7__SoapWatches ** SOAP_FMAC4 soap_get_PointerTons7__SoapWatches(struct soap*, ns7__SoapWatches **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__MimeData_DEFINED
#define SOAP_TYPE_PointerTons7__MimeData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__MimeData(struct soap*, ns7__MimeData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__MimeData(struct soap*, const char *, int, ns7__MimeData *const*, const char *);
SOAP_FMAC3 ns7__MimeData ** SOAP_FMAC4 soap_in_PointerTons7__MimeData(struct soap*, const char*, ns7__MimeData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__MimeData(struct soap*, ns7__MimeData *const*, const char*, const char*);
SOAP_FMAC3 ns7__MimeData ** SOAP_FMAC4 soap_get_PointerTons7__MimeData(struct soap*, ns7__MimeData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SoapCallStack_DEFINED
#define SOAP_TYPE_PointerTons7__SoapCallStack_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SoapCallStack(struct soap*, ns7__SoapCallStack *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SoapCallStack(struct soap*, const char *, int, ns7__SoapCallStack *const*, const char *);
SOAP_FMAC3 ns7__SoapCallStack ** SOAP_FMAC4 soap_in_PointerTons7__SoapCallStack(struct soap*, const char*, ns7__SoapCallStack **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SoapCallStack(struct soap*, ns7__SoapCallStack *const*, const char*, const char*);
SOAP_FMAC3 ns7__SoapCallStack ** SOAP_FMAC4 soap_get_PointerTons7__SoapCallStack(struct soap*, ns7__SoapCallStack **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SoapTasks_DEFINED
#define SOAP_TYPE_PointerTons7__SoapTasks_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SoapTasks(struct soap*, ns7__SoapTasks *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SoapTasks(struct soap*, const char *, int, ns7__SoapTasks *const*, const char *);
SOAP_FMAC3 ns7__SoapTasks ** SOAP_FMAC4 soap_in_PointerTons7__SoapTasks(struct soap*, const char*, ns7__SoapTasks **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SoapTasks(struct soap*, ns7__SoapTasks *const*, const char*, const char*);
SOAP_FMAC3 ns7__SoapTasks ** SOAP_FMAC4 soap_get_PointerTons7__SoapTasks(struct soap*, ns7__SoapTasks **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__BreakpointsResponses_DEFINED
#define SOAP_TYPE_PointerTons7__BreakpointsResponses_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__BreakpointsResponses(struct soap*, ns7__BreakpointsResponses *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__BreakpointsResponses(struct soap*, const char *, int, ns7__BreakpointsResponses *const*, const char *);
SOAP_FMAC3 ns7__BreakpointsResponses ** SOAP_FMAC4 soap_in_PointerTons7__BreakpointsResponses(struct soap*, const char*, ns7__BreakpointsResponses **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__BreakpointsResponses(struct soap*, ns7__BreakpointsResponses *const*, const char*, const char*);
SOAP_FMAC3 ns7__BreakpointsResponses ** SOAP_FMAC4 soap_get_PointerTons7__BreakpointsResponses(struct soap*, ns7__BreakpointsResponses **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SoapBreakpoints_DEFINED
#define SOAP_TYPE_PointerTons7__SoapBreakpoints_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SoapBreakpoints(struct soap*, ns7__SoapBreakpoints *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SoapBreakpoints(struct soap*, const char *, int, ns7__SoapBreakpoints *const*, const char *);
SOAP_FMAC3 ns7__SoapBreakpoints ** SOAP_FMAC4 soap_in_PointerTons7__SoapBreakpoints(struct soap*, const char*, ns7__SoapBreakpoints **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SoapBreakpoints(struct soap*, ns7__SoapBreakpoints *const*, const char*, const char*);
SOAP_FMAC3 ns7__SoapBreakpoints ** SOAP_FMAC4 soap_get_PointerTons7__SoapBreakpoints(struct soap*, ns7__SoapBreakpoints **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SoapPhysicalIoAttrib_DEFINED
#define SOAP_TYPE_PointerTons7__SoapPhysicalIoAttrib_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SoapPhysicalIoAttrib(struct soap*, ns7__SoapPhysicalIoAttrib *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SoapPhysicalIoAttrib(struct soap*, const char *, int, ns7__SoapPhysicalIoAttrib *const*, const char *);
SOAP_FMAC3 ns7__SoapPhysicalIoAttrib ** SOAP_FMAC4 soap_in_PointerTons7__SoapPhysicalIoAttrib(struct soap*, const char*, ns7__SoapPhysicalIoAttrib **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SoapPhysicalIoAttrib(struct soap*, ns7__SoapPhysicalIoAttrib *const*, const char*, const char*);
SOAP_FMAC3 ns7__SoapPhysicalIoAttrib ** SOAP_FMAC4 soap_get_PointerTons7__SoapPhysicalIoAttrib(struct soap*, ns7__SoapPhysicalIoAttrib **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SoapPhysicalAioAttrib_DEFINED
#define SOAP_TYPE_PointerTons7__SoapPhysicalAioAttrib_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SoapPhysicalAioAttrib(struct soap*, ns7__SoapPhysicalAioAttrib *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SoapPhysicalAioAttrib(struct soap*, const char *, int, ns7__SoapPhysicalAioAttrib *const*, const char *);
SOAP_FMAC3 ns7__SoapPhysicalAioAttrib ** SOAP_FMAC4 soap_in_PointerTons7__SoapPhysicalAioAttrib(struct soap*, const char*, ns7__SoapPhysicalAioAttrib **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SoapPhysicalAioAttrib(struct soap*, ns7__SoapPhysicalAioAttrib *const*, const char*, const char*);
SOAP_FMAC3 ns7__SoapPhysicalAioAttrib ** SOAP_FMAC4 soap_get_PointerTons7__SoapPhysicalAioAttrib(struct soap*, ns7__SoapPhysicalAioAttrib **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SoapPhysicalDioAttrib_DEFINED
#define SOAP_TYPE_PointerTons7__SoapPhysicalDioAttrib_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SoapPhysicalDioAttrib(struct soap*, ns7__SoapPhysicalDioAttrib *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SoapPhysicalDioAttrib(struct soap*, const char *, int, ns7__SoapPhysicalDioAttrib *const*, const char *);
SOAP_FMAC3 ns7__SoapPhysicalDioAttrib ** SOAP_FMAC4 soap_in_PointerTons7__SoapPhysicalDioAttrib(struct soap*, const char*, ns7__SoapPhysicalDioAttrib **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SoapPhysicalDioAttrib(struct soap*, ns7__SoapPhysicalDioAttrib *const*, const char*, const char*);
SOAP_FMAC3 ns7__SoapPhysicalDioAttrib ** SOAP_FMAC4 soap_get_PointerTons7__SoapPhysicalDioAttrib(struct soap*, ns7__SoapPhysicalDioAttrib **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SoapInstruction_DEFINED
#define SOAP_TYPE_PointerTons7__SoapInstruction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SoapInstruction(struct soap*, ns7__SoapInstruction *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SoapInstruction(struct soap*, const char *, int, ns7__SoapInstruction *const*, const char *);
SOAP_FMAC3 ns7__SoapInstruction ** SOAP_FMAC4 soap_in_PointerTons7__SoapInstruction(struct soap*, const char*, ns7__SoapInstruction **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SoapInstruction(struct soap*, ns7__SoapInstruction *const*, const char*, const char*);
SOAP_FMAC3 ns7__SoapInstruction ** SOAP_FMAC4 soap_get_PointerTons7__SoapInstruction(struct soap*, ns7__SoapInstruction **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SoapProgramLine_DEFINED
#define SOAP_TYPE_PointerTons7__SoapProgramLine_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SoapProgramLine(struct soap*, ns7__SoapProgramLine *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SoapProgramLine(struct soap*, const char *, int, ns7__SoapProgramLine *const*, const char *);
SOAP_FMAC3 ns7__SoapProgramLine ** SOAP_FMAC4 soap_in_PointerTons7__SoapProgramLine(struct soap*, const char*, ns7__SoapProgramLine **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SoapProgramLine(struct soap*, ns7__SoapProgramLine *const*, const char*, const char*);
SOAP_FMAC3 ns7__SoapProgramLine ** SOAP_FMAC4 soap_get_PointerTons7__SoapProgramLine(struct soap*, ns7__SoapProgramLine **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SoapDhParameters_DEFINED
#define SOAP_TYPE_PointerTons7__SoapDhParameters_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SoapDhParameters(struct soap*, ns7__SoapDhParameters *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SoapDhParameters(struct soap*, const char *, int, ns7__SoapDhParameters *const*, const char *);
SOAP_FMAC3 ns7__SoapDhParameters ** SOAP_FMAC4 soap_in_PointerTons7__SoapDhParameters(struct soap*, const char*, ns7__SoapDhParameters **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SoapDhParameters(struct soap*, ns7__SoapDhParameters *const*, const char*, const char*);
SOAP_FMAC3 ns7__SoapDhParameters ** SOAP_FMAC4 soap_get_PointerTons7__SoapDhParameters(struct soap*, ns7__SoapDhParameters **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SoapPhysicalIoUnlockResponse_DEFINED
#define SOAP_TYPE_PointerTons7__SoapPhysicalIoUnlockResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SoapPhysicalIoUnlockResponse(struct soap*, ns7__SoapPhysicalIoUnlockResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SoapPhysicalIoUnlockResponse(struct soap*, const char *, int, ns7__SoapPhysicalIoUnlockResponse *const*, const char *);
SOAP_FMAC3 ns7__SoapPhysicalIoUnlockResponse ** SOAP_FMAC4 soap_in_PointerTons7__SoapPhysicalIoUnlockResponse(struct soap*, const char*, ns7__SoapPhysicalIoUnlockResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SoapPhysicalIoUnlockResponse(struct soap*, ns7__SoapPhysicalIoUnlockResponse *const*, const char*, const char*);
SOAP_FMAC3 ns7__SoapPhysicalIoUnlockResponse ** SOAP_FMAC4 soap_get_PointerTons7__SoapPhysicalIoUnlockResponse(struct soap*, ns7__SoapPhysicalIoUnlockResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SoapPhysicalIoResponse_DEFINED
#define SOAP_TYPE_PointerTons7__SoapPhysicalIoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SoapPhysicalIoResponse(struct soap*, ns7__SoapPhysicalIoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SoapPhysicalIoResponse(struct soap*, const char *, int, ns7__SoapPhysicalIoResponse *const*, const char *);
SOAP_FMAC3 ns7__SoapPhysicalIoResponse ** SOAP_FMAC4 soap_in_PointerTons7__SoapPhysicalIoResponse(struct soap*, const char*, ns7__SoapPhysicalIoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SoapPhysicalIoResponse(struct soap*, ns7__SoapPhysicalIoResponse *const*, const char*, const char*);
SOAP_FMAC3 ns7__SoapPhysicalIoResponse ** SOAP_FMAC4 soap_get_PointerTons7__SoapPhysicalIoResponse(struct soap*, ns7__SoapPhysicalIoResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SoapPhysicalIoState_DEFINED
#define SOAP_TYPE_PointerTons7__SoapPhysicalIoState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SoapPhysicalIoState(struct soap*, ns7__SoapPhysicalIoState *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SoapPhysicalIoState(struct soap*, const char *, int, ns7__SoapPhysicalIoState *const*, const char *);
SOAP_FMAC3 ns7__SoapPhysicalIoState ** SOAP_FMAC4 soap_in_PointerTons7__SoapPhysicalIoState(struct soap*, const char*, ns7__SoapPhysicalIoState **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SoapPhysicalIoState(struct soap*, ns7__SoapPhysicalIoState *const*, const char*, const char*);
SOAP_FMAC3 ns7__SoapPhysicalIoState ** SOAP_FMAC4 soap_get_PointerTons7__SoapPhysicalIoState(struct soap*, ns7__SoapPhysicalIoState **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SoapData_DEFINED
#define SOAP_TYPE_PointerTons7__SoapData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SoapData(struct soap*, ns7__SoapData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SoapData(struct soap*, const char *, int, ns7__SoapData *const*, const char *);
SOAP_FMAC3 ns7__SoapData ** SOAP_FMAC4 soap_in_PointerTons7__SoapData(struct soap*, const char*, ns7__SoapData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SoapData(struct soap*, ns7__SoapData *const*, const char*, const char*);
SOAP_FMAC3 ns7__SoapData ** SOAP_FMAC4 soap_get_PointerTons7__SoapData(struct soap*, ns7__SoapData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SoapStackFrameAbstract_DEFINED
#define SOAP_TYPE_PointerTons7__SoapStackFrameAbstract_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SoapStackFrameAbstract(struct soap*, ns7__SoapStackFrameAbstract *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SoapStackFrameAbstract(struct soap*, const char *, int, ns7__SoapStackFrameAbstract *const*, const char *);
SOAP_FMAC3 ns7__SoapStackFrameAbstract ** SOAP_FMAC4 soap_in_PointerTons7__SoapStackFrameAbstract(struct soap*, const char*, ns7__SoapStackFrameAbstract **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SoapStackFrameAbstract(struct soap*, ns7__SoapStackFrameAbstract *const*, const char*, const char*);
SOAP_FMAC3 ns7__SoapStackFrameAbstract ** SOAP_FMAC4 soap_get_PointerTons7__SoapStackFrameAbstract(struct soap*, ns7__SoapStackFrameAbstract **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SoapTask_DEFINED
#define SOAP_TYPE_PointerTons7__SoapTask_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SoapTask(struct soap*, ns7__SoapTask *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SoapTask(struct soap*, const char *, int, ns7__SoapTask *const*, const char *);
SOAP_FMAC3 ns7__SoapTask ** SOAP_FMAC4 soap_in_PointerTons7__SoapTask(struct soap*, const char*, ns7__SoapTask **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SoapTask(struct soap*, ns7__SoapTask *const*, const char*, const char*);
SOAP_FMAC3 ns7__SoapTask ** SOAP_FMAC4 soap_get_PointerTons7__SoapTask(struct soap*, ns7__SoapTask **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__BreakpointsResponse_DEFINED
#define SOAP_TYPE_PointerTons7__BreakpointsResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__BreakpointsResponse(struct soap*, ns7__BreakpointsResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__BreakpointsResponse(struct soap*, const char *, int, ns7__BreakpointsResponse *const*, const char *);
SOAP_FMAC3 ns7__BreakpointsResponse ** SOAP_FMAC4 soap_in_PointerTons7__BreakpointsResponse(struct soap*, const char*, ns7__BreakpointsResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__BreakpointsResponse(struct soap*, ns7__BreakpointsResponse *const*, const char*, const char*);
SOAP_FMAC3 ns7__BreakpointsResponse ** SOAP_FMAC4 soap_get_PointerTons7__BreakpointsResponse(struct soap*, ns7__BreakpointsResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SoapBreakpoint_DEFINED
#define SOAP_TYPE_PointerTons7__SoapBreakpoint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SoapBreakpoint(struct soap*, ns7__SoapBreakpoint *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SoapBreakpoint(struct soap*, const char *, int, ns7__SoapBreakpoint *const*, const char *);
SOAP_FMAC3 ns7__SoapBreakpoint ** SOAP_FMAC4 soap_in_PointerTons7__SoapBreakpoint(struct soap*, const char*, ns7__SoapBreakpoint **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SoapBreakpoint(struct soap*, ns7__SoapBreakpoint *const*, const char*, const char*);
SOAP_FMAC3 ns7__SoapBreakpoint ** SOAP_FMAC4 soap_get_PointerTons7__SoapBreakpoint(struct soap*, ns7__SoapBreakpoint **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__VALApplication_DEFINED
#define SOAP_TYPE_PointerTons2__VALApplication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__VALApplication(struct soap*, ns2__VALApplication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__VALApplication(struct soap*, const char *, int, ns2__VALApplication *const*, const char *);
SOAP_FMAC3 ns2__VALApplication ** SOAP_FMAC4 soap_in_PointerTons2__VALApplication(struct soap*, const char*, ns2__VALApplication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__VALApplication(struct soap*, ns2__VALApplication *const*, const char*, const char*);
SOAP_FMAC3 ns2__VALApplication ** SOAP_FMAC4 soap_get_PointerTons2__VALApplication(struct soap*, ns2__VALApplication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CartesianPos_DEFINED
#define SOAP_TYPE_PointerTons1__CartesianPos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CartesianPos(struct soap*, ns1__CartesianPos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CartesianPos(struct soap*, const char *, int, ns1__CartesianPos *const*, const char *);
SOAP_FMAC3 ns1__CartesianPos ** SOAP_FMAC4 soap_in_PointerTons1__CartesianPos(struct soap*, const char*, ns1__CartesianPos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CartesianPos(struct soap*, ns1__CartesianPos *const*, const char*, const char*);
SOAP_FMAC3 ns1__CartesianPos ** SOAP_FMAC4 soap_get_PointerTons1__CartesianPos(struct soap*, ns1__CartesianPos **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__JointPos_DEFINED
#define SOAP_TYPE_PointerTons1__JointPos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__JointPos(struct soap*, ns1__JointPos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__JointPos(struct soap*, const char *, int, ns1__JointPos *const*, const char *);
SOAP_FMAC3 ns1__JointPos ** SOAP_FMAC4 soap_in_PointerTons1__JointPos(struct soap*, const char*, ns1__JointPos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__JointPos(struct soap*, ns1__JointPos *const*, const char*, const char*);
SOAP_FMAC3 ns1__JointPos ** SOAP_FMAC4 soap_get_PointerTons1__JointPos(struct soap*, ns1__JointPos **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Robots_DEFINED
#define SOAP_TYPE_PointerTons1__Robots_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Robots(struct soap*, ns1__Robots *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Robots(struct soap*, const char *, int, ns1__Robots *const*, const char *);
SOAP_FMAC3 ns1__Robots ** SOAP_FMAC4 soap_in_PointerTons1__Robots(struct soap*, const char*, ns1__Robots **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Robots(struct soap*, ns1__Robots *const*, const char*, const char*);
SOAP_FMAC3 ns1__Robots ** SOAP_FMAC4 soap_get_PointerTons1__Robots(struct soap*, ns1__Robots **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Parameters_DEFINED
#define SOAP_TYPE_PointerTons1__Parameters_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Parameters(struct soap*, ns1__Parameters *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Parameters(struct soap*, const char *, int, ns1__Parameters *const*, const char *);
SOAP_FMAC3 ns1__Parameters ** SOAP_FMAC4 soap_in_PointerTons1__Parameters(struct soap*, const char*, ns1__Parameters **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Parameters(struct soap*, ns1__Parameters *const*, const char*, const char*);
SOAP_FMAC3 ns1__Parameters ** SOAP_FMAC4 soap_get_PointerTons1__Parameters(struct soap*, ns1__Parameters **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Versions_DEFINED
#define SOAP_TYPE_PointerTons1__Versions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Versions(struct soap*, ns1__Versions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Versions(struct soap*, const char *, int, ns1__Versions *const*, const char *);
SOAP_FMAC3 ns1__Versions ** SOAP_FMAC4 soap_in_PointerTons1__Versions(struct soap*, const char*, ns1__Versions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Versions(struct soap*, ns1__Versions *const*, const char*, const char*);
SOAP_FMAC3 ns1__Versions ** SOAP_FMAC4 soap_get_PointerTons1__Versions(struct soap*, ns1__Versions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SoapServerVersion_DEFINED
#define SOAP_TYPE_PointerTons1__SoapServerVersion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SoapServerVersion(struct soap*, ns1__SoapServerVersion *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SoapServerVersion(struct soap*, const char *, int, ns1__SoapServerVersion *const*, const char *);
SOAP_FMAC3 ns1__SoapServerVersion ** SOAP_FMAC4 soap_in_PointerTons1__SoapServerVersion(struct soap*, const char*, ns1__SoapServerVersion **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SoapServerVersion(struct soap*, ns1__SoapServerVersion *const*, const char*, const char*);
SOAP_FMAC3 ns1__SoapServerVersion ** SOAP_FMAC4 soap_get_PointerTons1__SoapServerVersion(struct soap*, ns1__SoapServerVersion **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Robot_DEFINED
#define SOAP_TYPE_PointerTons1__Robot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Robot(struct soap*, ns1__Robot *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Robot(struct soap*, const char *, int, ns1__Robot *const*, const char *);
SOAP_FMAC3 ns1__Robot ** SOAP_FMAC4 soap_in_PointerTons1__Robot(struct soap*, const char*, ns1__Robot **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Robot(struct soap*, ns1__Robot *const*, const char*, const char*);
SOAP_FMAC3 ns1__Robot ** SOAP_FMAC4 soap_get_PointerTons1__Robot(struct soap*, ns1__Robot **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Version_DEFINED
#define SOAP_TYPE_PointerTons1__Version_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Version(struct soap*, ns1__Version *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Version(struct soap*, const char *, int, ns1__Version *const*, const char *);
SOAP_FMAC3 ns1__Version ** SOAP_FMAC4 soap_in_PointerTons1__Version(struct soap*, const char*, ns1__Version **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Version(struct soap*, ns1__Version *const*, const char*, const char*);
SOAP_FMAC3 ns1__Version ** SOAP_FMAC4 soap_get_PointerTons1__Version(struct soap*, ns1__Version **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Parameter_DEFINED
#define SOAP_TYPE_PointerTons1__Parameter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Parameter(struct soap*, ns1__Parameter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Parameter(struct soap*, const char *, int, ns1__Parameter *const*, const char *);
SOAP_FMAC3 ns1__Parameter ** SOAP_FMAC4 soap_in_PointerTons1__Parameter(struct soap*, const char*, ns1__Parameter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Parameter(struct soap*, ns1__Parameter *const*, const char*, const char*);
SOAP_FMAC3 ns1__Parameter ** SOAP_FMAC4 soap_get_PointerTons1__Parameter(struct soap*, ns1__Parameter **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__QName(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (soap_read__QName(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (soap_read_string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_XML_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_XML_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap*, std::vector<char *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap*, const std::vector<char *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap*, const char*, int, const std::vector<char *> *, const char*);
SOAP_FMAC3 std::vector<char *> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap*, const char*, std::vector<char *> *, const char*);
SOAP_FMAC1 std::vector<char *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<char *>  * soap_new_std__vectorTemplateOf_XML(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_XML(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons7__SoapDhParameters_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons7__SoapDhParameters_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons7__SoapDhParameters(struct soap*, std::vector<ns7__SoapDhParameters *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons7__SoapDhParameters(struct soap*, const std::vector<ns7__SoapDhParameters *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons7__SoapDhParameters(struct soap*, const char*, int, const std::vector<ns7__SoapDhParameters *> *, const char*);
SOAP_FMAC3 std::vector<ns7__SoapDhParameters *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons7__SoapDhParameters(struct soap*, const char*, std::vector<ns7__SoapDhParameters *> *, const char*);
SOAP_FMAC1 std::vector<ns7__SoapDhParameters *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons7__SoapDhParameters(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns7__SoapDhParameters *>  * soap_new_std__vectorTemplateOfPointerTons7__SoapDhParameters(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons7__SoapDhParameters(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons7__SoapPhysicalIoUnlockResponse_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons7__SoapPhysicalIoUnlockResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons7__SoapPhysicalIoUnlockResponse(struct soap*, std::vector<ns7__SoapPhysicalIoUnlockResponse *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons7__SoapPhysicalIoUnlockResponse(struct soap*, const std::vector<ns7__SoapPhysicalIoUnlockResponse *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons7__SoapPhysicalIoUnlockResponse(struct soap*, const char*, int, const std::vector<ns7__SoapPhysicalIoUnlockResponse *> *, const char*);
SOAP_FMAC3 std::vector<ns7__SoapPhysicalIoUnlockResponse *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons7__SoapPhysicalIoUnlockResponse(struct soap*, const char*, std::vector<ns7__SoapPhysicalIoUnlockResponse *> *, const char*);
SOAP_FMAC1 std::vector<ns7__SoapPhysicalIoUnlockResponse *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons7__SoapPhysicalIoUnlockResponse(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns7__SoapPhysicalIoUnlockResponse *>  * soap_new_std__vectorTemplateOfPointerTons7__SoapPhysicalIoUnlockResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons7__SoapPhysicalIoUnlockResponse(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons7__SoapPhysicalIoResponse_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons7__SoapPhysicalIoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons7__SoapPhysicalIoResponse(struct soap*, std::vector<ns7__SoapPhysicalIoResponse *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons7__SoapPhysicalIoResponse(struct soap*, const std::vector<ns7__SoapPhysicalIoResponse *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons7__SoapPhysicalIoResponse(struct soap*, const char*, int, const std::vector<ns7__SoapPhysicalIoResponse *> *, const char*);
SOAP_FMAC3 std::vector<ns7__SoapPhysicalIoResponse *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons7__SoapPhysicalIoResponse(struct soap*, const char*, std::vector<ns7__SoapPhysicalIoResponse *> *, const char*);
SOAP_FMAC1 std::vector<ns7__SoapPhysicalIoResponse *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons7__SoapPhysicalIoResponse(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns7__SoapPhysicalIoResponse *>  * soap_new_std__vectorTemplateOfPointerTons7__SoapPhysicalIoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons7__SoapPhysicalIoResponse(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons7__SoapPhysicalIoState_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons7__SoapPhysicalIoState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons7__SoapPhysicalIoState(struct soap*, std::vector<ns7__SoapPhysicalIoState *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons7__SoapPhysicalIoState(struct soap*, const std::vector<ns7__SoapPhysicalIoState *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons7__SoapPhysicalIoState(struct soap*, const char*, int, const std::vector<ns7__SoapPhysicalIoState *> *, const char*);
SOAP_FMAC3 std::vector<ns7__SoapPhysicalIoState *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons7__SoapPhysicalIoState(struct soap*, const char*, std::vector<ns7__SoapPhysicalIoState *> *, const char*);
SOAP_FMAC1 std::vector<ns7__SoapPhysicalIoState *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons7__SoapPhysicalIoState(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns7__SoapPhysicalIoState *>  * soap_new_std__vectorTemplateOfPointerTons7__SoapPhysicalIoState(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons7__SoapPhysicalIoState(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons7__SoapData_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons7__SoapData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons7__SoapData(struct soap*, std::vector<ns7__SoapData *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons7__SoapData(struct soap*, const std::vector<ns7__SoapData *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons7__SoapData(struct soap*, const char*, int, const std::vector<ns7__SoapData *> *, const char*);
SOAP_FMAC3 std::vector<ns7__SoapData *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons7__SoapData(struct soap*, const char*, std::vector<ns7__SoapData *> *, const char*);
SOAP_FMAC1 std::vector<ns7__SoapData *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons7__SoapData(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns7__SoapData *>  * soap_new_std__vectorTemplateOfPointerTons7__SoapData(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons7__SoapData(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons7__SoapStackFrameAbstract_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons7__SoapStackFrameAbstract_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons7__SoapStackFrameAbstract(struct soap*, std::vector<ns7__SoapStackFrameAbstract *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons7__SoapStackFrameAbstract(struct soap*, const std::vector<ns7__SoapStackFrameAbstract *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons7__SoapStackFrameAbstract(struct soap*, const char*, int, const std::vector<ns7__SoapStackFrameAbstract *> *, const char*);
SOAP_FMAC3 std::vector<ns7__SoapStackFrameAbstract *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons7__SoapStackFrameAbstract(struct soap*, const char*, std::vector<ns7__SoapStackFrameAbstract *> *, const char*);
SOAP_FMAC1 std::vector<ns7__SoapStackFrameAbstract *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons7__SoapStackFrameAbstract(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns7__SoapStackFrameAbstract *>  * soap_new_std__vectorTemplateOfPointerTons7__SoapStackFrameAbstract(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons7__SoapStackFrameAbstract(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons7__SoapTask_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons7__SoapTask_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons7__SoapTask(struct soap*, std::vector<ns7__SoapTask *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons7__SoapTask(struct soap*, const std::vector<ns7__SoapTask *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons7__SoapTask(struct soap*, const char*, int, const std::vector<ns7__SoapTask *> *, const char*);
SOAP_FMAC3 std::vector<ns7__SoapTask *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons7__SoapTask(struct soap*, const char*, std::vector<ns7__SoapTask *> *, const char*);
SOAP_FMAC1 std::vector<ns7__SoapTask *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons7__SoapTask(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns7__SoapTask *>  * soap_new_std__vectorTemplateOfPointerTons7__SoapTask(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons7__SoapTask(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons7__BreakpointsResponse_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons7__BreakpointsResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons7__BreakpointsResponse(struct soap*, std::vector<ns7__BreakpointsResponse *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons7__BreakpointsResponse(struct soap*, const std::vector<ns7__BreakpointsResponse *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons7__BreakpointsResponse(struct soap*, const char*, int, const std::vector<ns7__BreakpointsResponse *> *, const char*);
SOAP_FMAC3 std::vector<ns7__BreakpointsResponse *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons7__BreakpointsResponse(struct soap*, const char*, std::vector<ns7__BreakpointsResponse *> *, const char*);
SOAP_FMAC1 std::vector<ns7__BreakpointsResponse *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons7__BreakpointsResponse(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns7__BreakpointsResponse *>  * soap_new_std__vectorTemplateOfPointerTons7__BreakpointsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons7__BreakpointsResponse(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons7__SoapBreakpoint_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons7__SoapBreakpoint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons7__SoapBreakpoint(struct soap*, std::vector<ns7__SoapBreakpoint *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons7__SoapBreakpoint(struct soap*, const std::vector<ns7__SoapBreakpoint *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons7__SoapBreakpoint(struct soap*, const char*, int, const std::vector<ns7__SoapBreakpoint *> *, const char*);
SOAP_FMAC3 std::vector<ns7__SoapBreakpoint *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons7__SoapBreakpoint(struct soap*, const char*, std::vector<ns7__SoapBreakpoint *> *, const char*);
SOAP_FMAC1 std::vector<ns7__SoapBreakpoint *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons7__SoapBreakpoint(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns7__SoapBreakpoint *>  * soap_new_std__vectorTemplateOfPointerTons7__SoapBreakpoint(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons7__SoapBreakpoint(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__VALApplication_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__VALApplication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__VALApplication(struct soap*, std::vector<ns2__VALApplication *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__VALApplication(struct soap*, const std::vector<ns2__VALApplication *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__VALApplication(struct soap*, const char*, int, const std::vector<ns2__VALApplication *> *, const char*);
SOAP_FMAC3 std::vector<ns2__VALApplication *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__VALApplication(struct soap*, const char*, std::vector<ns2__VALApplication *> *, const char*);
SOAP_FMAC1 std::vector<ns2__VALApplication *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__VALApplication(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__VALApplication *>  * soap_new_std__vectorTemplateOfPointerTons2__VALApplication(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__VALApplication(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__Robot_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__Robot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__Robot(struct soap*, std::vector<ns1__Robot *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__Robot(struct soap*, const std::vector<ns1__Robot *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__Robot(struct soap*, const char*, int, const std::vector<ns1__Robot *> *, const char*);
SOAP_FMAC3 std::vector<ns1__Robot *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__Robot(struct soap*, const char*, std::vector<ns1__Robot *> *, const char*);
SOAP_FMAC1 std::vector<ns1__Robot *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__Robot(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__Robot *>  * soap_new_std__vectorTemplateOfPointerTons1__Robot(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__Robot(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__Version_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__Version_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__Version(struct soap*, std::vector<ns1__Version *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__Version(struct soap*, const std::vector<ns1__Version *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__Version(struct soap*, const char*, int, const std::vector<ns1__Version *> *, const char*);
SOAP_FMAC3 std::vector<ns1__Version *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__Version(struct soap*, const char*, std::vector<ns1__Version *> *, const char*);
SOAP_FMAC1 std::vector<ns1__Version *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__Version(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__Version *>  * soap_new_std__vectorTemplateOfPointerTons1__Version(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__Version(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__Parameter_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__Parameter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__Parameter(struct soap*, std::vector<ns1__Parameter *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__Parameter(struct soap*, const std::vector<ns1__Parameter *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__Parameter(struct soap*, const char*, int, const std::vector<ns1__Parameter *> *, const char*);
SOAP_FMAC3 std::vector<ns1__Parameter *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__Parameter(struct soap*, const char*, std::vector<ns1__Parameter *> *, const char*);
SOAP_FMAC1 std::vector<ns1__Parameter *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__Parameter(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__Parameter *>  * soap_new_std__vectorTemplateOfPointerTons1__Parameter(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__Parameter(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfdouble_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfdouble_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfdouble(struct soap*, std::vector<double> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfdouble(struct soap*, const std::vector<double> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfdouble(struct soap*, const char*, int, const std::vector<double> *, const char*);
SOAP_FMAC3 std::vector<double> * SOAP_FMAC4 soap_in_std__vectorTemplateOfdouble(struct soap*, const char*, std::vector<double> *, const char*);
SOAP_FMAC1 std::vector<double>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfdouble(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<double>  * soap_new_std__vectorTemplateOfdouble(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfdouble(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
