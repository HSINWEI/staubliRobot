/* soapCS8ServerV0Proxy.h
   Generated by gSOAP 2.8.52 for CS8Server.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapCS8ServerV0Proxy_H
#define soapCS8ServerV0Proxy_H
#include "../soapH.h"

    class SOAP_CMAC CS8ServerV0Proxy {
      public:
        /// Context to manage proxy IO and data
        struct soap *soap;
        bool soap_own; ///< flag indicating that this context is owned by this proxy when context is shared
        /// Endpoint URL of service 'CS8ServerV0Proxy' (change as needed)
        const char *soap_endpoint;
        /// Variables globally declared in CS8Server.h, if any
        /// Construct a proxy with new managing context
        CS8ServerV0Proxy();
        /// Copy constructor
        CS8ServerV0Proxy(const CS8ServerV0Proxy& rhs);
        /// Construct proxy given a shared managing context
        CS8ServerV0Proxy(struct soap*);
        /// Constructor taking an endpoint URL
        CS8ServerV0Proxy(const char *endpoint);
        /// Constructor taking input and output mode flags for the new managing context
        CS8ServerV0Proxy(soap_mode iomode);
        /// Constructor taking endpoint URL and input and output mode flags for the new managing context
        CS8ServerV0Proxy(const char *endpoint, soap_mode iomode);
        /// Constructor taking input and output mode flags for the new managing context
        CS8ServerV0Proxy(soap_mode imode, soap_mode omode);
        /// Destructor deletes non-shared managing context only (use destroy() to delete deserialized data)
        virtual ~CS8ServerV0Proxy();
        /// Initializer used by constructors
        virtual void CS8ServerV0Proxy_init(soap_mode imode, soap_mode omode);
        /// Return a copy that has a new managing context with the same engine state
        virtual CS8ServerV0Proxy *copy();
        /// Copy assignment
        CS8ServerV0Proxy& operator=(const CS8ServerV0Proxy&);
        /// Delete all deserialized data (uses soap_destroy() and soap_end())
        virtual void destroy();
        /// Delete all deserialized data and reset to default
        virtual void reset();
        /// Disables and removes SOAP Header from message by setting soap->header = NULL
        virtual void soap_noheader();
        /// Add SOAP Header to message
        virtual void soap_header(int *ns1__sessionId);
        /// Get SOAP Header structure (i.e. soap->header, which is NULL when absent)
        virtual ::SOAP_ENV__Header *soap_header();
        /// Get SOAP Fault structure (i.e. soap->fault, which is NULL when absent)
        virtual ::SOAP_ENV__Fault *soap_fault();
        /// Get SOAP Fault string (NULL when absent)
        virtual const char *soap_fault_string();
        /// Get SOAP Fault detail as string (NULL when absent)
        virtual const char *soap_fault_detail();
        /// Close connection (normally automatic, except for send_X ops)
        virtual int soap_close_socket();
        /// Force close connection (can kill a thread blocked on IO)
        virtual int soap_force_close_socket();
        /// Print fault
        virtual void soap_print_fault(FILE*);
    #ifndef WITH_LEAN
    #ifndef WITH_COMPAT
        /// Print fault to stream
        virtual void soap_stream_fault(std::ostream&);
    #endif
        /// Write fault to buffer
        virtual char *soap_sprint_fault(char *buf, size_t len);
    #endif
        /// Web service operation 'getSoapServerVersion' (returns SOAP_OK or error code)
        virtual int getSoapServerVersion(_ns1__getSoapServerVersion *ns1__getSoapServerVersion, _ns1__getSoapServerVersionResponse *ns1__getSoapServerVersionResponse)
        { return this->getSoapServerVersion(NULL, NULL, ns1__getSoapServerVersion, ns1__getSoapServerVersionResponse); }
        virtual int getSoapServerVersion(const char *soap_endpoint, const char *soap_action, _ns1__getSoapServerVersion *ns1__getSoapServerVersion, _ns1__getSoapServerVersionResponse *ns1__getSoapServerVersionResponse);
        /// Web service operation 'findServer' (returns SOAP_OK or error code)
        virtual int findServer(_ns1__findServer *ns1__findServer, _ns1__findServerResponse *ns1__findServerResponse)
        { return this->findServer(NULL, NULL, ns1__findServer, ns1__findServerResponse); }
        virtual int findServer(const char *soap_endpoint, const char *soap_action, _ns1__findServer *ns1__findServer, _ns1__findServerResponse *ns1__findServerResponse);
        /// Web service operation 'ping' (returns SOAP_OK or error code)
        virtual int ping(_ns1__ping *ns1__ping, _ns1__pingResponse *ns1__pingResponse)
        { return this->ping(NULL, NULL, ns1__ping, ns1__pingResponse); }
        virtual int ping(const char *soap_endpoint, const char *soap_action, _ns1__ping *ns1__ping, _ns1__pingResponse *ns1__pingResponse);
        /// Web service operation 'getCS8Versions' (returns SOAP_OK or error code)
        virtual int getCS8Versions(_ns1__getCS8Versions *ns1__getCS8Versions, _ns1__getCS8VersionsResponse *ns1__getCS8VersionsResponse)
        { return this->getCS8Versions(NULL, NULL, ns1__getCS8Versions, ns1__getCS8VersionsResponse); }
        virtual int getCS8Versions(const char *soap_endpoint, const char *soap_action, _ns1__getCS8Versions *ns1__getCS8Versions, _ns1__getCS8VersionsResponse *ns1__getCS8VersionsResponse);
        /// Web service operation 'getControllerParameters' (returns SOAP_OK or error code)
        virtual int getControllerParameters(_ns1__getControllerParameters *ns1__getControllerParameters, _ns1__getControllerParametersResponse *ns1__getControllerParametersResponse)
        { return this->getControllerParameters(NULL, NULL, ns1__getControllerParameters, ns1__getControllerParametersResponse); }
        virtual int getControllerParameters(const char *soap_endpoint, const char *soap_action, _ns1__getControllerParameters *ns1__getControllerParameters, _ns1__getControllerParametersResponse *ns1__getControllerParametersResponse);
        /// Web service operation 'getCS8Compatibility' (returns SOAP_OK or error code)
        virtual int getCS8Compatibility(_ns1__getCS8Compatibility *ns1__getCS8Compatibility, _ns1__getCS8CompatibilityResponse *ns1__getCS8CompatibilityResponse)
        { return this->getCS8Compatibility(NULL, NULL, ns1__getCS8Compatibility, ns1__getCS8CompatibilityResponse); }
        virtual int getCS8Compatibility(const char *soap_endpoint, const char *soap_action, _ns1__getCS8Compatibility *ns1__getCS8Compatibility, _ns1__getCS8CompatibilityResponse *ns1__getCS8CompatibilityResponse);
        /// Web service operation 'login' (returns SOAP_OK or error code)
        virtual int login(_ns1__login *ns1__login, _ns1__loginResponse *ns1__loginResponse)
        { return this->login(NULL, NULL, ns1__login, ns1__loginResponse); }
        virtual int login(const char *soap_endpoint, const char *soap_action, _ns1__login *ns1__login, _ns1__loginResponse *ns1__loginResponse);
        /// Web service operation 'logout' (returns SOAP_OK or error code)
        virtual int logout(_ns1__logout *ns1__logout, _ns1__logoutResponse *ns1__logoutResponse)
        { return this->logout(NULL, NULL, ns1__logout, ns1__logoutResponse); }
        virtual int logout(const char *soap_endpoint, const char *soap_action, _ns1__logout *ns1__logout, _ns1__logoutResponse *ns1__logoutResponse);
        /// Web service operation 'getRobots' (returns SOAP_OK or error code)
        virtual int getRobots(_ns1__getRobots *ns1__getRobots, _ns1__getRobotsResponse *ns1__getRobotsResponse)
        { return this->getRobots(NULL, NULL, ns1__getRobots, ns1__getRobotsResponse); }
        virtual int getRobots(const char *soap_endpoint, const char *soap_action, _ns1__getRobots *ns1__getRobots, _ns1__getRobotsResponse *ns1__getRobotsResponse);
        /// Web service operation 'getRobotJointPos' (returns SOAP_OK or error code)
        virtual int getRobotJointPos(_ns1__getRobotJointPos *ns1__getRobotJointPos, _ns1__getRobotJointPosResponse *ns1__getRobotJointPosResponse)
        { return this->getRobotJointPos(NULL, NULL, ns1__getRobotJointPos, ns1__getRobotJointPosResponse); }
        virtual int getRobotJointPos(const char *soap_endpoint, const char *soap_action, _ns1__getRobotJointPos *ns1__getRobotJointPos, _ns1__getRobotJointPosResponse *ns1__getRobotJointPosResponse);
        /// Web service operation 'getRobotJntCartPos' (returns SOAP_OK or error code)
        virtual int getRobotJntCartPos(_ns1__getRobotJntCartPos *ns1__getRobotJntCartPos, _ns1__getRobotJntCartPosResponse *ns1__getRobotJntCartPosResponse)
        { return this->getRobotJntCartPos(NULL, NULL, ns1__getRobotJntCartPos, ns1__getRobotJntCartPosResponse); }
        virtual int getRobotJntCartPos(const char *soap_endpoint, const char *soap_action, _ns1__getRobotJntCartPos *ns1__getRobotJntCartPos, _ns1__getRobotJntCartPosResponse *ns1__getRobotJntCartPosResponse);
        /// Web service operation 'setRobotJointPos' (returns SOAP_OK or error code)
        virtual int setRobotJointPos(_ns1__setRobotJointPos *ns1__setRobotJointPos, _ns1__setRobotPosResponse *ns1__setRobotPosResponse)
        { return this->setRobotJointPos(NULL, NULL, ns1__setRobotJointPos, ns1__setRobotPosResponse); }
        virtual int setRobotJointPos(const char *soap_endpoint, const char *soap_action, _ns1__setRobotJointPos *ns1__setRobotJointPos, _ns1__setRobotPosResponse *ns1__setRobotPosResponse);
    };
#endif
